
BlackPill_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031a0  080031a0  000041a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031a8  080031a8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a8  080031a8  000041a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08003218  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08003218  00005340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001023a  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8f  00000000  00000000  000152d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008eda  00000000  00000000  00017161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  00020040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098e  00000000  00000000  00020bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ef1  00000000  00000000  0002155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011609  00000000  00000000  0003844f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f25f  00000000  00000000  00049a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d8cb7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002668  00000000  00000000  000d8cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000db364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003108 	.word	0x08003108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003108 	.word	0x08003108

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:
/* USER CODE BEGIN 0 */
// Send printf to uart1
int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005ac:	3801      	subs	r0, #1
 80005ae:	2801      	cmp	r0, #1
 80005b0:	d80d      	bhi.n	80005ce <_write+0x22>
int _write(int fd, char* ptr, int len) {
 80005b2:	b510      	push	{r4, lr}
 80005b4:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	b292      	uxth	r2, r2
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <_write+0x28>)
 80005be:	f001 fdaa 	bl	8002116 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 80005c2:	2800      	cmp	r0, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	4620      	moveq	r0, r4
 80005c8:	f04f 30ff 	movne.w	r0, #4294967295
    else
      return -1;
  }
  return -1;
}
 80005cc:	bd10      	pop	{r4, pc}
  return -1;
 80005ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005d2:	4770      	bx	lr
 80005d4:	20000084 	.word	0x20000084

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b500      	push	{lr}
 80005da:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005dc:	2230      	movs	r2, #48	@ 0x30
 80005de:	2100      	movs	r1, #0
 80005e0:	a808      	add	r0, sp, #32
 80005e2:	f002 f80f 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	9303      	str	r3, [sp, #12]
 80005ea:	9304      	str	r3, [sp, #16]
 80005ec:	9305      	str	r3, [sp, #20]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <SystemClock_Config+0xa0>)
 80005f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80005f8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80005fc:	6411      	str	r1, [r2, #64]	@ 0x40
 80005fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000600:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <SystemClock_Config+0xa4>)
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061e:	9302      	str	r3, [sp, #8]
 8000620:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000622:	2301      	movs	r3, #1
 8000624:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000630:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000634:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000636:	2219      	movs	r2, #25
 8000638:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800063a:	22a8      	movs	r2, #168	@ 0xa8
 800063c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	a808      	add	r0, sp, #32
 8000646:	f000 fd8b 	bl	8001160 <HAL_RCC_OscConfig>
 800064a:	b980      	cbnz	r0, 800066e <SystemClock_Config+0x96>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2102      	movs	r1, #2
 8000652:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800065c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	a803      	add	r0, sp, #12
 8000662:	f000 ffcd 	bl	8001600 <HAL_RCC_ClockConfig>
 8000666:	b920      	cbnz	r0, 8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
}
 8000668:	b015      	add	sp, #84	@ 0x54
 800066a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <SystemClock_Config+0x98>
 8000672:	b672      	cpsid	i
 8000674:	e7fe      	b.n	8000674 <SystemClock_Config+0x9c>
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <main>:
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	ed2d 8b04 	vpush	{d8-d9}
 8000686:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000688:	f000 fbf4 	bl	8000e74 <HAL_Init>
  SystemClock_Config();
 800068c:	f7ff ffa4 	bl	80005d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2400      	movs	r4, #0
 8000692:	9412      	str	r4, [sp, #72]	@ 0x48
 8000694:	9413      	str	r4, [sp, #76]	@ 0x4c
 8000696:	9414      	str	r4, [sp, #80]	@ 0x50
 8000698:	9415      	str	r4, [sp, #84]	@ 0x54
 800069a:	9416      	str	r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	9401      	str	r4, [sp, #4]
 800069e:	4ba4      	ldr	r3, [pc, #656]	@ (8000930 <main+0x2b0>)
 80006a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006a2:	f042 0204 	orr.w	r2, r2, #4
 80006a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80006a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006aa:	f002 0204 	and.w	r2, r2, #4
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	9402      	str	r4, [sp, #8]
 80006b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80006ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80006bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006be:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80006c2:	9202      	str	r2, [sp, #8]
 80006c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	9403      	str	r4, [sp, #12]
 80006c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80006d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d2:	f002 0201 	and.w	r2, r2, #1
 80006d6:	9203      	str	r2, [sp, #12]
 80006d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	9404      	str	r4, [sp, #16]
 80006dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006de:	f042 0202 	orr.w	r2, r2, #2
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	9304      	str	r3, [sp, #16]
 80006ec:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006ee:	4d91      	ldr	r5, [pc, #580]	@ (8000934 <main+0x2b4>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f6:	4628      	mov	r0, r5
 80006f8:	f000 fd2c 	bl	8001154 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000700:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000702:	2311      	movs	r3, #17
 8000704:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	9414      	str	r4, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800070a:	a912      	add	r1, sp, #72	@ 0x48
 800070c:	4628      	mov	r0, r5
 800070e:	f000 fc39 	bl	8000f84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_Pin;
 8000712:	2301      	movs	r3, #1
 8000714:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8000716:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 800071a:	9213      	str	r2, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071c:	9314      	str	r3, [sp, #80]	@ 0x50
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800071e:	a912      	add	r1, sp, #72	@ 0x48
 8000720:	4885      	ldr	r0, [pc, #532]	@ (8000938 <main+0x2b8>)
 8000722:	f000 fc2f 	bl	8000f84 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8000726:	4885      	ldr	r0, [pc, #532]	@ (800093c <main+0x2bc>)
 8000728:	4b85      	ldr	r3, [pc, #532]	@ (8000940 <main+0x2c0>)
 800072a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800072c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000730:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	230c      	movs	r3, #12
 800073a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000740:	f001 fcb9 	bl	80020b6 <HAL_UART_Init>
 8000744:	2800      	cmp	r0, #0
 8000746:	f040 8160 	bne.w	8000a0a <main+0x38a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800074e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000750:	930d      	str	r3, [sp, #52]	@ 0x34
 8000752:	930e      	str	r3, [sp, #56]	@ 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	9307      	str	r3, [sp, #28]
 8000756:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	9312      	str	r3, [sp, #72]	@ 0x48
 800075a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800075c:	9314      	str	r3, [sp, #80]	@ 0x50
 800075e:	9315      	str	r3, [sp, #84]	@ 0x54
 8000760:	9316      	str	r3, [sp, #88]	@ 0x58
 8000762:	9317      	str	r3, [sp, #92]	@ 0x5c
 8000764:	9318      	str	r3, [sp, #96]	@ 0x60
  htim4.Instance = TIM4;
 8000766:	4877      	ldr	r0, [pc, #476]	@ (8000944 <main+0x2c4>)
 8000768:	4a77      	ldr	r2, [pc, #476]	@ (8000948 <main+0x2c8>)
 800076a:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 83;
 800076c:	2253      	movs	r2, #83	@ 0x53
 800076e:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 999;
 8000772:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000776:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800077c:	f001 f910 	bl	80019a0 <HAL_TIM_Base_Init>
 8000780:	2800      	cmp	r0, #0
 8000782:	f040 8144 	bne.w	8000a0e <main+0x38e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800078c:	a90b      	add	r1, sp, #44	@ 0x2c
 800078e:	486d      	ldr	r0, [pc, #436]	@ (8000944 <main+0x2c4>)
 8000790:	f001 fa07 	bl	8001ba2 <HAL_TIM_ConfigClockSource>
 8000794:	2800      	cmp	r0, #0
 8000796:	f040 813c 	bne.w	8000a12 <main+0x392>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800079a:	486a      	ldr	r0, [pc, #424]	@ (8000944 <main+0x2c4>)
 800079c:	f001 f92c 	bl	80019f8 <HAL_TIM_PWM_Init>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	f040 8138 	bne.w	8000a16 <main+0x396>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ac:	a907      	add	r1, sp, #28
 80007ae:	4865      	ldr	r0, [pc, #404]	@ (8000944 <main+0x2c4>)
 80007b0:	f001 fb28 	bl	8001e04 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	f040 8130 	bne.w	8000a1a <main+0x39a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	@ 0x60
 80007bc:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.Pulse = 500;
 80007be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c4:	2200      	movs	r2, #0
 80007c6:	9214      	str	r2, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c8:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ca:	a912      	add	r1, sp, #72	@ 0x48
 80007cc:	485d      	ldr	r0, [pc, #372]	@ (8000944 <main+0x2c4>)
 80007ce:	f001 f96d 	bl	8001aac <HAL_TIM_PWM_ConfigChannel>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	f040 8123 	bne.w	8000a1e <main+0x39e>
  HAL_TIM_MspPostInit(&htim4);
 80007d8:	485a      	ldr	r0, [pc, #360]	@ (8000944 <main+0x2c4>)
 80007da:	f000 f9ed 	bl	8000bb8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	2400      	movs	r4, #0
 80007e0:	9407      	str	r4, [sp, #28]
 80007e2:	9408      	str	r4, [sp, #32]
 80007e4:	9409      	str	r4, [sp, #36]	@ 0x24
 80007e6:	940a      	str	r4, [sp, #40]	@ 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	9405      	str	r4, [sp, #20]
 80007ea:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 80007ee:	940c      	str	r4, [sp, #48]	@ 0x30
 80007f0:	940d      	str	r4, [sp, #52]	@ 0x34
 80007f2:	940e      	str	r4, [sp, #56]	@ 0x38
 80007f4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80007f6:	9410      	str	r4, [sp, #64]	@ 0x40
 80007f8:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007fa:	2220      	movs	r2, #32
 80007fc:	4621      	mov	r1, r4
 80007fe:	a812      	add	r0, sp, #72	@ 0x48
 8000800:	f001 ff00 	bl	8002604 <memset>
  htim1.Instance = TIM1;
 8000804:	4851      	ldr	r0, [pc, #324]	@ (800094c <main+0x2cc>)
 8000806:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <main+0x2d0>)
 8000808:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800080a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 800080e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000812:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000816:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081a:	f001 f8c1 	bl	80019a0 <HAL_TIM_Base_Init>
 800081e:	2800      	cmp	r0, #0
 8000820:	f040 80ff 	bne.w	8000a22 <main+0x3a2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000828:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082a:	a907      	add	r1, sp, #28
 800082c:	4847      	ldr	r0, [pc, #284]	@ (800094c <main+0x2cc>)
 800082e:	f001 f9b8 	bl	8001ba2 <HAL_TIM_ConfigClockSource>
 8000832:	2800      	cmp	r0, #0
 8000834:	f040 80f7 	bne.w	8000a26 <main+0x3a6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000838:	4844      	ldr	r0, [pc, #272]	@ (800094c <main+0x2cc>)
 800083a:	f001 f8dd 	bl	80019f8 <HAL_TIM_PWM_Init>
 800083e:	2800      	cmp	r0, #0
 8000840:	f040 80f3 	bne.w	8000a2a <main+0x3aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084a:	a905      	add	r1, sp, #20
 800084c:	483f      	ldr	r0, [pc, #252]	@ (800094c <main+0x2cc>)
 800084e:	f001 fad9 	bl	8001e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	2800      	cmp	r0, #0
 8000854:	f040 80eb 	bne.w	8000a2e <main+0x3ae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000858:	2360      	movs	r3, #96	@ 0x60
 800085a:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.Pulse = 700;
 800085c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000860:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2200      	movs	r2, #0
 8000864:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000866:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	9211      	str	r2, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	a90b      	add	r1, sp, #44	@ 0x2c
 8000870:	4836      	ldr	r0, [pc, #216]	@ (800094c <main+0x2cc>)
 8000872:	f001 f91b 	bl	8001aac <HAL_TIM_PWM_ConfigChannel>
 8000876:	2800      	cmp	r0, #0
 8000878:	f040 80db 	bne.w	8000a32 <main+0x3b2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000880:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000882:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000886:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800088c:	9217      	str	r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088e:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000890:	a912      	add	r1, sp, #72	@ 0x48
 8000892:	482e      	ldr	r0, [pc, #184]	@ (800094c <main+0x2cc>)
 8000894:	f001 faf2 	bl	8001e7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000898:	2800      	cmp	r0, #0
 800089a:	f040 80cc 	bne.w	8000a36 <main+0x3b6>
  HAL_TIM_MspPostInit(&htim1);
 800089e:	482b      	ldr	r0, [pc, #172]	@ (800094c <main+0x2cc>)
 80008a0:	f000 f98a 	bl	8000bb8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a4:	2300      	movs	r3, #0
 80008a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80008a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80008aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80008ac:	930e      	str	r3, [sp, #56]	@ 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	9307      	str	r3, [sp, #28]
 80008b0:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80008b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80008b6:	9314      	str	r3, [sp, #80]	@ 0x50
 80008b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80008ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80008bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80008be:	9318      	str	r3, [sp, #96]	@ 0x60
  htim2.Instance = TIM2;
 80008c0:	4824      	ldr	r0, [pc, #144]	@ (8000954 <main+0x2d4>)
 80008c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 80008c8:	2253      	movs	r2, #83	@ 0x53
 80008ca:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 80008ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d8:	f001 f862 	bl	80019a0 <HAL_TIM_Base_Init>
 80008dc:	2800      	cmp	r0, #0
 80008de:	f040 80ac 	bne.w	8000a3a <main+0x3ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e8:	a90b      	add	r1, sp, #44	@ 0x2c
 80008ea:	481a      	ldr	r0, [pc, #104]	@ (8000954 <main+0x2d4>)
 80008ec:	f001 f959 	bl	8001ba2 <HAL_TIM_ConfigClockSource>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	f040 80a4 	bne.w	8000a3e <main+0x3be>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	4817      	ldr	r0, [pc, #92]	@ (8000954 <main+0x2d4>)
 80008f8:	f001 f87e 	bl	80019f8 <HAL_TIM_PWM_Init>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	f040 80a0 	bne.w	8000a42 <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	a907      	add	r1, sp, #28
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <main+0x2d4>)
 800090c:	f001 fa7a 	bl	8001e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	2800      	cmp	r0, #0
 8000912:	f040 8098 	bne.w	8000a46 <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000916:	2360      	movs	r3, #96	@ 0x60
 8000918:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.Pulse = 30;
 800091a:	231e      	movs	r3, #30
 800091c:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091e:	2200      	movs	r2, #0
 8000920:	9214      	str	r2, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	a912      	add	r1, sp, #72	@ 0x48
 8000926:	480b      	ldr	r0, [pc, #44]	@ (8000954 <main+0x2d4>)
 8000928:	f001 f8c0 	bl	8001aac <HAL_TIM_PWM_ConfigChannel>
 800092c:	e014      	b.n	8000958 <main+0x2d8>
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	20000084 	.word	0x20000084
 8000940:	40011000 	.word	0x40011000
 8000944:	200000cc 	.word	0x200000cc
 8000948:	40000800 	.word	0x40000800
 800094c:	200001a4 	.word	0x200001a4
 8000950:	40010000 	.word	0x40010000
 8000954:	2000015c 	.word	0x2000015c
 8000958:	2800      	cmp	r0, #0
 800095a:	d176      	bne.n	8000a4a <main+0x3ca>
  HAL_TIM_MspPostInit(&htim2);
 800095c:	4854      	ldr	r0, [pc, #336]	@ (8000ab0 <main+0x430>)
 800095e:	f000 f92b 	bl	8000bb8 <HAL_TIM_MspPostInit>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	2300      	movs	r3, #0
 8000964:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000966:	930c      	str	r3, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000968:	9312      	str	r3, [sp, #72]	@ 0x48
 800096a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800096c:	9314      	str	r3, [sp, #80]	@ 0x50
 800096e:	9315      	str	r3, [sp, #84]	@ 0x54
 8000970:	9316      	str	r3, [sp, #88]	@ 0x58
 8000972:	9317      	str	r3, [sp, #92]	@ 0x5c
 8000974:	9318      	str	r3, [sp, #96]	@ 0x60
  htim3.Instance = TIM3;
 8000976:	484f      	ldr	r0, [pc, #316]	@ (8000ab4 <main+0x434>)
 8000978:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <main+0x438>)
 800097a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 83;
 800097c:	2253      	movs	r2, #83	@ 0x53
 800097e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8000982:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000986:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098c:	f001 f834 	bl	80019f8 <HAL_TIM_PWM_Init>
 8000990:	2800      	cmp	r0, #0
 8000992:	d15c      	bne.n	8000a4e <main+0x3ce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099a:	a90b      	add	r1, sp, #44	@ 0x2c
 800099c:	4845      	ldr	r0, [pc, #276]	@ (8000ab4 <main+0x434>)
 800099e:	f001 fa31 	bl	8001e04 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d155      	bne.n	8000a52 <main+0x3d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.Pulse = 300;
 80009aa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80009ae:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2200      	movs	r2, #0
 80009b2:	9214      	str	r2, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	a912      	add	r1, sp, #72	@ 0x48
 80009b8:	483e      	ldr	r0, [pc, #248]	@ (8000ab4 <main+0x434>)
 80009ba:	f001 f877 	bl	8001aac <HAL_TIM_PWM_ConfigChannel>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d149      	bne.n	8000a56 <main+0x3d6>
  HAL_TIM_MspPostInit(&htim3);
 80009c2:	4c3c      	ldr	r4, [pc, #240]	@ (8000ab4 <main+0x434>)
 80009c4:	4620      	mov	r0, r4
 80009c6:	f000 f8f7 	bl	8000bb8 <HAL_TIM_MspPostInit>
  printf("\n\n\n\n\n\nStarting Timer Now \n");
 80009ca:	483c      	ldr	r0, [pc, #240]	@ (8000abc <main+0x43c>)
 80009cc:	f001 fd3a 	bl	8002444 <puts>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <main+0x440>)
 80009d4:	f001 f9aa 	bl	8001d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	483a      	ldr	r0, [pc, #232]	@ (8000ac4 <main+0x444>)
 80009dc:	f001 f9a6 	bl	8001d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <main+0x430>)
 80009e4:	f001 f9a2 	bl	8001d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009e8:	2100      	movs	r1, #0
 80009ea:	4620      	mov	r0, r4
 80009ec:	f001 f99e 	bl	8001d2c <HAL_TIM_PWM_Start>
  float pwm_value = 0, pwm_next =0, pwm_change =0;
 80009f0:	eddf 8a35 	vldr	s17, [pc, #212]	@ 8000ac8 <main+0x448>
 80009f4:	eeb0 8a68 	vmov.f32	s16, s17
  uint32_t now = 0, next_tick = 500, loop_count = 0, next_change = 0;
 80009f8:	2500      	movs	r5, #0
 80009fa:	462a      	mov	r2, r5
 80009fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
	 now = uwTick;
 8000a00:	4e32      	ldr	r6, [pc, #200]	@ (8000acc <main+0x44c>)
		 printf("tick %lu (loop = %lu)\n", now / 1000, loop_count);
 8000a02:	4f33      	ldr	r7, [pc, #204]	@ (8000ad0 <main+0x450>)
		 if (pwm_value == 1000) pwm_change = -1;
 8000a04:	ed9f 9a33 	vldr	s18, [pc, #204]	@ 8000ad4 <main+0x454>
 8000a08:	e035      	b.n	8000a76 <main+0x3f6>
 8000a0a:	b672      	cpsid	i
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <main+0x38c>
 8000a0e:	b672      	cpsid	i
 8000a10:	e7fe      	b.n	8000a10 <main+0x390>
 8000a12:	b672      	cpsid	i
 8000a14:	e7fe      	b.n	8000a14 <main+0x394>
 8000a16:	b672      	cpsid	i
 8000a18:	e7fe      	b.n	8000a18 <main+0x398>
 8000a1a:	b672      	cpsid	i
 8000a1c:	e7fe      	b.n	8000a1c <main+0x39c>
 8000a1e:	b672      	cpsid	i
 8000a20:	e7fe      	b.n	8000a20 <main+0x3a0>
 8000a22:	b672      	cpsid	i
 8000a24:	e7fe      	b.n	8000a24 <main+0x3a4>
 8000a26:	b672      	cpsid	i
 8000a28:	e7fe      	b.n	8000a28 <main+0x3a8>
 8000a2a:	b672      	cpsid	i
 8000a2c:	e7fe      	b.n	8000a2c <main+0x3ac>
 8000a2e:	b672      	cpsid	i
 8000a30:	e7fe      	b.n	8000a30 <main+0x3b0>
 8000a32:	b672      	cpsid	i
 8000a34:	e7fe      	b.n	8000a34 <main+0x3b4>
 8000a36:	b672      	cpsid	i
 8000a38:	e7fe      	b.n	8000a38 <main+0x3b8>
 8000a3a:	b672      	cpsid	i
 8000a3c:	e7fe      	b.n	8000a3c <main+0x3bc>
 8000a3e:	b672      	cpsid	i
 8000a40:	e7fe      	b.n	8000a40 <main+0x3c0>
 8000a42:	b672      	cpsid	i
 8000a44:	e7fe      	b.n	8000a44 <main+0x3c4>
 8000a46:	b672      	cpsid	i
 8000a48:	e7fe      	b.n	8000a48 <main+0x3c8>
 8000a4a:	b672      	cpsid	i
 8000a4c:	e7fe      	b.n	8000a4c <main+0x3cc>
 8000a4e:	b672      	cpsid	i
 8000a50:	e7fe      	b.n	8000a50 <main+0x3d0>
 8000a52:	b672      	cpsid	i
 8000a54:	e7fe      	b.n	8000a54 <main+0x3d4>
 8000a56:	b672      	cpsid	i
 8000a58:	e7fe      	b.n	8000a58 <main+0x3d8>
		 printf("tick %lu (loop = %lu)\n", now / 1000, loop_count);
 8000a5a:	fba7 3104 	umull	r3, r1, r7, r4
 8000a5e:	0989      	lsrs	r1, r1, #6
 8000a60:	481d      	ldr	r0, [pc, #116]	@ (8000ad8 <main+0x458>)
 8000a62:	f001 fc87 	bl	8002374 <iprintf>
		 next_tick = now +500;
 8000a66:	f504 73fa 	add.w	r3, r4, #500	@ 0x1f4
		 loop_count = 0;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	e006      	b.n	8000a7c <main+0x3fc>
		 if (pwm_value == 0) pwm_change = 1;
 8000a6e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
		 next_change = now + 1;
 8000a72:	1c65      	adds	r5, r4, #1
	 ++loop_count;
 8000a74:	3201      	adds	r2, #1
	 now = uwTick;
 8000a76:	6834      	ldr	r4, [r6, #0]
	 if (now >= next_tick) {
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	d9ee      	bls.n	8000a5a <main+0x3da>
	 if (now >= next_change) {
 8000a7c:	42a5      	cmp	r5, r4
 8000a7e:	d8f9      	bhi.n	8000a74 <main+0x3f4>
		 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 8000a80:	490f      	ldr	r1, [pc, #60]	@ (8000ac0 <main+0x440>)
 8000a82:	6809      	ldr	r1, [r1, #0]
 8000a84:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8000a88:	edc1 7a0d 	vstr	s15, [r1, #52]	@ 0x34
		 pwm_value += pwm_change;
 8000a8c:	ee38 8a28 	vadd.f32	s16, s16, s17
		 if (pwm_value == 0) pwm_change = 1;
 8000a90:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	d0e9      	beq.n	8000a6e <main+0x3ee>
		 if (pwm_value == 1000) pwm_change = -1;
 8000a9a:	eeb4 8a49 	vcmp.f32	s16, s18
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8000aa6:	bf08      	it	eq
 8000aa8:	eef0 8a67 	vmoveq.f32	s17, s15
 8000aac:	e7e1      	b.n	8000a72 <main+0x3f2>
 8000aae:	bf00      	nop
 8000ab0:	2000015c 	.word	0x2000015c
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	08003120 	.word	0x08003120
 8000ac0:	200000cc 	.word	0x200000cc
 8000ac4:	200001a4 	.word	0x200001a4
 8000ac8:	00000000 	.word	0x00000000
 8000acc:	200001f0 	.word	0x200001f0
 8000ad0:	10624dd3 	.word	0x10624dd3
 8000ad4:	447a0000 	.word	0x447a0000
 8000ad8:	0800313c 	.word	0x0800313c

08000adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2100      	movs	r1, #0
 8000ae0:	9100      	str	r1, [sp, #0]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_MspInit+0x34>)
 8000ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000aea:	645a      	str	r2, [r3, #68]	@ 0x44
 8000aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000aee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000af2:	9200      	str	r2, [sp, #0]
 8000af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	9101      	str	r1, [sp, #4]
 8000af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000afa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	b002      	add	sp, #8
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b14:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000b16:	6803      	ldr	r3, [r0, #0]
 8000b18:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_TIM_Base_MspInit+0x68>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d007      	beq.n	8000b2e <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b22:	d011      	beq.n	8000b48 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8000b24:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <HAL_TIM_Base_MspInit+0x6c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d01b      	beq.n	8000b62 <HAL_TIM_Base_MspInit+0x4e>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_TIM_Base_MspInit+0x70>)
 8000b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	9b01      	ldr	r3, [sp, #4]
 8000b46:	e7f0      	b.n	8000b2a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <HAL_TIM_Base_MspInit+0x70>)
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b50:	f042 0201 	orr.w	r2, r2, #1
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	9b02      	ldr	r3, [sp, #8]
 8000b60:	e7e3      	b.n	8000b2a <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_TIM_Base_MspInit+0x70>)
 8000b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b6a:	f042 0204 	orr.w	r2, r2, #4
 8000b6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	9303      	str	r3, [sp, #12]
 8000b78:	9b03      	ldr	r3, [sp, #12]
}
 8000b7a:	e7d6      	b.n	8000b2a <HAL_TIM_Base_MspInit+0x16>
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	40000800 	.word	0x40000800
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8000b88:	6802      	ldr	r2, [r0, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_TIM_PWM_MspInit+0x28>)
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d000      	beq.n	8000b92 <HAL_TIM_PWM_MspInit+0xa>
 8000b90:	4770      	bx	lr
{
 8000b92:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x2c>)
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b9c:	f042 0202 	orr.w	r2, r2, #2
 8000ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000bac:	b002      	add	sp, #8
 8000bae:	4770      	bx	lr
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b500      	push	{lr}
 8000bba:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9305      	str	r3, [sp, #20]
 8000bc0:	9306      	str	r3, [sp, #24]
 8000bc2:	9307      	str	r3, [sp, #28]
 8000bc4:	9308      	str	r3, [sp, #32]
 8000bc6:	9309      	str	r3, [sp, #36]	@ 0x24
  if(htim->Instance==TIM1)
 8000bc8:	6803      	ldr	r3, [r0, #0]
 8000bca:	4a35      	ldr	r2, [pc, #212]	@ (8000ca0 <HAL_TIM_MspPostInit+0xe8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00b      	beq.n	8000be8 <HAL_TIM_MspPostInit+0x30>

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd4:	d020      	beq.n	8000c18 <HAL_TIM_MspPostInit+0x60>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8000bd6:	4a33      	ldr	r2, [pc, #204]	@ (8000ca4 <HAL_TIM_MspPostInit+0xec>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d034      	beq.n	8000c46 <HAL_TIM_MspPostInit+0x8e>

    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8000bdc:	4a32      	ldr	r2, [pc, #200]	@ (8000ca8 <HAL_TIM_MspPostInit+0xf0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d047      	beq.n	8000c72 <HAL_TIM_MspPostInit+0xba>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000be2:	b00b      	add	sp, #44	@ 0x2c
 8000be4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <HAL_TIM_MspPostInit+0xf4>)
 8000bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bf0:	f042 0201 	orr.w	r2, r2, #1
 8000bf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	a905      	add	r1, sp, #20
 8000c10:	4827      	ldr	r0, [pc, #156]	@ (8000cb0 <HAL_TIM_MspPostInit+0xf8>)
 8000c12:	f000 f9b7 	bl	8000f84 <HAL_GPIO_Init>
 8000c16:	e7e4      	b.n	8000be2 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <HAL_TIM_MspPostInit+0xf4>)
 8000c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c20:	f042 0201 	orr.w	r2, r2, #1
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c30:	2320      	movs	r3, #32
 8000c32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	a905      	add	r1, sp, #20
 8000c3e:	481c      	ldr	r0, [pc, #112]	@ (8000cb0 <HAL_TIM_MspPostInit+0xf8>)
 8000c40:	f000 f9a0 	bl	8000f84 <HAL_GPIO_Init>
 8000c44:	e7cd      	b.n	8000be2 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	9303      	str	r3, [sp, #12]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_TIM_MspPostInit+0xf4>)
 8000c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	9303      	str	r3, [sp, #12]
 8000c5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5e:	2340      	movs	r3, #64	@ 0x40
 8000c60:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c66:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	a905      	add	r1, sp, #20
 8000c6a:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <HAL_TIM_MspPostInit+0xf8>)
 8000c6c:	f000 f98a 	bl	8000f84 <HAL_GPIO_Init>
 8000c70:	e7b7      	b.n	8000be2 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	9304      	str	r3, [sp, #16]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_TIM_MspPostInit+0xf4>)
 8000c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c7a:	f042 0202 	orr.w	r2, r2, #2
 8000c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	9304      	str	r3, [sp, #16]
 8000c88:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c92:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	a905      	add	r1, sp, #20
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <HAL_TIM_MspPostInit+0xfc>)
 8000c98:	f000 f974 	bl	8000f84 <HAL_GPIO_Init>
}
 8000c9c:	e7a1      	b.n	8000be2 <HAL_TIM_MspPostInit+0x2a>
 8000c9e:	bf00      	nop
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	40000800 	.word	0x40000800
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b500      	push	{lr}
 8000cba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	9304      	str	r3, [sp, #16]
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	9306      	str	r3, [sp, #24]
 8000cc6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000cc8:	6802      	ldr	r2, [r0, #0]
 8000cca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cce:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d002      	beq.n	8000cdc <HAL_UART_MspInit+0x24>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cd6:	b009      	add	sp, #36	@ 0x24
 8000cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cdc:	2100      	movs	r1, #0
 8000cde:	9101      	str	r1, [sp, #4]
 8000ce0:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ce6:	f042 0210 	orr.w	r2, r2, #16
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
 8000cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000cee:	f002 0210 	and.w	r2, r2, #16
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	9102      	str	r1, [sp, #8]
 8000cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	a903      	add	r1, sp, #12
 8000d1e:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <HAL_UART_MspInit+0x70>)
 8000d20:	f000 f930 	bl	8000f84 <HAL_GPIO_Init>
}
 8000d24:	e7d7      	b.n	8000cd6 <HAL_UART_MspInit+0x1e>
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler>

08000d2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler>

08000d30 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler>

08000d32 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler>

08000d34 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler>

08000d36 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f8b3 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bd08      	pop	{r3, pc}

08000d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	1e16      	subs	r6, r2, #0
 8000d48:	dd07      	ble.n	8000d5a <_read+0x16>
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	42a5      	cmp	r5, r4
 8000d58:	d1f9      	bne.n	8000d4e <_read+0xa>
  }

  return len;
}
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}

08000d5e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d68:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4770      	bx	lr

08000d72 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b508      	push	{r3, lr}
 8000d7a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <_sbrk+0x38>)
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	b152      	cbz	r2, 8000d98 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <_sbrk+0x38>)
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	4403      	add	r3, r0
 8000d88:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <_sbrk+0x3c>)
 8000d8a:	490b      	ldr	r1, [pc, #44]	@ (8000db8 <_sbrk+0x40>)
 8000d8c:	1a52      	subs	r2, r2, r1
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d806      	bhi.n	8000da0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d92:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <_sbrk+0x38>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000d96:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000d98:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x38>)
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <_sbrk+0x44>)
 8000d9c:	6011      	str	r1, [r2, #0]
 8000d9e:	e7f0      	b.n	8000d82 <_sbrk+0xa>
    errno = ENOMEM;
 8000da0:	f001 fc7e 	bl	80026a0 <__errno>
 8000da4:	230c      	movs	r3, #12
 8000da6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	e7f3      	b.n	8000d96 <_sbrk+0x1e>
 8000dae:	bf00      	nop
 8000db0:	200001ec 	.word	0x200001ec
 8000db4:	20010000 	.word	0x20010000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000340 	.word	0x20000340

08000dc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <SystemInit+0x10>)
 8000dc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000dc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd8:	f7ff fff2 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f001 fc53 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fc3b 	bl	8000680 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e18:	080031b0 	.word	0x080031b0
  ldr r2, =_sbss
 8000e1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e20:	20000340 	.word	0x20000340

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_InitTick+0x40>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e38:	4a0c      	ldr	r2, [pc, #48]	@ (8000e6c <HAL_InitTick+0x44>)
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e40:	f000 f88c 	bl	8000f5c <HAL_SYSTICK_Config>
 8000e44:	b968      	cbnz	r0, 8000e62 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	2c0f      	cmp	r4, #15
 8000e48:	d901      	bls.n	8000e4e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	e00a      	b.n	8000e64 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4621      	mov	r1, r4
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	f000 f84b 	bl	8000ef0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_InitTick+0x48>)
 8000e5c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
}
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_Init>:
{
 8000e74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_Init+0x30>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f81b 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff ffc6 	bl	8000e28 <HAL_InitTick>
  HAL_MspInit();
 8000e9c:	f7ff fe1e 	bl	8000adc <HAL_MspInit>
}
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	bd08      	pop	{r3, pc}
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ea8:	4a03      	ldr	r2, [pc, #12]	@ (8000eb8 <HAL_IncTick+0x10>)
 8000eaa:	6811      	ldr	r1, [r2, #0]
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_IncTick+0x14>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	440b      	add	r3, r1
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001f0 	.word	0x200001f0
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	@ (8000ec8 <HAL_GetTick+0x8>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200001f0 	.word	0x200001f0

08000ecc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ece:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	0203      	lsls	r3, r0, #8
 8000ed2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000eda:	0412      	lsls	r2, r2, #16
 8000edc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000ee8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_NVIC_SetPriority+0x64>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efa:	f1c3 0c07 	rsb	ip, r3, #7
 8000efe:	f1bc 0f04 	cmp.w	ip, #4
 8000f02:	bf28      	it	cs
 8000f04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f08:	f103 0e04 	add.w	lr, r3, #4
 8000f0c:	f1be 0f06 	cmp.w	lr, #6
 8000f10:	bf8c      	ite	hi
 8000f12:	3b03      	subhi	r3, #3
 8000f14:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f16:	f04f 3eff 	mov.w	lr, #4294967295
 8000f1a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000f1e:	ea21 010c 	bic.w	r1, r1, ip
 8000f22:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f28:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	db09      	blt.n	8000f46 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	0109      	lsls	r1, r1, #4
 8000f34:	b2c9      	uxtb	r1, r1
 8000f36:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f3a:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f3e:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f42:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	f000 000f 	and.w	r0, r0, #15
 8000f4a:	0109      	lsls	r1, r1, #4
 8000f4c:	b2c9      	uxtb	r1, r1
 8000f4e:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <HAL_NVIC_SetPriority+0x68>)
 8000f50:	5419      	strb	r1, [r3, r0]
 8000f52:	e7f6      	b.n	8000f42 <HAL_NVIC_SetPriority+0x52>
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f62:	d20b      	bcs.n	8000f7c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f68:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <HAL_SYSTICK_Config+0x24>)
 8000f6c:	21f0      	movs	r1, #240	@ 0xf0
 8000f6e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f72:	2000      	movs	r0, #0
 8000f74:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	2207      	movs	r2, #7
 8000f78:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f7c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f98:	4c6b      	ldr	r4, [pc, #428]	@ (8001148 <HAL_GPIO_Init+0x1c4>)
 8000f9a:	e04b      	b.n	8001034 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9e:	fa05 fa02 	lsl.w	sl, r5, r2
 8000fa2:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	68cf      	ldr	r7, [r1, #12]
 8000fa8:	4097      	lsls	r7, r2
 8000faa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000fae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fb0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	684f      	ldr	r7, [r1, #4]
 8000fb8:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8000fbc:	409f      	lsls	r7, r3
 8000fbe:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000fc2:	6047      	str	r7, [r0, #4]
 8000fc4:	e044      	b.n	8001050 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	f04f 0c00 	mov.w	ip, #0
 8000fca:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fce:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd2:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8000fd6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fdc:	684e      	ldr	r6, [r1, #4]
 8000fde:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	bf0c      	ite	eq
 8000fe4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000fe8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8000fec:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8000fee:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	684e      	ldr	r6, [r1, #4]
 8000ff2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	bf0c      	ite	eq
 8000ff8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8000ffc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001000:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001002:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001004:	684e      	ldr	r6, [r1, #4]
 8001006:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800100a:	bf0c      	ite	eq
 800100c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001010:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001014:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001016:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001018:	684e      	ldr	r6, [r1, #4]
 800101a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 800101e:	bf0c      	ite	eq
 8001020:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001024:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001028:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	3301      	adds	r3, #1
 800102c:	3202      	adds	r2, #2
 800102e:	2b10      	cmp	r3, #16
 8001030:	f000 8086 	beq.w	8001140 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8001034:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001038:	680f      	ldr	r7, [r1, #0]
 800103a:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 800103e:	ea3c 0707 	bics.w	r7, ip, r7
 8001042:	d1f2      	bne.n	800102a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001044:	684f      	ldr	r7, [r1, #4]
 8001046:	f007 0703 	and.w	r7, r7, #3
 800104a:	3f01      	subs	r7, #1
 800104c:	2f01      	cmp	r7, #1
 800104e:	d9a5      	bls.n	8000f9c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	684f      	ldr	r7, [r1, #4]
 8001052:	f007 0703 	and.w	r7, r7, #3
 8001056:	2f03      	cmp	r7, #3
 8001058:	d023      	beq.n	80010a2 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 800105a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105c:	fa05 fc02 	lsl.w	ip, r5, r2
 8001060:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	688f      	ldr	r7, [r1, #8]
 8001066:	4097      	lsls	r7, r2
 8001068:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 800106c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	684f      	ldr	r7, [r1, #4]
 8001070:	f007 0703 	and.w	r7, r7, #3
 8001074:	2f02      	cmp	r7, #2
 8001076:	d114      	bne.n	80010a2 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8001078:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800107c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001080:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001084:	f003 0b07 	and.w	fp, r3, #7
 8001088:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800108c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001090:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	690f      	ldr	r7, [r1, #16]
 8001096:	fa07 f70b 	lsl.w	r7, r7, fp
 800109a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 80010a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a4:	fa05 fc02 	lsl.w	ip, r5, r2
 80010a8:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	684f      	ldr	r7, [r1, #4]
 80010ae:	f007 0703 	and.w	r7, r7, #3
 80010b2:	4097      	lsls	r7, r2
 80010b4:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80010b8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ba:	684f      	ldr	r7, [r1, #4]
 80010bc:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 80010c0:	d0b3      	beq.n	800102a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2700      	movs	r7, #0
 80010c4:	9701      	str	r7, [sp, #4]
 80010c6:	4e21      	ldr	r6, [pc, #132]	@ (800114c <HAL_GPIO_Init+0x1c8>)
 80010c8:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80010ca:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 80010ce:	6477      	str	r7, [r6, #68]	@ 0x44
 80010d0:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80010d2:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 80010d6:	9701      	str	r7, [sp, #4]
 80010d8:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	f023 0703 	bic.w	r7, r3, #3
 80010de:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80010e2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80010e6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ea:	f003 0b03 	and.w	fp, r3, #3
 80010ee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010f2:	fa08 fc0b 	lsl.w	ip, r8, fp
 80010f6:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 80010fe:	42b0      	cmp	r0, r6
 8001100:	f43f af61 	beq.w	8000fc6 <HAL_GPIO_Init+0x42>
 8001104:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001108:	42b0      	cmp	r0, r6
 800110a:	d010      	beq.n	800112e <HAL_GPIO_Init+0x1aa>
 800110c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001110:	42b0      	cmp	r0, r6
 8001112:	d00f      	beq.n	8001134 <HAL_GPIO_Init+0x1b0>
 8001114:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8001150 <HAL_GPIO_Init+0x1cc>
 8001118:	4560      	cmp	r0, ip
 800111a:	d00e      	beq.n	800113a <HAL_GPIO_Init+0x1b6>
 800111c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8001120:	4560      	cmp	r0, ip
 8001122:	bf14      	ite	ne
 8001124:	f04f 0c07 	movne.w	ip, #7
 8001128:	f04f 0c04 	moveq.w	ip, #4
 800112c:	e74d      	b.n	8000fca <HAL_GPIO_Init+0x46>
 800112e:	f04f 0c01 	mov.w	ip, #1
 8001132:	e74a      	b.n	8000fca <HAL_GPIO_Init+0x46>
 8001134:	f04f 0c02 	mov.w	ip, #2
 8001138:	e747      	b.n	8000fca <HAL_GPIO_Init+0x46>
 800113a:	f04f 0c03 	mov.w	ip, #3
 800113e:	e744      	b.n	8000fca <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001140:	b003      	add	sp, #12
 8001142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001146:	bf00      	nop
 8001148:	40013c00 	.word	0x40013c00
 800114c:	40023800 	.word	0x40023800
 8001150:	40020c00 	.word	0x40020c00

08001154 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	b10a      	cbz	r2, 800115a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	6181      	str	r1, [r0, #24]
 8001158:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	0409      	lsls	r1, r1, #16
 800115c:	6181      	str	r1, [r0, #24]
  }
}
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	2800      	cmp	r0, #0
 8001162:	f000 81e1 	beq.w	8001528 <HAL_RCC_OscConfig+0x3c8>
{
 8001166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	6803      	ldr	r3, [r0, #0]
 8001170:	f013 0f01 	tst.w	r3, #1
 8001174:	d03b      	beq.n	80011ee <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001176:	4b9f      	ldr	r3, [pc, #636]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d02c      	beq.n	80011dc <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b9c      	ldr	r3, [pc, #624]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800118a:	2b08      	cmp	r3, #8
 800118c:	d021      	beq.n	80011d2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001194:	d04f      	beq.n	8001236 <HAL_RCC_OscConfig+0xd6>
 8001196:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800119a:	d052      	beq.n	8001242 <HAL_RCC_OscConfig+0xe2>
 800119c:	4b95      	ldr	r3, [pc, #596]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80011ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d050      	beq.n	8001256 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fe84 	bl	8000ec0 <HAL_GetTick>
 80011b8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4e8e      	ldr	r6, [pc, #568]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80011bc:	6833      	ldr	r3, [r6, #0]
 80011be:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011c2:	d114      	bne.n	80011ee <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fe7c 	bl	8000ec0 <HAL_GetTick>
 80011c8:	1b40      	subs	r0, r0, r5
 80011ca:	2864      	cmp	r0, #100	@ 0x64
 80011cc:	d9f6      	bls.n	80011bc <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80011ce:	2003      	movs	r0, #3
 80011d0:	e1b1      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80011da:	d0d8      	beq.n	800118e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b85      	ldr	r3, [pc, #532]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_OscConfig+0x8e>
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 819f 	beq.w	800152c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	f013 0f02 	tst.w	r3, #2
 80011f4:	d054      	beq.n	80012a0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011f6:	4b7f      	ldr	r3, [pc, #508]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f013 0f0c 	tst.w	r3, #12
 80011fe:	d03e      	beq.n	800127e <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001200:	4b7c      	ldr	r3, [pc, #496]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001208:	2b08      	cmp	r3, #8
 800120a:	d033      	beq.n	8001274 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800120c:	68e3      	ldr	r3, [r4, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d068      	beq.n	80012e4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001212:	4b79      	ldr	r3, [pc, #484]	@ (80013f8 <HAL_RCC_OscConfig+0x298>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fe52 	bl	8000ec0 <HAL_GetTick>
 800121c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4e75      	ldr	r6, [pc, #468]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001220:	6833      	ldr	r3, [r6, #0]
 8001222:	f013 0f02 	tst.w	r3, #2
 8001226:	d154      	bne.n	80012d2 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fe4a 	bl	8000ec0 <HAL_GetTick>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	2802      	cmp	r0, #2
 8001230:	d9f6      	bls.n	8001220 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8001232:	2003      	movs	r0, #3
 8001234:	e17f      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	4a6f      	ldr	r2, [pc, #444]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e7b5      	b.n	80011ae <HAL_RCC_OscConfig+0x4e>
 8001242:	4b6c      	ldr	r3, [pc, #432]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e7ab      	b.n	80011ae <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001256:	f7ff fe33 	bl	8000ec0 <HAL_GetTick>
 800125a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125c:	4e65      	ldr	r6, [pc, #404]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 800125e:	6833      	ldr	r3, [r6, #0]
 8001260:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001264:	d0c3      	beq.n	80011ee <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001266:	f7ff fe2b 	bl	8000ec0 <HAL_GetTick>
 800126a:	1b40      	subs	r0, r0, r5
 800126c:	2864      	cmp	r0, #100	@ 0x64
 800126e:	d9f6      	bls.n	800125e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8001270:	2003      	movs	r0, #3
 8001272:	e160      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001274:	4b5f      	ldr	r3, [pc, #380]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800127c:	d1c6      	bne.n	800120c <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f013 0f02 	tst.w	r3, #2
 8001286:	d003      	beq.n	8001290 <HAL_RCC_OscConfig+0x130>
 8001288:	68e3      	ldr	r3, [r4, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 8150 	bne.w	8001530 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	6921      	ldr	r1, [r4, #16]
 8001296:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800129a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800129e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f08 	tst.w	r3, #8
 80012a6:	d042      	beq.n	800132e <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012a8:	6963      	ldr	r3, [r4, #20]
 80012aa:	b36b      	cbz	r3, 8001308 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ac:	4b52      	ldr	r3, [pc, #328]	@ (80013f8 <HAL_RCC_OscConfig+0x298>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fe04 	bl	8000ec0 <HAL_GetTick>
 80012b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4e4e      	ldr	r6, [pc, #312]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80012bc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d134      	bne.n	800132e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fdfc 	bl	8000ec0 <HAL_GetTick>
 80012c8:	1b40      	subs	r0, r0, r5
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d9f6      	bls.n	80012bc <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80012ce:	2003      	movs	r0, #3
 80012d0:	e131      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4a48      	ldr	r2, [pc, #288]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	6921      	ldr	r1, [r4, #16]
 80012d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e7dd      	b.n	80012a0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80012e4:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <HAL_RCC_OscConfig+0x298>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ea:	f7ff fde9 	bl	8000ec0 <HAL_GetTick>
 80012ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f0:	4e40      	ldr	r6, [pc, #256]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80012f2:	6833      	ldr	r3, [r6, #0]
 80012f4:	f013 0f02 	tst.w	r3, #2
 80012f8:	d0d2      	beq.n	80012a0 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fde1 	bl	8000ec0 <HAL_GetTick>
 80012fe:	1b40      	subs	r0, r0, r5
 8001300:	2802      	cmp	r0, #2
 8001302:	d9f6      	bls.n	80012f2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001304:	2003      	movs	r0, #3
 8001306:	e116      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <HAL_RCC_OscConfig+0x298>)
 800130a:	2200      	movs	r2, #0
 800130c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff fdd6 	bl	8000ec0 <HAL_GetTick>
 8001314:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001316:	4e37      	ldr	r6, [pc, #220]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001318:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800131a:	f013 0f02 	tst.w	r3, #2
 800131e:	d006      	beq.n	800132e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fdce 	bl	8000ec0 <HAL_GetTick>
 8001324:	1b40      	subs	r0, r0, r5
 8001326:	2802      	cmp	r0, #2
 8001328:	d9f6      	bls.n	8001318 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800132a:	2003      	movs	r0, #3
 800132c:	e103      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	f013 0f04 	tst.w	r3, #4
 8001334:	d076      	beq.n	8001424 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800133e:	d133      	bne.n	80013a8 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001348:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001358:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_RCC_OscConfig+0x29c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001362:	d023      	beq.n	80013ac <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	68a3      	ldr	r3, [r4, #8]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d034      	beq.n	80013d4 <HAL_RCC_OscConfig+0x274>
 800136a:	2b05      	cmp	r3, #5
 800136c:	d038      	beq.n	80013e0 <HAL_RCC_OscConfig+0x280>
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 8001370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	671a      	str	r2, [r3, #112]	@ 0x70
 8001378:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001380:	68a3      	ldr	r3, [r4, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03c      	beq.n	8001400 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fd9b 	bl	8000ec0 <HAL_GetTick>
 800138a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4f19      	ldr	r7, [pc, #100]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001394:	f013 0f02 	tst.w	r3, #2
 8001398:	d143      	bne.n	8001422 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fd91 	bl	8000ec0 <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	4540      	cmp	r0, r8
 80013a2:	d9f6      	bls.n	8001392 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80013a4:	2003      	movs	r0, #3
 80013a6:	e0c6      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80013a8:	2500      	movs	r5, #0
 80013aa:	e7d6      	b.n	800135a <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <HAL_RCC_OscConfig+0x29c>)
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013b6:	f7ff fd83 	bl	8000ec0 <HAL_GetTick>
 80013ba:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4f0f      	ldr	r7, [pc, #60]	@ (80013fc <HAL_RCC_OscConfig+0x29c>)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80013c4:	d1ce      	bne.n	8001364 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fd7b 	bl	8000ec0 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9f6      	bls.n	80013be <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80013d0:	2003      	movs	r0, #3
 80013d2:	e0b0      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80013d6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013de:	e7cf      	b.n	8001380 <HAL_RCC_OscConfig+0x220>
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <HAL_RCC_OscConfig+0x294>)
 80013e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013e4:	f042 0204 	orr.w	r2, r2, #4
 80013e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80013ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013ec:	f042 0201 	orr.w	r2, r2, #1
 80013f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80013f2:	e7c5      	b.n	8001380 <HAL_RCC_OscConfig+0x220>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fd5e 	bl	8000ec0 <HAL_GetTick>
 8001404:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	4f52      	ldr	r7, [pc, #328]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800140e:	f013 0f02 	tst.w	r3, #2
 8001412:	d006      	beq.n	8001422 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001414:	f7ff fd54 	bl	8000ec0 <HAL_GetTick>
 8001418:	1b80      	subs	r0, r0, r6
 800141a:	4540      	cmp	r0, r8
 800141c:	d9f6      	bls.n	800140c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800141e:	2003      	movs	r0, #3
 8001420:	e089      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001422:	b9ed      	cbnz	r5, 8001460 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001424:	69a3      	ldr	r3, [r4, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8084 	beq.w	8001534 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142c:	4a48      	ldr	r2, [pc, #288]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 800142e:	6892      	ldr	r2, [r2, #8]
 8001430:	f002 020c 	and.w	r2, r2, #12
 8001434:	2a08      	cmp	r2, #8
 8001436:	d051      	beq.n	80014dc <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001438:	2b02      	cmp	r3, #2
 800143a:	d017      	beq.n	800146c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <HAL_RCC_OscConfig+0x3f4>)
 800143e:	2200      	movs	r2, #0
 8001440:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fd3d 	bl	8000ec0 <HAL_GetTick>
 8001446:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001448:	4d41      	ldr	r5, [pc, #260]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001450:	d042      	beq.n	80014d8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fd35 	bl	8000ec0 <HAL_GetTick>
 8001456:	1b00      	subs	r0, r0, r4
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f6      	bls.n	800144a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800145c:	2003      	movs	r0, #3
 800145e:	e06a      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001460:	4a3b      	ldr	r2, [pc, #236]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 8001462:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	e7db      	b.n	8001424 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <HAL_RCC_OscConfig+0x3f4>)
 800146e:	2200      	movs	r2, #0
 8001470:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001472:	f7ff fd25 	bl	8000ec0 <HAL_GetTick>
 8001476:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001478:	4e35      	ldr	r6, [pc, #212]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 800147a:	6833      	ldr	r3, [r6, #0]
 800147c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001480:	d006      	beq.n	8001490 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fd1d 	bl	8000ec0 <HAL_GetTick>
 8001486:	1b40      	subs	r0, r0, r5
 8001488:	2802      	cmp	r0, #2
 800148a:	d9f6      	bls.n	800147a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e052      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001490:	69e3      	ldr	r3, [r4, #28]
 8001492:	6a22      	ldr	r2, [r4, #32]
 8001494:	4313      	orrs	r3, r2
 8001496:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001498:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800149c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800149e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014a4:	0852      	lsrs	r2, r2, #1
 80014a6:	3a01      	subs	r2, #1
 80014a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014ac:	4a28      	ldr	r2, [pc, #160]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 80014ae:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_RCC_OscConfig+0x3f4>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014b6:	f7ff fd03 	bl	8000ec0 <HAL_GetTick>
 80014ba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	4d24      	ldr	r5, [pc, #144]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fcfb 	bl	8000ec0 <HAL_GetTick>
 80014ca:	1b00      	subs	r0, r0, r4
 80014cc:	2802      	cmp	r0, #2
 80014ce:	d9f6      	bls.n	80014be <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80014d0:	2003      	movs	r0, #3
 80014d2:	e030      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
 80014d6:	e02e      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 80014d8:	2000      	movs	r0, #0
 80014da:	e02c      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d02d      	beq.n	800153c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <HAL_RCC_OscConfig+0x3f0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e8:	69e2      	ldr	r2, [r4, #28]
 80014ea:	4291      	cmp	r1, r2
 80014ec:	d128      	bne.n	8001540 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	6a21      	ldr	r1, [r4, #32]
 80014f4:	428a      	cmp	r2, r1
 80014f6:	d125      	bne.n	8001544 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014fa:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80014fe:	401a      	ands	r2, r3
 8001500:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001504:	d120      	bne.n	8001548 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001506:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800150a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800150c:	0852      	lsrs	r2, r2, #1
 800150e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001510:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001516:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001518:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800151c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001520:	bf14      	ite	ne
 8001522:	2001      	movne	r0, #1
 8001524:	2000      	moveq	r0, #0
 8001526:	e006      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8001528:	2001      	movs	r0, #1
}
 800152a:	4770      	bx	lr
        return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
 800152e:	e002      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8001534:	2000      	movs	r0, #0
}
 8001536:	b002      	add	sp, #8
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800153c:	2001      	movs	r0, #1
 800153e:	e7fa      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	e7f8      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 8001544:	2001      	movs	r0, #1
 8001546:	e7f6      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 8001548:	2001      	movs	r0, #1
 800154a:	e7f4      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 800154c:	2001      	movs	r0, #1
 800154e:	e7f2      	b.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000

08001558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d041      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x92>
 8001566:	2b08      	cmp	r3, #8
 8001568:	d141      	bne.n	80015ee <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001578:	d012      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001582:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001584:	2300      	movs	r3, #0
 8001586:	fba1 0100 	umull	r0, r1, r1, r0
 800158a:	f7fe fe79 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800159a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800159e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a2:	6858      	ldr	r0, [r3, #4]
 80015a4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80015a8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80015ac:	ebbc 0c00 	subs.w	ip, ip, r0
 80015b0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80015b4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80015b8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80015bc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80015c0:	ebb1 010c 	subs.w	r1, r1, ip
 80015c4:	eb63 030e 	sbc.w	r3, r3, lr
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ce:	00c9      	lsls	r1, r1, #3
 80015d0:	eb11 0c00 	adds.w	ip, r1, r0
 80015d4:	f143 0300 	adc.w	r3, r3, #0
 80015d8:	0299      	lsls	r1, r3, #10
 80015da:	2300      	movs	r3, #0
 80015dc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80015e0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80015e4:	f7fe fe4c 	bl	8000280 <__aeabi_uldivmod>
 80015e8:	e7d1      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ea:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ec:	e7d7      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80015ee:	4803      	ldr	r0, [pc, #12]	@ (80015fc <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 80015f0:	e7d5      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x46>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	017d7840 	.word	0x017d7840
 80015fc:	00f42400 	.word	0x00f42400

08001600 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001600:	2800      	cmp	r0, #0
 8001602:	f000 809d 	beq.w	8001740 <HAL_RCC_ClockConfig+0x140>
{
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	460d      	mov	r5, r1
 800160c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800160e:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x150>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	428b      	cmp	r3, r1
 8001618:	d208      	bcs.n	800162c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	b2cb      	uxtb	r3, r1
 800161c:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <HAL_RCC_ClockConfig+0x150>)
 800161e:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	428b      	cmp	r3, r1
 8001628:	f040 808c 	bne.w	8001744 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	f013 0f02 	tst.w	r3, #2
 8001632:	d017      	beq.n	8001664 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	f013 0f04 	tst.w	r3, #4
 8001638:	d004      	beq.n	8001644 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800163a:	4a46      	ldr	r2, [pc, #280]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 800163c:	6893      	ldr	r3, [r2, #8]
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	f013 0f08 	tst.w	r3, #8
 800164a:	d004      	beq.n	8001656 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4a41      	ldr	r2, [pc, #260]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 800164e:	6893      	ldr	r3, [r2, #8]
 8001650:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001654:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001656:	4a3f      	ldr	r2, [pc, #252]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 8001658:	6893      	ldr	r3, [r2, #8]
 800165a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800165e:	68a1      	ldr	r1, [r4, #8]
 8001660:	430b      	orrs	r3, r1
 8001662:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f013 0f01 	tst.w	r3, #1
 800166a:	d032      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166c:	6862      	ldr	r2, [r4, #4]
 800166e:	2a01      	cmp	r2, #1
 8001670:	d021      	beq.n	80016b6 <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	1e93      	subs	r3, r2, #2
 8001674:	2b01      	cmp	r3, #1
 8001676:	d925      	bls.n	80016c4 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f013 0f02 	tst.w	r3, #2
 8001680:	d062      	beq.n	8001748 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4934      	ldr	r1, [pc, #208]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 8001684:	688b      	ldr	r3, [r1, #8]
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800168e:	f7ff fc17 	bl	8000ec0 <HAL_GetTick>
 8001692:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001694:	4f2f      	ldr	r7, [pc, #188]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	6862      	ldr	r2, [r4, #4]
 80016a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016a6:	d014      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fc0a 	bl	8000ec0 <HAL_GetTick>
 80016ac:	1b80      	subs	r0, r0, r6
 80016ae:	4540      	cmp	r0, r8
 80016b0:	d9f3      	bls.n	800169a <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80016b2:	2003      	movs	r0, #3
 80016b4:	e042      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80016be:	d1e0      	bne.n	8001682 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e03b      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c4:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016cc:	d1d9      	bne.n	8001682 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
 80016d0:	e034      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_RCC_ClockConfig+0x150>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	42ab      	cmp	r3, r5
 80016dc:	d907      	bls.n	80016ee <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	b2ea      	uxtb	r2, r5
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_RCC_ClockConfig+0x150>)
 80016e2:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	d12e      	bne.n	800174c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	f013 0f04 	tst.w	r3, #4
 80016f4:	d006      	beq.n	8001704 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 80016f8:	6893      	ldr	r3, [r2, #8]
 80016fa:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80016fe:	68e1      	ldr	r1, [r4, #12]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	f013 0f08 	tst.w	r3, #8
 800170a:	d007      	beq.n	800171c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 800170e:	6893      	ldr	r3, [r2, #8]
 8001710:	6921      	ldr	r1, [r4, #16]
 8001712:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001716:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800171a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171c:	f7ff ff1c 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_RCC_ClockConfig+0x154>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_RCC_ClockConfig+0x158>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	40d8      	lsrs	r0, r3
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_ClockConfig+0x15c>)
 8001730:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_ClockConfig+0x160>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f7ff fb77 	bl	8000e28 <HAL_InitTick>
  return HAL_OK;
 800173a:	2000      	movs	r0, #0
}
 800173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
}
 8001742:	4770      	bx	lr
      return HAL_ERROR;
 8001744:	2001      	movs	r0, #1
 8001746:	e7f9      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8001748:	2001      	movs	r0, #1
 800174a:	e7f7      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	e7f5      	b.n	800173c <HAL_RCC_ClockConfig+0x13c>
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	0800315c 	.word	0x0800315c
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800176c:	4a03      	ldr	r2, [pc, #12]	@ (800177c <HAL_RCC_GetPCLK1Freq+0x18>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	4a03      	ldr	r2, [pc, #12]	@ (8001780 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001772:	6810      	ldr	r0, [r2, #0]
}
 8001774:	40d8      	lsrs	r0, r3
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800
 800177c:	08003154 	.word	0x08003154
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_RCC_GetPCLK2Freq+0x18>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001792:	6810      	ldr	r0, [r2, #0]
}
 8001794:	40d8      	lsrs	r0, r3
 8001796:	4770      	bx	lr
 8001798:	40023800 	.word	0x40023800
 800179c:	08003154 	.word	0x08003154
 80017a0:	20000000 	.word	0x20000000

080017a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80017a4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017a6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017a8:	6a02      	ldr	r2, [r0, #32]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017b4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017b8:	680d      	ldr	r5, [r1, #0]
 80017ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80017bc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017c0:	688d      	ldr	r5, [r1, #8]
 80017c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80017c4:	4d0b      	ldr	r5, [pc, #44]	@ (80017f4 <TIM_OC1_SetConfig+0x50>)
 80017c6:	42a8      	cmp	r0, r5
 80017c8:	d006      	beq.n	80017d8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80017ce:	684a      	ldr	r2, [r1, #4]
 80017d0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017d2:	6203      	str	r3, [r0, #32]
}
 80017d4:	bc70      	pop	{r4, r5, r6}
 80017d6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80017d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80017dc:	68cd      	ldr	r5, [r1, #12]
 80017de:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80017e0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80017e4:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80017e8:	694d      	ldr	r5, [r1, #20]
 80017ea:	698e      	ldr	r6, [r1, #24]
 80017ec:	4335      	orrs	r5, r6
 80017ee:	432c      	orrs	r4, r5
 80017f0:	e7eb      	b.n	80017ca <TIM_OC1_SetConfig+0x26>
 80017f2:	bf00      	nop
 80017f4:	40010000 	.word	0x40010000

080017f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80017f8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017fc:	6a02      	ldr	r2, [r0, #32]
 80017fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001802:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001804:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001806:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001808:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800180c:	680d      	ldr	r5, [r1, #0]
 800180e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001814:	688d      	ldr	r5, [r1, #8]
 8001816:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800181a:	4d0c      	ldr	r5, [pc, #48]	@ (800184c <TIM_OC3_SetConfig+0x54>)
 800181c:	42a8      	cmp	r0, r5
 800181e:	d006      	beq.n	800182e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001820:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001822:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001824:	684a      	ldr	r2, [r1, #4]
 8001826:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001828:	6203      	str	r3, [r0, #32]
}
 800182a:	bc70      	pop	{r4, r5, r6}
 800182c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800182e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001832:	68cd      	ldr	r5, [r1, #12]
 8001834:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001838:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800183c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001840:	694d      	ldr	r5, [r1, #20]
 8001842:	698e      	ldr	r6, [r1, #24]
 8001844:	4335      	orrs	r5, r6
 8001846:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800184a:	e7e9      	b.n	8001820 <TIM_OC3_SetConfig+0x28>
 800184c:	40010000 	.word	0x40010000

08001850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001850:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001852:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001854:	6a02      	ldr	r2, [r0, #32]
 8001856:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800185a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800185c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800185e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001860:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001864:	680d      	ldr	r5, [r1, #0]
 8001866:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800186a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800186e:	688d      	ldr	r5, [r1, #8]
 8001870:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001874:	4d07      	ldr	r5, [pc, #28]	@ (8001894 <TIM_OC4_SetConfig+0x44>)
 8001876:	42a8      	cmp	r0, r5
 8001878:	d006      	beq.n	8001888 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800187a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800187c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800187e:	684a      	ldr	r2, [r1, #4]
 8001880:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001882:	6203      	str	r3, [r0, #32]
}
 8001884:	bc30      	pop	{r4, r5}
 8001886:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001888:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800188c:	694d      	ldr	r5, [r1, #20]
 800188e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001892:	e7f2      	b.n	800187a <TIM_OC4_SetConfig+0x2a>
 8001894:	40010000 	.word	0x40010000

08001898 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001898:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800189a:	4a3f      	ldr	r2, [pc, #252]	@ (8001998 <TIM_Base_SetConfig+0x100>)
 800189c:	4290      	cmp	r0, r2
 800189e:	d04e      	beq.n	800193e <TIM_Base_SetConfig+0xa6>
 80018a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018a4:	d05f      	beq.n	8001966 <TIM_Base_SetConfig+0xce>
 80018a6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d03d      	beq.n	800192a <TIM_Base_SetConfig+0x92>
 80018ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018b2:	4290      	cmp	r0, r2
 80018b4:	d03e      	beq.n	8001934 <TIM_Base_SetConfig+0x9c>
 80018b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018ba:	4290      	cmp	r0, r2
 80018bc:	d013      	beq.n	80018e6 <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018be:	4a37      	ldr	r2, [pc, #220]	@ (800199c <TIM_Base_SetConfig+0x104>)
 80018c0:	4290      	cmp	r0, r2
 80018c2:	d054      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
 80018c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018c8:	4290      	cmp	r0, r2
 80018ca:	d050      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
 80018cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018d0:	4290      	cmp	r0, r2
 80018d2:	d04c      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018d8:	694a      	ldr	r2, [r1, #20]
 80018da:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018dc:	688a      	ldr	r2, [r1, #8]
 80018de:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018e0:	680a      	ldr	r2, [r1, #0]
 80018e2:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018e4:	e04f      	b.n	8001986 <TIM_Base_SetConfig+0xee>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80018ea:	684a      	ldr	r2, [r1, #4]
 80018ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001998 <TIM_Base_SetConfig+0x100>)
 80018f0:	4290      	cmp	r0, r2
 80018f2:	d028      	beq.n	8001946 <TIM_Base_SetConfig+0xae>
 80018f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018f8:	d039      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
 80018fa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80018fe:	4290      	cmp	r0, r2
 8001900:	d035      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
 8001902:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001906:	4290      	cmp	r0, r2
 8001908:	d031      	beq.n	800196e <TIM_Base_SetConfig+0xd6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800190a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800190e:	68ca      	ldr	r2, [r1, #12]
 8001910:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001916:	694a      	ldr	r2, [r1, #20]
 8001918:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800191a:	688a      	ldr	r2, [r1, #8]
 800191c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800191e:	680a      	ldr	r2, [r1, #0]
 8001920:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001922:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <TIM_Base_SetConfig+0x100>)
 8001924:	4290      	cmp	r0, r2
 8001926:	d12e      	bne.n	8001986 <TIM_Base_SetConfig+0xee>
 8001928:	e019      	b.n	800195e <TIM_Base_SetConfig+0xc6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800192a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800192e:	684a      	ldr	r2, [r1, #4]
 8001930:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001932:	e01c      	b.n	800196e <TIM_Base_SetConfig+0xd6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001938:	684a      	ldr	r2, [r1, #4]
 800193a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193c:	e017      	b.n	800196e <TIM_Base_SetConfig+0xd6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800193e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001942:	684a      	ldr	r2, [r1, #4]
 8001944:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800194a:	68ca      	ldr	r2, [r1, #12]
 800194c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800194e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001952:	694a      	ldr	r2, [r1, #20]
 8001954:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001956:	688a      	ldr	r2, [r1, #8]
 8001958:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800195a:	680a      	ldr	r2, [r1, #0]
 800195c:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800195e:	6909      	ldr	r1, [r1, #16]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <TIM_Base_SetConfig+0x100>)
 8001962:	6311      	str	r1, [r2, #48]	@ 0x30
 8001964:	e00f      	b.n	8001986 <TIM_Base_SetConfig+0xee>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800196a:	684a      	ldr	r2, [r1, #4]
 800196c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800196e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001972:	68ca      	ldr	r2, [r1, #12]
 8001974:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800197a:	694a      	ldr	r2, [r1, #20]
 800197c:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197e:	688a      	ldr	r2, [r1, #8]
 8001980:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001982:	680a      	ldr	r2, [r1, #0]
 8001984:	6282      	str	r2, [r0, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001986:	6802      	ldr	r2, [r0, #0]
 8001988:	f042 0204 	orr.w	r2, r2, #4
 800198c:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800198e:	2201      	movs	r2, #1
 8001990:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8001992:	6003      	str	r3, [r0, #0]
}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000
 800199c:	40014000 	.word	0x40014000

080019a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80019a0:	b340      	cbz	r0, 80019f4 <HAL_TIM_Base_Init+0x54>
{
 80019a2:	b510      	push	{r4, lr}
 80019a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80019a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80019aa:	b1f3      	cbz	r3, 80019ea <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b2:	4621      	mov	r1, r4
 80019b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80019b8:	f7ff ff6e 	bl	8001898 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019bc:	2301      	movs	r3, #1
 80019be:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80019c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80019ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80019ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019da:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80019e6:	2000      	movs	r0, #0
}
 80019e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019ea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019ee:	f7ff f891 	bl	8000b14 <HAL_TIM_Base_MspInit>
 80019f2:	e7db      	b.n	80019ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
}
 80019f6:	4770      	bx	lr

080019f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80019f8:	b340      	cbz	r0, 8001a4c <HAL_TIM_PWM_Init+0x54>
{
 80019fa:	b510      	push	{r4, lr}
 80019fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001a02:	b1f3      	cbz	r3, 8001a42 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a04:	2302      	movs	r3, #2
 8001a06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001a10:	f7ff ff42 	bl	8001898 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001a1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001a22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001a26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001a36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001a3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
}
 8001a40:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a42:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a46:	f7ff f89f 	bl	8000b88 <HAL_TIM_PWM_MspInit>
 8001a4a:	e7db      	b.n	8001a04 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	4770      	bx	lr

08001a50 <TIM_OC2_SetConfig>:
{
 8001a50:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8001a52:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a54:	6a02      	ldr	r2, [r0, #32]
 8001a56:	f022 0210 	bic.w	r2, r2, #16
 8001a5a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001a5c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a5e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a60:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a64:	680d      	ldr	r5, [r1, #0]
 8001a66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001a6a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a6e:	688d      	ldr	r5, [r1, #8]
 8001a70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a74:	4d0c      	ldr	r5, [pc, #48]	@ (8001aa8 <TIM_OC2_SetConfig+0x58>)
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	d006      	beq.n	8001a88 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8001a7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a7c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a7e:	684a      	ldr	r2, [r1, #4]
 8001a80:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001a82:	6203      	str	r3, [r0, #32]
}
 8001a84:	bc70      	pop	{r4, r5, r6}
 8001a86:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a8c:	68cd      	ldr	r5, [r1, #12]
 8001a8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a96:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a9a:	694d      	ldr	r5, [r1, #20]
 8001a9c:	698e      	ldr	r6, [r1, #24]
 8001a9e:	4335      	orrs	r5, r6
 8001aa0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001aa4:	e7e9      	b.n	8001a7a <TIM_OC2_SetConfig+0x2a>
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_TIM_PWM_ConfigChannel>:
{
 8001aac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001aae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d066      	beq.n	8001b84 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	460d      	mov	r5, r1
 8001aba:	2301      	movs	r3, #1
 8001abc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001ac0:	2a0c      	cmp	r2, #12
 8001ac2:	d85a      	bhi.n	8001b7a <HAL_TIM_PWM_ConfigChannel+0xce>
 8001ac4:	e8df f002 	tbb	[pc, r2]
 8001ac8:	59595907 	.word	0x59595907
 8001acc:	5959591b 	.word	0x5959591b
 8001ad0:	59595930 	.word	0x59595930
 8001ad4:	44          	.byte	0x44
 8001ad5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ad6:	6800      	ldr	r0, [r0, #0]
 8001ad8:	f7ff fe64 	bl	80017a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	6993      	ldr	r3, [r2, #24]
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	6993      	ldr	r3, [r2, #24]
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	6993      	ldr	r3, [r2, #24]
 8001af4:	6929      	ldr	r1, [r5, #16]
 8001af6:	430b      	orrs	r3, r1
 8001af8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2000      	movs	r0, #0
      break;
 8001afc:	e03e      	b.n	8001b7c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001afe:	6800      	ldr	r0, [r0, #0]
 8001b00:	f7ff ffa6 	bl	8001a50 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	6993      	ldr	r3, [r2, #24]
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	6993      	ldr	r3, [r2, #24]
 8001b12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b16:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b18:	6822      	ldr	r2, [r4, #0]
 8001b1a:	6993      	ldr	r3, [r2, #24]
 8001b1c:	6929      	ldr	r1, [r5, #16]
 8001b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b22:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2000      	movs	r0, #0
      break;
 8001b26:	e029      	b.n	8001b7c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b28:	6800      	ldr	r0, [r0, #0]
 8001b2a:	f7ff fe65 	bl	80017f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	69d3      	ldr	r3, [r2, #28]
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	69d3      	ldr	r3, [r2, #28]
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	69d3      	ldr	r3, [r2, #28]
 8001b46:	6929      	ldr	r1, [r5, #16]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	2000      	movs	r0, #0
      break;
 8001b4e:	e015      	b.n	8001b7c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b50:	6800      	ldr	r0, [r0, #0]
 8001b52:	f7ff fe7d 	bl	8001850 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	69d3      	ldr	r3, [r2, #28]
 8001b5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	69d3      	ldr	r3, [r2, #28]
 8001b64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b68:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	69d3      	ldr	r3, [r2, #28]
 8001b6e:	6929      	ldr	r1, [r5, #16]
 8001b70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b74:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b76:	2000      	movs	r0, #0
      break;
 8001b78:	e000      	b.n	8001b7c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001b7a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001b84:	2002      	movs	r0, #2
 8001b86:	e7fc      	b.n	8001b82 <HAL_TIM_PWM_ConfigChannel+0xd6>

08001b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b88:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b8a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b8c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b90:	430a      	orrs	r2, r1
 8001b92:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b96:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b9a:	6082      	str	r2, [r0, #8]
}
 8001b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_ConfigClockSource>:
{
 8001ba2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ba4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f000 80ad 	beq.w	8001d08 <HAL_TIM_ConfigClockSource+0x166>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001bbc:	6802      	ldr	r2, [r0, #0]
 8001bbe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bc4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001bc8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001bca:	680b      	ldr	r3, [r1, #0]
 8001bcc:	2b60      	cmp	r3, #96	@ 0x60
 8001bce:	d060      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0xf0>
 8001bd0:	d837      	bhi.n	8001c42 <HAL_TIM_ConfigClockSource+0xa0>
 8001bd2:	2b40      	cmp	r3, #64	@ 0x40
 8001bd4:	d079      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x128>
 8001bd6:	d815      	bhi.n	8001c04 <HAL_TIM_ConfigClockSource+0x62>
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d007      	beq.n	8001bec <HAL_TIM_ConfigClockSource+0x4a>
 8001bdc:	d804      	bhi.n	8001be8 <HAL_TIM_ConfigClockSource+0x46>
 8001bde:	f033 0210 	bics.w	r2, r3, #16
 8001be2:	d003      	beq.n	8001bec <HAL_TIM_ConfigClockSource+0x4a>
 8001be4:	2001      	movs	r0, #1
 8001be6:	e040      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
 8001be8:	2b30      	cmp	r3, #48	@ 0x30
 8001bea:	d109      	bne.n	8001c00 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bec:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001bee:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bf0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001bfa:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2000      	movs	r0, #0
}
 8001bfe:	e034      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8001c00:	2001      	movs	r0, #1
 8001c02:	e032      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
 8001c04:	2b50      	cmp	r3, #80	@ 0x50
 8001c06:	d11a      	bne.n	8001c3e <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c08:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c0a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001c0c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c0e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c18:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c1a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c1e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c22:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001c26:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c2a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c2c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001c2e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c34:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8001c38:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2000      	movs	r0, #0
}
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8001c3e:	2001      	movs	r0, #1
 8001c40:	e013      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c46:	d05b      	beq.n	8001d00 <HAL_TIM_ConfigClockSource+0x15e>
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c4c:	d014      	beq.n	8001c78 <HAL_TIM_ConfigClockSource+0xd6>
 8001c4e:	2b70      	cmp	r3, #112	@ 0x70
 8001c50:	d158      	bne.n	8001d04 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8001c52:	68cb      	ldr	r3, [r1, #12]
 8001c54:	684a      	ldr	r2, [r1, #4]
 8001c56:	6889      	ldr	r1, [r1, #8]
 8001c58:	6800      	ldr	r0, [r0, #0]
 8001c5a:	f7ff ff95 	bl	8001b88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001c66:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001c70:	2300      	movs	r3, #0
 8001c72:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001c78:	68cb      	ldr	r3, [r1, #12]
 8001c7a:	684a      	ldr	r2, [r1, #4]
 8001c7c:	6889      	ldr	r1, [r1, #8]
 8001c7e:	6800      	ldr	r0, [r0, #0]
 8001c80:	f7ff ff82 	bl	8001b88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	6893      	ldr	r3, [r2, #8]
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2000      	movs	r0, #0
      break;
 8001c90:	e7eb      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c92:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c94:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001c96:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c98:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c9a:	6a19      	ldr	r1, [r3, #32]
 8001c9c:	f021 0110 	bic.w	r1, r1, #16
 8001ca0:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca2:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ca8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb0:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001cb4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb6:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cb8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001cba:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc0:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8001cc4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc6:	2000      	movs	r0, #0
}
 8001cc8:	e7cf      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cca:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ccc:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001cce:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001cd0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cda:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cdc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ce0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ce4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001ce8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cec:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cee:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001cf0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cf6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8001cfa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2000      	movs	r0, #0
}
 8001cfe:	e7b4      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2000      	movs	r0, #0
 8001d02:	e7b2      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8001d04:	2001      	movs	r0, #1
 8001d06:	e7b0      	b.n	8001c6a <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 8001d08:	2002      	movs	r0, #2
 8001d0a:	e7b4      	b.n	8001c76 <HAL_TIM_ConfigClockSource+0xd4>

08001d0c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d0c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d10:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d12:	f04f 0c01 	mov.w	ip, #1
 8001d16:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8001d1a:	ea23 030c 	bic.w	r3, r3, ip
 8001d1e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d20:	6a03      	ldr	r3, [r0, #32]
 8001d22:	408a      	lsls	r2, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	6202      	str	r2, [r0, #32]
}
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_TIM_PWM_Start>:
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d30:	4608      	mov	r0, r1
 8001d32:	bb41      	cbnz	r1, 8001d86 <HAL_TIM_PWM_Start+0x5a>
 8001d34:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d15a      	bne.n	8001df4 <HAL_TIM_PWM_Start+0xc8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d44:	2201      	movs	r2, #1
 8001d46:	4601      	mov	r1, r0
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	f7ff ffdf 	bl	8001d0c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	@ (8001dfc <HAL_TIM_PWM_Start+0xd0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03c      	beq.n	8001dd0 <HAL_TIM_PWM_Start+0xa4>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5a:	d040      	beq.n	8001dde <HAL_TIM_PWM_Start+0xb2>
 8001d5c:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_TIM_PWM_Start+0xd4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d03d      	beq.n	8001dde <HAL_TIM_PWM_Start+0xb2>
 8001d62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d039      	beq.n	8001dde <HAL_TIM_PWM_Start+0xb2>
 8001d6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d035      	beq.n	8001dde <HAL_TIM_PWM_Start+0xb2>
 8001d72:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_TIM_PWM_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e035      	b.n	8001df2 <HAL_TIM_PWM_Start+0xc6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d86:	2904      	cmp	r1, #4
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_PWM_Start+0x78>
 8001d8a:	2908      	cmp	r1, #8
 8001d8c:	bf0c      	ite	eq
 8001d8e:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8001d92:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	bf18      	it	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	b143      	cbz	r3, 8001db2 <HAL_TIM_PWM_Start+0x86>
    return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	e026      	b.n	8001df2 <HAL_TIM_PWM_Start+0xc6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001da4:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	bf18      	it	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	e7f5      	b.n	8001d9e <HAL_TIM_PWM_Start+0x72>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001db2:	2804      	cmp	r0, #4
 8001db4:	d008      	beq.n	8001dc8 <HAL_TIM_PWM_Start+0x9c>
 8001db6:	2808      	cmp	r0, #8
 8001db8:	f04f 0302 	mov.w	r3, #2
 8001dbc:	bf0c      	ite	eq
 8001dbe:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8001dc2:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8001dc6:	e7bd      	b.n	8001d44 <HAL_TIM_PWM_Start+0x18>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001dce:	e7b9      	b.n	8001d44 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8001dd0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd6:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d1bb      	bne.n	8001d56 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	2a06      	cmp	r2, #6
 8001de6:	d007      	beq.n	8001df8 <HAL_TIM_PWM_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001df0:	2000      	movs	r0, #0
}
 8001df2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e7fc      	b.n	8001df2 <HAL_TIM_PWM_Start+0xc6>
  return HAL_OK;
 8001df8:	2000      	movs	r0, #0
 8001dfa:	e7fa      	b.n	8001df2 <HAL_TIM_PWM_Start+0xc6>
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400

08001e04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e04:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001e08:	2a01      	cmp	r2, #1
 8001e0a:	d033      	beq.n	8001e74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8001e0c:	b430      	push	{r4, r5}
 8001e0e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	2202      	movs	r2, #2
 8001e18:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e1c:	6804      	ldr	r4, [r0, #0]
 8001e1e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e20:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e26:	680d      	ldr	r5, [r1, #0]
 8001e28:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e2a:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4c12      	ldr	r4, [pc, #72]	@ (8001e78 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8001e30:	42a2      	cmp	r2, r4
 8001e32:	d012      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001e34:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001e38:	d00f      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001e3a:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8001e3e:	42a2      	cmp	r2, r4
 8001e40:	d00b      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001e42:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001e46:	42a2      	cmp	r2, r4
 8001e48:	d007      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001e4a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001e4e:	42a2      	cmp	r2, r4
 8001e50:	d003      	beq.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001e52:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 8001e56:	42a2      	cmp	r2, r4
 8001e58:	d104      	bne.n	8001e64 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e5a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e5e:	6849      	ldr	r1, [r1, #4]
 8001e60:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e62:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001e70:	bc30      	pop	{r4, r5}
 8001e72:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e74:	2002      	movs	r0, #2
}
 8001e76:	4770      	bx	lr
 8001e78:	40010000 	.word	0x40010000

08001e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001e7c:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e7e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d021      	beq.n	8001eca <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8001e86:	2301      	movs	r3, #1
 8001e88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001e8c:	68cb      	ldr	r3, [r1, #12]
 8001e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e92:	6888      	ldr	r0, [r1, #8]
 8001e94:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e9a:	6848      	ldr	r0, [r1, #4]
 8001e9c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ea2:	6808      	ldr	r0, [r1, #0]
 8001ea4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001eaa:	6908      	ldr	r0, [r1, #16]
 8001eac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001eb2:	6948      	ldr	r0, [r1, #20]
 8001eb4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eba:	69c9      	ldr	r1, [r1, #28]
 8001ebc:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ebe:	6811      	ldr	r1, [r2, #0]
 8001ec0:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8001ec8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001eca:	2002      	movs	r0, #2
}
 8001ecc:	4770      	bx	lr

08001ece <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ece:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed0:	f102 030c 	add.w	r3, r2, #12
 8001ed4:	e853 3f00 	ldrex	r3, [r3]
 8001ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001edc:	320c      	adds	r2, #12
 8001ede:	e842 3100 	strex	r1, r3, [r2]
 8001ee2:	2900      	cmp	r1, #0
 8001ee4:	d1f3      	bne.n	8001ece <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	f102 0314 	add.w	r3, r2, #20
 8001eec:	e853 3f00 	ldrex	r3, [r3]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef4:	3214      	adds	r2, #20
 8001ef6:	e842 3100 	strex	r1, r3, [r2]
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d1f3      	bne.n	8001ee6 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001efe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d005      	beq.n	8001f10 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	2320      	movs	r3, #32
 8001f06:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001f0e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f10:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f12:	f102 030c 	add.w	r3, r2, #12
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1e:	320c      	adds	r2, #12
 8001f20:	e842 3100 	strex	r1, r3, [r2]
 8001f24:	2900      	cmp	r1, #0
 8001f26:	d1f3      	bne.n	8001f10 <UART_EndRxTransfer+0x42>
 8001f28:	e7ec      	b.n	8001f04 <UART_EndRxTransfer+0x36>
	...

08001f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f30:	6802      	ldr	r2, [r0, #0]
 8001f32:	6913      	ldr	r3, [r2, #16]
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f38:	68c1      	ldr	r1, [r0, #12]
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8001f3e:	6801      	ldr	r1, [r0, #0]
 8001f40:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f42:	6883      	ldr	r3, [r0, #8]
 8001f44:	6900      	ldr	r0, [r0, #16]
 8001f46:	4303      	orrs	r3, r0
 8001f48:	6960      	ldr	r0, [r4, #20]
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	69e0      	ldr	r0, [r4, #28]
 8001f4e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f50:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8001f54:	f022 020c 	bic.w	r2, r2, #12
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	6953      	ldr	r3, [r2, #20]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f64:	69a1      	ldr	r1, [r4, #24]
 8001f66:	430b      	orrs	r3, r1
 8001f68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <UART_SetConfig+0xfc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d006      	beq.n	8001f80 <UART_SetConfig+0x54>
 8001f72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d002      	beq.n	8001f80 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f7a:	f7ff fbf3 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 8001f7e:	e001      	b.n	8001f84 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f80:	f7ff fc00 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f84:	69e3      	ldr	r3, [r4, #28]
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f8a:	d024      	beq.n	8001fd6 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	1803      	adds	r3, r0, r0
 8001f90:	4149      	adcs	r1, r1
 8001f92:	181b      	adds	r3, r3, r0
 8001f94:	f141 0100 	adc.w	r1, r1, #0
 8001f98:	00c9      	lsls	r1, r1, #3
 8001f9a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1818      	adds	r0, r3, r0
 8001fa2:	6863      	ldr	r3, [r4, #4]
 8001fa4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001fa8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001fac:	f141 0100 	adc.w	r1, r1, #0
 8001fb0:	f7fe f966 	bl	8000280 <__aeabi_uldivmod>
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <UART_SetConfig+0x100>)
 8001fb8:	fba2 4300 	umull	r4, r3, r2, r0
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	2464      	movs	r4, #100	@ 0x64
 8001fc0:	fb04 0013 	mls	r0, r4, r3, r0
 8001fc4:	0100      	lsls	r0, r0, #4
 8001fc6:	3032      	adds	r0, #50	@ 0x32
 8001fc8:	fba2 2000 	umull	r2, r0, r2, r0
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8001fd2:	608b      	str	r3, [r1, #8]
  }
}
 8001fd4:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	1802      	adds	r2, r0, r0
 8001fda:	eb43 0103 	adc.w	r1, r3, r3
 8001fde:	1812      	adds	r2, r2, r0
 8001fe0:	f141 0100 	adc.w	r1, r1, #0
 8001fe4:	00c9      	lsls	r1, r1, #3
 8001fe6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fea:	00d2      	lsls	r2, r2, #3
 8001fec:	1810      	adds	r0, r2, r0
 8001fee:	f141 0100 	adc.w	r1, r1, #0
 8001ff2:	6862      	ldr	r2, [r4, #4]
 8001ff4:	1892      	adds	r2, r2, r2
 8001ff6:	415b      	adcs	r3, r3
 8001ff8:	f7fe f942 	bl	8000280 <__aeabi_uldivmod>
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <UART_SetConfig+0x100>)
 8001ffe:	fba2 3100 	umull	r3, r1, r2, r0
 8002002:	0949      	lsrs	r1, r1, #5
 8002004:	2364      	movs	r3, #100	@ 0x64
 8002006:	fb03 0311 	mls	r3, r3, r1, r0
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	3332      	adds	r3, #50	@ 0x32
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	6820      	ldr	r0, [r4, #0]
 8002014:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002018:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002022:	4413      	add	r3, r2
 8002024:	6083      	str	r3, [r0, #8]
 8002026:	e7d5      	b.n	8001fd4 <UART_SetConfig+0xa8>
 8002028:	40011000 	.word	0x40011000
 800202c:	51eb851f 	.word	0x51eb851f

08002030 <UART_WaitOnFlagUntilTimeout>:
{
 8002030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002034:	b083      	sub	sp, #12
 8002036:	4680      	mov	r8, r0
 8002038:	460d      	mov	r5, r1
 800203a:	4616      	mov	r6, r2
 800203c:	4699      	mov	r9, r3
 800203e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002040:	f8d8 3000 	ldr.w	r3, [r8]
 8002044:	681c      	ldr	r4, [r3, #0]
 8002046:	ea35 0404 	bics.w	r4, r5, r4
 800204a:	bf0c      	ite	eq
 800204c:	2401      	moveq	r4, #1
 800204e:	2400      	movne	r4, #0
 8002050:	42b4      	cmp	r4, r6
 8002052:	d128      	bne.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002054:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002058:	d0f4      	beq.n	8002044 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe ff31 	bl	8000ec0 <HAL_GetTick>
 800205e:	eba0 0009 	sub.w	r0, r0, r9
 8002062:	42b8      	cmp	r0, r7
 8002064:	d823      	bhi.n	80020ae <UART_WaitOnFlagUntilTimeout+0x7e>
 8002066:	b327      	cbz	r7, 80020b2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002068:	f8d8 3000 	ldr.w	r3, [r8]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	f012 0f04 	tst.w	r2, #4
 8002072:	d0e5      	beq.n	8002040 <UART_WaitOnFlagUntilTimeout+0x10>
 8002074:	2d80      	cmp	r5, #128	@ 0x80
 8002076:	d0e3      	beq.n	8002040 <UART_WaitOnFlagUntilTimeout+0x10>
 8002078:	2d40      	cmp	r5, #64	@ 0x40
 800207a:	d0e1      	beq.n	8002040 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f012 0f08 	tst.w	r2, #8
 8002082:	d0dd      	beq.n	8002040 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002084:	2400      	movs	r4, #0
 8002086:	9401      	str	r4, [sp, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002092:	4640      	mov	r0, r8
 8002094:	f7ff ff1b 	bl	8001ece <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002098:	2308      	movs	r3, #8
 800209a:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800209e:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
 80020a4:	e000      	b.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80020a6:	2000      	movs	r0, #0
}
 80020a8:	b003      	add	sp, #12
 80020aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80020ae:	2003      	movs	r0, #3
 80020b0:	e7fa      	b.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x78>
 80020b2:	2003      	movs	r0, #3
 80020b4:	e7f8      	b.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x78>

080020b6 <HAL_UART_Init>:
  if (huart == NULL)
 80020b6:	b360      	cbz	r0, 8002112 <HAL_UART_Init+0x5c>
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80020bc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80020c0:	b313      	cbz	r3, 8002108 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80020c2:	2324      	movs	r3, #36	@ 0x24
 80020c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80020c8:	6822      	ldr	r2, [r4, #0]
 80020ca:	68d3      	ldr	r3, [r2, #12]
 80020cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff ff2a 	bl	8001f2c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d8:	6822      	ldr	r2, [r4, #0]
 80020da:	6913      	ldr	r3, [r2, #16]
 80020dc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80020e0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	6953      	ldr	r3, [r2, #20]
 80020e6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80020ea:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	68d3      	ldr	r3, [r2, #12]
 80020f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020f4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f6:	2000      	movs	r0, #0
 80020f8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020fa:	2320      	movs	r3, #32
 80020fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002104:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002106:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002108:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800210c:	f7fe fdd4 	bl	8000cb8 <HAL_UART_MspInit>
 8002110:	e7d7      	b.n	80020c2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002112:	2001      	movs	r0, #1
}
 8002114:	4770      	bx	lr

08002116 <HAL_UART_Transmit>:
{
 8002116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800211e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	d15c      	bne.n	80021e2 <HAL_UART_Transmit+0xcc>
 8002128:	4604      	mov	r4, r0
 800212a:	460d      	mov	r5, r1
 800212c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800212e:	2900      	cmp	r1, #0
 8002130:	d05b      	beq.n	80021ea <HAL_UART_Transmit+0xd4>
 8002132:	b90a      	cbnz	r2, 8002138 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002134:	2001      	movs	r0, #1
 8002136:	e055      	b.n	80021e4 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213c:	2321      	movs	r3, #33	@ 0x21
 800213e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002142:	f7fe febd 	bl	8000ec0 <HAL_GetTick>
 8002146:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002148:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800214c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002150:	68a3      	ldr	r3, [r4, #8]
 8002152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002156:	d009      	beq.n	800216c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002158:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 800215c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800215e:	b29b      	uxth	r3, r3
 8002160:	b373      	cbz	r3, 80021c0 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	f04f 0900 	mov.w	r9, #0
 8002166:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800216a:	e019      	b.n	80021a0 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216c:	6923      	ldr	r3, [r4, #16]
 800216e:	b113      	cbz	r3, 8002176 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002170:	f04f 0a00 	mov.w	sl, #0
 8002174:	e7f2      	b.n	800215c <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8002176:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002178:	2500      	movs	r5, #0
 800217a:	e7ef      	b.n	800215c <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 800217c:	2320      	movs	r3, #32
 800217e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002182:	2003      	movs	r0, #3
 8002184:	e02e      	b.n	80021e4 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800218c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002190:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002192:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002194:	3a01      	subs	r2, #1
 8002196:	b292      	uxth	r2, r2
 8002198:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800219a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800219c:	b29b      	uxth	r3, r3
 800219e:	b17b      	cbz	r3, 80021c0 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a0:	9600      	str	r6, [sp, #0]
 80021a2:	463b      	mov	r3, r7
 80021a4:	464a      	mov	r2, r9
 80021a6:	4641      	mov	r1, r8
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff ff41 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d1e4      	bne.n	800217c <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d0e7      	beq.n	8002186 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80021bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021be:	e7e8      	b.n	8002192 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c0:	9600      	str	r6, [sp, #0]
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ff31 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 80021ce:	b918      	cbnz	r0, 80021d8 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 80021d0:	2320      	movs	r3, #32
 80021d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80021d6:	e005      	b.n	80021e4 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 80021d8:	2320      	movs	r3, #32
 80021da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
 80021e0:	e000      	b.n	80021e4 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 80021e2:	2002      	movs	r0, #2
}
 80021e4:	b002      	add	sp, #8
 80021e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7fa      	b.n	80021e4 <HAL_UART_Transmit+0xce>
	...

080021f0 <std>:
 80021f0:	2300      	movs	r3, #0
 80021f2:	b510      	push	{r4, lr}
 80021f4:	4604      	mov	r4, r0
 80021f6:	e9c0 3300 	strd	r3, r3, [r0]
 80021fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021fe:	6083      	str	r3, [r0, #8]
 8002200:	8181      	strh	r1, [r0, #12]
 8002202:	6643      	str	r3, [r0, #100]	@ 0x64
 8002204:	81c2      	strh	r2, [r0, #14]
 8002206:	6183      	str	r3, [r0, #24]
 8002208:	4619      	mov	r1, r3
 800220a:	2208      	movs	r2, #8
 800220c:	305c      	adds	r0, #92	@ 0x5c
 800220e:	f000 f9f9 	bl	8002604 <memset>
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <std+0x58>)
 8002214:	6263      	str	r3, [r4, #36]	@ 0x24
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <std+0x5c>)
 8002218:	62a3      	str	r3, [r4, #40]	@ 0x28
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <std+0x60>)
 800221c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <std+0x64>)
 8002220:	6323      	str	r3, [r4, #48]	@ 0x30
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <std+0x68>)
 8002224:	6224      	str	r4, [r4, #32]
 8002226:	429c      	cmp	r4, r3
 8002228:	d006      	beq.n	8002238 <std+0x48>
 800222a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800222e:	4294      	cmp	r4, r2
 8002230:	d002      	beq.n	8002238 <std+0x48>
 8002232:	33d0      	adds	r3, #208	@ 0xd0
 8002234:	429c      	cmp	r4, r3
 8002236:	d105      	bne.n	8002244 <std+0x54>
 8002238:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002240:	f000 ba58 	b.w	80026f4 <__retarget_lock_init_recursive>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	bf00      	nop
 8002248:	08002455 	.word	0x08002455
 800224c:	08002477 	.word	0x08002477
 8002250:	080024af 	.word	0x080024af
 8002254:	080024d3 	.word	0x080024d3
 8002258:	200001f4 	.word	0x200001f4

0800225c <stdio_exit_handler>:
 800225c:	4a02      	ldr	r2, [pc, #8]	@ (8002268 <stdio_exit_handler+0xc>)
 800225e:	4903      	ldr	r1, [pc, #12]	@ (800226c <stdio_exit_handler+0x10>)
 8002260:	4803      	ldr	r0, [pc, #12]	@ (8002270 <stdio_exit_handler+0x14>)
 8002262:	f000 b869 	b.w	8002338 <_fwalk_sglue>
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c
 800226c:	08002f91 	.word	0x08002f91
 8002270:	2000001c 	.word	0x2000001c

08002274 <cleanup_stdio>:
 8002274:	6841      	ldr	r1, [r0, #4]
 8002276:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <cleanup_stdio+0x34>)
 8002278:	4299      	cmp	r1, r3
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
 800227e:	d001      	beq.n	8002284 <cleanup_stdio+0x10>
 8002280:	f000 fe86 	bl	8002f90 <_fflush_r>
 8002284:	68a1      	ldr	r1, [r4, #8]
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <cleanup_stdio+0x38>)
 8002288:	4299      	cmp	r1, r3
 800228a:	d002      	beq.n	8002292 <cleanup_stdio+0x1e>
 800228c:	4620      	mov	r0, r4
 800228e:	f000 fe7f 	bl	8002f90 <_fflush_r>
 8002292:	68e1      	ldr	r1, [r4, #12]
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <cleanup_stdio+0x3c>)
 8002296:	4299      	cmp	r1, r3
 8002298:	d004      	beq.n	80022a4 <cleanup_stdio+0x30>
 800229a:	4620      	mov	r0, r4
 800229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a0:	f000 be76 	b.w	8002f90 <_fflush_r>
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	bf00      	nop
 80022a8:	200001f4 	.word	0x200001f4
 80022ac:	2000025c 	.word	0x2000025c
 80022b0:	200002c4 	.word	0x200002c4

080022b4 <global_stdio_init.part.0>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <global_stdio_init.part.0+0x30>)
 80022b8:	4c0b      	ldr	r4, [pc, #44]	@ (80022e8 <global_stdio_init.part.0+0x34>)
 80022ba:	4a0c      	ldr	r2, [pc, #48]	@ (80022ec <global_stdio_init.part.0+0x38>)
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4620      	mov	r0, r4
 80022c0:	2200      	movs	r2, #0
 80022c2:	2104      	movs	r1, #4
 80022c4:	f7ff ff94 	bl	80021f0 <std>
 80022c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022cc:	2201      	movs	r2, #1
 80022ce:	2109      	movs	r1, #9
 80022d0:	f7ff ff8e 	bl	80021f0 <std>
 80022d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80022d8:	2202      	movs	r2, #2
 80022da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022de:	2112      	movs	r1, #18
 80022e0:	f7ff bf86 	b.w	80021f0 <std>
 80022e4:	2000032c 	.word	0x2000032c
 80022e8:	200001f4 	.word	0x200001f4
 80022ec:	0800225d 	.word	0x0800225d

080022f0 <__sfp_lock_acquire>:
 80022f0:	4801      	ldr	r0, [pc, #4]	@ (80022f8 <__sfp_lock_acquire+0x8>)
 80022f2:	f000 ba00 	b.w	80026f6 <__retarget_lock_acquire_recursive>
 80022f6:	bf00      	nop
 80022f8:	20000335 	.word	0x20000335

080022fc <__sfp_lock_release>:
 80022fc:	4801      	ldr	r0, [pc, #4]	@ (8002304 <__sfp_lock_release+0x8>)
 80022fe:	f000 b9fb 	b.w	80026f8 <__retarget_lock_release_recursive>
 8002302:	bf00      	nop
 8002304:	20000335 	.word	0x20000335

08002308 <__sinit>:
 8002308:	b510      	push	{r4, lr}
 800230a:	4604      	mov	r4, r0
 800230c:	f7ff fff0 	bl	80022f0 <__sfp_lock_acquire>
 8002310:	6a23      	ldr	r3, [r4, #32]
 8002312:	b11b      	cbz	r3, 800231c <__sinit+0x14>
 8002314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002318:	f7ff bff0 	b.w	80022fc <__sfp_lock_release>
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__sinit+0x28>)
 800231e:	6223      	str	r3, [r4, #32]
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <__sinit+0x2c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f5      	bne.n	8002314 <__sinit+0xc>
 8002328:	f7ff ffc4 	bl	80022b4 <global_stdio_init.part.0>
 800232c:	e7f2      	b.n	8002314 <__sinit+0xc>
 800232e:	bf00      	nop
 8002330:	08002275 	.word	0x08002275
 8002334:	2000032c 	.word	0x2000032c

08002338 <_fwalk_sglue>:
 8002338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800233c:	4607      	mov	r7, r0
 800233e:	4688      	mov	r8, r1
 8002340:	4614      	mov	r4, r2
 8002342:	2600      	movs	r6, #0
 8002344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002348:	f1b9 0901 	subs.w	r9, r9, #1
 800234c:	d505      	bpl.n	800235a <_fwalk_sglue+0x22>
 800234e:	6824      	ldr	r4, [r4, #0]
 8002350:	2c00      	cmp	r4, #0
 8002352:	d1f7      	bne.n	8002344 <_fwalk_sglue+0xc>
 8002354:	4630      	mov	r0, r6
 8002356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800235a:	89ab      	ldrh	r3, [r5, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d907      	bls.n	8002370 <_fwalk_sglue+0x38>
 8002360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002364:	3301      	adds	r3, #1
 8002366:	d003      	beq.n	8002370 <_fwalk_sglue+0x38>
 8002368:	4629      	mov	r1, r5
 800236a:	4638      	mov	r0, r7
 800236c:	47c0      	blx	r8
 800236e:	4306      	orrs	r6, r0
 8002370:	3568      	adds	r5, #104	@ 0x68
 8002372:	e7e9      	b.n	8002348 <_fwalk_sglue+0x10>

08002374 <iprintf>:
 8002374:	b40f      	push	{r0, r1, r2, r3}
 8002376:	b507      	push	{r0, r1, r2, lr}
 8002378:	4906      	ldr	r1, [pc, #24]	@ (8002394 <iprintf+0x20>)
 800237a:	ab04      	add	r3, sp, #16
 800237c:	6808      	ldr	r0, [r1, #0]
 800237e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002382:	6881      	ldr	r1, [r0, #8]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	f000 fadb 	bl	8002940 <_vfiprintf_r>
 800238a:	b003      	add	sp, #12
 800238c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002390:	b004      	add	sp, #16
 8002392:	4770      	bx	lr
 8002394:	20000018 	.word	0x20000018

08002398 <_puts_r>:
 8002398:	6a03      	ldr	r3, [r0, #32]
 800239a:	b570      	push	{r4, r5, r6, lr}
 800239c:	6884      	ldr	r4, [r0, #8]
 800239e:	4605      	mov	r5, r0
 80023a0:	460e      	mov	r6, r1
 80023a2:	b90b      	cbnz	r3, 80023a8 <_puts_r+0x10>
 80023a4:	f7ff ffb0 	bl	8002308 <__sinit>
 80023a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023aa:	07db      	lsls	r3, r3, #31
 80023ac:	d405      	bmi.n	80023ba <_puts_r+0x22>
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	0598      	lsls	r0, r3, #22
 80023b2:	d402      	bmi.n	80023ba <_puts_r+0x22>
 80023b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023b6:	f000 f99e 	bl	80026f6 <__retarget_lock_acquire_recursive>
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	0719      	lsls	r1, r3, #28
 80023be:	d502      	bpl.n	80023c6 <_puts_r+0x2e>
 80023c0:	6923      	ldr	r3, [r4, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d135      	bne.n	8002432 <_puts_r+0x9a>
 80023c6:	4621      	mov	r1, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	f000 f8c5 	bl	8002558 <__swsetup_r>
 80023ce:	b380      	cbz	r0, 8002432 <_puts_r+0x9a>
 80023d0:	f04f 35ff 	mov.w	r5, #4294967295
 80023d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023d6:	07da      	lsls	r2, r3, #31
 80023d8:	d405      	bmi.n	80023e6 <_puts_r+0x4e>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	059b      	lsls	r3, r3, #22
 80023de:	d402      	bmi.n	80023e6 <_puts_r+0x4e>
 80023e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023e2:	f000 f989 	bl	80026f8 <__retarget_lock_release_recursive>
 80023e6:	4628      	mov	r0, r5
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da04      	bge.n	80023f8 <_puts_r+0x60>
 80023ee:	69a2      	ldr	r2, [r4, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dc17      	bgt.n	8002424 <_puts_r+0x8c>
 80023f4:	290a      	cmp	r1, #10
 80023f6:	d015      	beq.n	8002424 <_puts_r+0x8c>
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	6022      	str	r2, [r4, #0]
 80023fe:	7019      	strb	r1, [r3, #0]
 8002400:	68a3      	ldr	r3, [r4, #8]
 8002402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002406:	3b01      	subs	r3, #1
 8002408:	60a3      	str	r3, [r4, #8]
 800240a:	2900      	cmp	r1, #0
 800240c:	d1ed      	bne.n	80023ea <_puts_r+0x52>
 800240e:	2b00      	cmp	r3, #0
 8002410:	da11      	bge.n	8002436 <_puts_r+0x9e>
 8002412:	4622      	mov	r2, r4
 8002414:	210a      	movs	r1, #10
 8002416:	4628      	mov	r0, r5
 8002418:	f000 f85f 	bl	80024da <__swbuf_r>
 800241c:	3001      	adds	r0, #1
 800241e:	d0d7      	beq.n	80023d0 <_puts_r+0x38>
 8002420:	250a      	movs	r5, #10
 8002422:	e7d7      	b.n	80023d4 <_puts_r+0x3c>
 8002424:	4622      	mov	r2, r4
 8002426:	4628      	mov	r0, r5
 8002428:	f000 f857 	bl	80024da <__swbuf_r>
 800242c:	3001      	adds	r0, #1
 800242e:	d1e7      	bne.n	8002400 <_puts_r+0x68>
 8002430:	e7ce      	b.n	80023d0 <_puts_r+0x38>
 8002432:	3e01      	subs	r6, #1
 8002434:	e7e4      	b.n	8002400 <_puts_r+0x68>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	6022      	str	r2, [r4, #0]
 800243c:	220a      	movs	r2, #10
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e7ee      	b.n	8002420 <_puts_r+0x88>
	...

08002444 <puts>:
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <puts+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7ff bfa5 	b.w	8002398 <_puts_r>
 800244e:	bf00      	nop
 8002450:	20000018 	.word	0x20000018

08002454 <__sread>:
 8002454:	b510      	push	{r4, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245c:	f000 f8fc 	bl	8002658 <_read_r>
 8002460:	2800      	cmp	r0, #0
 8002462:	bfab      	itete	ge
 8002464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002466:	89a3      	ldrhlt	r3, [r4, #12]
 8002468:	181b      	addge	r3, r3, r0
 800246a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800246e:	bfac      	ite	ge
 8002470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002472:	81a3      	strhlt	r3, [r4, #12]
 8002474:	bd10      	pop	{r4, pc}

08002476 <__swrite>:
 8002476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247a:	461f      	mov	r7, r3
 800247c:	898b      	ldrh	r3, [r1, #12]
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	4605      	mov	r5, r0
 8002482:	460c      	mov	r4, r1
 8002484:	4616      	mov	r6, r2
 8002486:	d505      	bpl.n	8002494 <__swrite+0x1e>
 8002488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800248c:	2302      	movs	r3, #2
 800248e:	2200      	movs	r2, #0
 8002490:	f000 f8d0 	bl	8002634 <_lseek_r>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800249a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800249e:	81a3      	strh	r3, [r4, #12]
 80024a0:	4632      	mov	r2, r6
 80024a2:	463b      	mov	r3, r7
 80024a4:	4628      	mov	r0, r5
 80024a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024aa:	f000 b8e7 	b.w	800267c <_write_r>

080024ae <__sseek>:
 80024ae:	b510      	push	{r4, lr}
 80024b0:	460c      	mov	r4, r1
 80024b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b6:	f000 f8bd 	bl	8002634 <_lseek_r>
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	bf15      	itete	ne
 80024c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024ca:	81a3      	strheq	r3, [r4, #12]
 80024cc:	bf18      	it	ne
 80024ce:	81a3      	strhne	r3, [r4, #12]
 80024d0:	bd10      	pop	{r4, pc}

080024d2 <__sclose>:
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	f000 b89d 	b.w	8002614 <_close_r>

080024da <__swbuf_r>:
 80024da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024dc:	460e      	mov	r6, r1
 80024de:	4614      	mov	r4, r2
 80024e0:	4605      	mov	r5, r0
 80024e2:	b118      	cbz	r0, 80024ec <__swbuf_r+0x12>
 80024e4:	6a03      	ldr	r3, [r0, #32]
 80024e6:	b90b      	cbnz	r3, 80024ec <__swbuf_r+0x12>
 80024e8:	f7ff ff0e 	bl	8002308 <__sinit>
 80024ec:	69a3      	ldr	r3, [r4, #24]
 80024ee:	60a3      	str	r3, [r4, #8]
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	071a      	lsls	r2, r3, #28
 80024f4:	d501      	bpl.n	80024fa <__swbuf_r+0x20>
 80024f6:	6923      	ldr	r3, [r4, #16]
 80024f8:	b943      	cbnz	r3, 800250c <__swbuf_r+0x32>
 80024fa:	4621      	mov	r1, r4
 80024fc:	4628      	mov	r0, r5
 80024fe:	f000 f82b 	bl	8002558 <__swsetup_r>
 8002502:	b118      	cbz	r0, 800250c <__swbuf_r+0x32>
 8002504:	f04f 37ff 	mov.w	r7, #4294967295
 8002508:	4638      	mov	r0, r7
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	6922      	ldr	r2, [r4, #16]
 8002510:	1a98      	subs	r0, r3, r2
 8002512:	6963      	ldr	r3, [r4, #20]
 8002514:	b2f6      	uxtb	r6, r6
 8002516:	4283      	cmp	r3, r0
 8002518:	4637      	mov	r7, r6
 800251a:	dc05      	bgt.n	8002528 <__swbuf_r+0x4e>
 800251c:	4621      	mov	r1, r4
 800251e:	4628      	mov	r0, r5
 8002520:	f000 fd36 	bl	8002f90 <_fflush_r>
 8002524:	2800      	cmp	r0, #0
 8002526:	d1ed      	bne.n	8002504 <__swbuf_r+0x2a>
 8002528:	68a3      	ldr	r3, [r4, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	60a3      	str	r3, [r4, #8]
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	6022      	str	r2, [r4, #0]
 8002534:	701e      	strb	r6, [r3, #0]
 8002536:	6962      	ldr	r2, [r4, #20]
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	429a      	cmp	r2, r3
 800253c:	d004      	beq.n	8002548 <__swbuf_r+0x6e>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	07db      	lsls	r3, r3, #31
 8002542:	d5e1      	bpl.n	8002508 <__swbuf_r+0x2e>
 8002544:	2e0a      	cmp	r6, #10
 8002546:	d1df      	bne.n	8002508 <__swbuf_r+0x2e>
 8002548:	4621      	mov	r1, r4
 800254a:	4628      	mov	r0, r5
 800254c:	f000 fd20 	bl	8002f90 <_fflush_r>
 8002550:	2800      	cmp	r0, #0
 8002552:	d0d9      	beq.n	8002508 <__swbuf_r+0x2e>
 8002554:	e7d6      	b.n	8002504 <__swbuf_r+0x2a>
	...

08002558 <__swsetup_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4b29      	ldr	r3, [pc, #164]	@ (8002600 <__swsetup_r+0xa8>)
 800255c:	4605      	mov	r5, r0
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	460c      	mov	r4, r1
 8002562:	b118      	cbz	r0, 800256c <__swsetup_r+0x14>
 8002564:	6a03      	ldr	r3, [r0, #32]
 8002566:	b90b      	cbnz	r3, 800256c <__swsetup_r+0x14>
 8002568:	f7ff fece 	bl	8002308 <__sinit>
 800256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002570:	0719      	lsls	r1, r3, #28
 8002572:	d422      	bmi.n	80025ba <__swsetup_r+0x62>
 8002574:	06da      	lsls	r2, r3, #27
 8002576:	d407      	bmi.n	8002588 <__swsetup_r+0x30>
 8002578:	2209      	movs	r2, #9
 800257a:	602a      	str	r2, [r5, #0]
 800257c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002580:	81a3      	strh	r3, [r4, #12]
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
 8002586:	e033      	b.n	80025f0 <__swsetup_r+0x98>
 8002588:	0758      	lsls	r0, r3, #29
 800258a:	d512      	bpl.n	80025b2 <__swsetup_r+0x5a>
 800258c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800258e:	b141      	cbz	r1, 80025a2 <__swsetup_r+0x4a>
 8002590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002594:	4299      	cmp	r1, r3
 8002596:	d002      	beq.n	800259e <__swsetup_r+0x46>
 8002598:	4628      	mov	r0, r5
 800259a:	f000 f8af 	bl	80026fc <_free_r>
 800259e:	2300      	movs	r3, #0
 80025a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	6063      	str	r3, [r4, #4]
 80025ae:	6923      	ldr	r3, [r4, #16]
 80025b0:	6023      	str	r3, [r4, #0]
 80025b2:	89a3      	ldrh	r3, [r4, #12]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	81a3      	strh	r3, [r4, #12]
 80025ba:	6923      	ldr	r3, [r4, #16]
 80025bc:	b94b      	cbnz	r3, 80025d2 <__swsetup_r+0x7a>
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c8:	d003      	beq.n	80025d2 <__swsetup_r+0x7a>
 80025ca:	4621      	mov	r1, r4
 80025cc:	4628      	mov	r0, r5
 80025ce:	f000 fd2d 	bl	800302c <__smakebuf_r>
 80025d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025d6:	f013 0201 	ands.w	r2, r3, #1
 80025da:	d00a      	beq.n	80025f2 <__swsetup_r+0x9a>
 80025dc:	2200      	movs	r2, #0
 80025de:	60a2      	str	r2, [r4, #8]
 80025e0:	6962      	ldr	r2, [r4, #20]
 80025e2:	4252      	negs	r2, r2
 80025e4:	61a2      	str	r2, [r4, #24]
 80025e6:	6922      	ldr	r2, [r4, #16]
 80025e8:	b942      	cbnz	r2, 80025fc <__swsetup_r+0xa4>
 80025ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025ee:	d1c5      	bne.n	800257c <__swsetup_r+0x24>
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	0799      	lsls	r1, r3, #30
 80025f4:	bf58      	it	pl
 80025f6:	6962      	ldrpl	r2, [r4, #20]
 80025f8:	60a2      	str	r2, [r4, #8]
 80025fa:	e7f4      	b.n	80025e6 <__swsetup_r+0x8e>
 80025fc:	2000      	movs	r0, #0
 80025fe:	e7f7      	b.n	80025f0 <__swsetup_r+0x98>
 8002600:	20000018 	.word	0x20000018

08002604 <memset>:
 8002604:	4402      	add	r2, r0
 8002606:	4603      	mov	r3, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_close_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4d06      	ldr	r5, [pc, #24]	@ (8002630 <_close_r+0x1c>)
 8002618:	2300      	movs	r3, #0
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	f7fe fb9d 	bl	8000d5e <_close>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_close_r+0x1a>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	b103      	cbz	r3, 800262e <_close_r+0x1a>
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	20000330 	.word	0x20000330

08002634 <_lseek_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d07      	ldr	r5, [pc, #28]	@ (8002654 <_lseek_r+0x20>)
 8002638:	4604      	mov	r4, r0
 800263a:	4608      	mov	r0, r1
 800263c:	4611      	mov	r1, r2
 800263e:	2200      	movs	r2, #0
 8002640:	602a      	str	r2, [r5, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f7fe fb95 	bl	8000d72 <_lseek>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	d102      	bne.n	8002652 <_lseek_r+0x1e>
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	b103      	cbz	r3, 8002652 <_lseek_r+0x1e>
 8002650:	6023      	str	r3, [r4, #0]
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	20000330 	.word	0x20000330

08002658 <_read_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4d07      	ldr	r5, [pc, #28]	@ (8002678 <_read_r+0x20>)
 800265c:	4604      	mov	r4, r0
 800265e:	4608      	mov	r0, r1
 8002660:	4611      	mov	r1, r2
 8002662:	2200      	movs	r2, #0
 8002664:	602a      	str	r2, [r5, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f7fe fb6c 	bl	8000d44 <_read>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d102      	bne.n	8002676 <_read_r+0x1e>
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	b103      	cbz	r3, 8002676 <_read_r+0x1e>
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	20000330 	.word	0x20000330

0800267c <_write_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4d07      	ldr	r5, [pc, #28]	@ (800269c <_write_r+0x20>)
 8002680:	4604      	mov	r4, r0
 8002682:	4608      	mov	r0, r1
 8002684:	4611      	mov	r1, r2
 8002686:	2200      	movs	r2, #0
 8002688:	602a      	str	r2, [r5, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fd ff8e 	bl	80005ac <_write>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_write_r+0x1e>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_write_r+0x1e>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	20000330 	.word	0x20000330

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	@ (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000018 	.word	0x20000018

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4d0d      	ldr	r5, [pc, #52]	@ (80026e4 <__libc_init_array+0x38>)
 80026b0:	4c0d      	ldr	r4, [pc, #52]	@ (80026e8 <__libc_init_array+0x3c>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	2600      	movs	r6, #0
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	4d0b      	ldr	r5, [pc, #44]	@ (80026ec <__libc_init_array+0x40>)
 80026be:	4c0c      	ldr	r4, [pc, #48]	@ (80026f0 <__libc_init_array+0x44>)
 80026c0:	f000 fd22 	bl	8003108 <_init>
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	2600      	movs	r6, #0
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	080031a8 	.word	0x080031a8
 80026e8:	080031a8 	.word	0x080031a8
 80026ec:	080031a8 	.word	0x080031a8
 80026f0:	080031ac 	.word	0x080031ac

080026f4 <__retarget_lock_init_recursive>:
 80026f4:	4770      	bx	lr

080026f6 <__retarget_lock_acquire_recursive>:
 80026f6:	4770      	bx	lr

080026f8 <__retarget_lock_release_recursive>:
 80026f8:	4770      	bx	lr
	...

080026fc <_free_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4605      	mov	r5, r0
 8002700:	2900      	cmp	r1, #0
 8002702:	d041      	beq.n	8002788 <_free_r+0x8c>
 8002704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002708:	1f0c      	subs	r4, r1, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	18e4      	addlt	r4, r4, r3
 8002710:	f000 f8e0 	bl	80028d4 <__malloc_lock>
 8002714:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <_free_r+0x90>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	b933      	cbnz	r3, 8002728 <_free_r+0x2c>
 800271a:	6063      	str	r3, [r4, #4]
 800271c:	6014      	str	r4, [r2, #0]
 800271e:	4628      	mov	r0, r5
 8002720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002724:	f000 b8dc 	b.w	80028e0 <__malloc_unlock>
 8002728:	42a3      	cmp	r3, r4
 800272a:	d908      	bls.n	800273e <_free_r+0x42>
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	1821      	adds	r1, r4, r0
 8002730:	428b      	cmp	r3, r1
 8002732:	bf01      	itttt	eq
 8002734:	6819      	ldreq	r1, [r3, #0]
 8002736:	685b      	ldreq	r3, [r3, #4]
 8002738:	1809      	addeq	r1, r1, r0
 800273a:	6021      	streq	r1, [r4, #0]
 800273c:	e7ed      	b.n	800271a <_free_r+0x1e>
 800273e:	461a      	mov	r2, r3
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	b10b      	cbz	r3, 8002748 <_free_r+0x4c>
 8002744:	42a3      	cmp	r3, r4
 8002746:	d9fa      	bls.n	800273e <_free_r+0x42>
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	1850      	adds	r0, r2, r1
 800274c:	42a0      	cmp	r0, r4
 800274e:	d10b      	bne.n	8002768 <_free_r+0x6c>
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	4401      	add	r1, r0
 8002754:	1850      	adds	r0, r2, r1
 8002756:	4283      	cmp	r3, r0
 8002758:	6011      	str	r1, [r2, #0]
 800275a:	d1e0      	bne.n	800271e <_free_r+0x22>
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	6053      	str	r3, [r2, #4]
 8002762:	4408      	add	r0, r1
 8002764:	6010      	str	r0, [r2, #0]
 8002766:	e7da      	b.n	800271e <_free_r+0x22>
 8002768:	d902      	bls.n	8002770 <_free_r+0x74>
 800276a:	230c      	movs	r3, #12
 800276c:	602b      	str	r3, [r5, #0]
 800276e:	e7d6      	b.n	800271e <_free_r+0x22>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	1821      	adds	r1, r4, r0
 8002774:	428b      	cmp	r3, r1
 8002776:	bf04      	itt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	bf04      	itt	eq
 8002780:	1809      	addeq	r1, r1, r0
 8002782:	6021      	streq	r1, [r4, #0]
 8002784:	6054      	str	r4, [r2, #4]
 8002786:	e7ca      	b.n	800271e <_free_r+0x22>
 8002788:	bd38      	pop	{r3, r4, r5, pc}
 800278a:	bf00      	nop
 800278c:	2000033c 	.word	0x2000033c

08002790 <sbrk_aligned>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4e0f      	ldr	r6, [pc, #60]	@ (80027d0 <sbrk_aligned+0x40>)
 8002794:	460c      	mov	r4, r1
 8002796:	6831      	ldr	r1, [r6, #0]
 8002798:	4605      	mov	r5, r0
 800279a:	b911      	cbnz	r1, 80027a2 <sbrk_aligned+0x12>
 800279c:	f000 fca4 	bl	80030e8 <_sbrk_r>
 80027a0:	6030      	str	r0, [r6, #0]
 80027a2:	4621      	mov	r1, r4
 80027a4:	4628      	mov	r0, r5
 80027a6:	f000 fc9f 	bl	80030e8 <_sbrk_r>
 80027aa:	1c43      	adds	r3, r0, #1
 80027ac:	d103      	bne.n	80027b6 <sbrk_aligned+0x26>
 80027ae:	f04f 34ff 	mov.w	r4, #4294967295
 80027b2:	4620      	mov	r0, r4
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	1cc4      	adds	r4, r0, #3
 80027b8:	f024 0403 	bic.w	r4, r4, #3
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d0f8      	beq.n	80027b2 <sbrk_aligned+0x22>
 80027c0:	1a21      	subs	r1, r4, r0
 80027c2:	4628      	mov	r0, r5
 80027c4:	f000 fc90 	bl	80030e8 <_sbrk_r>
 80027c8:	3001      	adds	r0, #1
 80027ca:	d1f2      	bne.n	80027b2 <sbrk_aligned+0x22>
 80027cc:	e7ef      	b.n	80027ae <sbrk_aligned+0x1e>
 80027ce:	bf00      	nop
 80027d0:	20000338 	.word	0x20000338

080027d4 <_malloc_r>:
 80027d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027d8:	1ccd      	adds	r5, r1, #3
 80027da:	f025 0503 	bic.w	r5, r5, #3
 80027de:	3508      	adds	r5, #8
 80027e0:	2d0c      	cmp	r5, #12
 80027e2:	bf38      	it	cc
 80027e4:	250c      	movcc	r5, #12
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	4606      	mov	r6, r0
 80027ea:	db01      	blt.n	80027f0 <_malloc_r+0x1c>
 80027ec:	42a9      	cmp	r1, r5
 80027ee:	d904      	bls.n	80027fa <_malloc_r+0x26>
 80027f0:	230c      	movs	r3, #12
 80027f2:	6033      	str	r3, [r6, #0]
 80027f4:	2000      	movs	r0, #0
 80027f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028d0 <_malloc_r+0xfc>
 80027fe:	f000 f869 	bl	80028d4 <__malloc_lock>
 8002802:	f8d8 3000 	ldr.w	r3, [r8]
 8002806:	461c      	mov	r4, r3
 8002808:	bb44      	cbnz	r4, 800285c <_malloc_r+0x88>
 800280a:	4629      	mov	r1, r5
 800280c:	4630      	mov	r0, r6
 800280e:	f7ff ffbf 	bl	8002790 <sbrk_aligned>
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	4604      	mov	r4, r0
 8002816:	d158      	bne.n	80028ca <_malloc_r+0xf6>
 8002818:	f8d8 4000 	ldr.w	r4, [r8]
 800281c:	4627      	mov	r7, r4
 800281e:	2f00      	cmp	r7, #0
 8002820:	d143      	bne.n	80028aa <_malloc_r+0xd6>
 8002822:	2c00      	cmp	r4, #0
 8002824:	d04b      	beq.n	80028be <_malloc_r+0xea>
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	4639      	mov	r1, r7
 800282a:	4630      	mov	r0, r6
 800282c:	eb04 0903 	add.w	r9, r4, r3
 8002830:	f000 fc5a 	bl	80030e8 <_sbrk_r>
 8002834:	4581      	cmp	r9, r0
 8002836:	d142      	bne.n	80028be <_malloc_r+0xea>
 8002838:	6821      	ldr	r1, [r4, #0]
 800283a:	1a6d      	subs	r5, r5, r1
 800283c:	4629      	mov	r1, r5
 800283e:	4630      	mov	r0, r6
 8002840:	f7ff ffa6 	bl	8002790 <sbrk_aligned>
 8002844:	3001      	adds	r0, #1
 8002846:	d03a      	beq.n	80028be <_malloc_r+0xea>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	442b      	add	r3, r5
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	f8d8 3000 	ldr.w	r3, [r8]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	bb62      	cbnz	r2, 80028b0 <_malloc_r+0xdc>
 8002856:	f8c8 7000 	str.w	r7, [r8]
 800285a:	e00f      	b.n	800287c <_malloc_r+0xa8>
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	1b52      	subs	r2, r2, r5
 8002860:	d420      	bmi.n	80028a4 <_malloc_r+0xd0>
 8002862:	2a0b      	cmp	r2, #11
 8002864:	d917      	bls.n	8002896 <_malloc_r+0xc2>
 8002866:	1961      	adds	r1, r4, r5
 8002868:	42a3      	cmp	r3, r4
 800286a:	6025      	str	r5, [r4, #0]
 800286c:	bf18      	it	ne
 800286e:	6059      	strne	r1, [r3, #4]
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	bf08      	it	eq
 8002874:	f8c8 1000 	streq.w	r1, [r8]
 8002878:	5162      	str	r2, [r4, r5]
 800287a:	604b      	str	r3, [r1, #4]
 800287c:	4630      	mov	r0, r6
 800287e:	f000 f82f 	bl	80028e0 <__malloc_unlock>
 8002882:	f104 000b 	add.w	r0, r4, #11
 8002886:	1d23      	adds	r3, r4, #4
 8002888:	f020 0007 	bic.w	r0, r0, #7
 800288c:	1ac2      	subs	r2, r0, r3
 800288e:	bf1c      	itt	ne
 8002890:	1a1b      	subne	r3, r3, r0
 8002892:	50a3      	strne	r3, [r4, r2]
 8002894:	e7af      	b.n	80027f6 <_malloc_r+0x22>
 8002896:	6862      	ldr	r2, [r4, #4]
 8002898:	42a3      	cmp	r3, r4
 800289a:	bf0c      	ite	eq
 800289c:	f8c8 2000 	streq.w	r2, [r8]
 80028a0:	605a      	strne	r2, [r3, #4]
 80028a2:	e7eb      	b.n	800287c <_malloc_r+0xa8>
 80028a4:	4623      	mov	r3, r4
 80028a6:	6864      	ldr	r4, [r4, #4]
 80028a8:	e7ae      	b.n	8002808 <_malloc_r+0x34>
 80028aa:	463c      	mov	r4, r7
 80028ac:	687f      	ldr	r7, [r7, #4]
 80028ae:	e7b6      	b.n	800281e <_malloc_r+0x4a>
 80028b0:	461a      	mov	r2, r3
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	42a3      	cmp	r3, r4
 80028b6:	d1fb      	bne.n	80028b0 <_malloc_r+0xdc>
 80028b8:	2300      	movs	r3, #0
 80028ba:	6053      	str	r3, [r2, #4]
 80028bc:	e7de      	b.n	800287c <_malloc_r+0xa8>
 80028be:	230c      	movs	r3, #12
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	4630      	mov	r0, r6
 80028c4:	f000 f80c 	bl	80028e0 <__malloc_unlock>
 80028c8:	e794      	b.n	80027f4 <_malloc_r+0x20>
 80028ca:	6005      	str	r5, [r0, #0]
 80028cc:	e7d6      	b.n	800287c <_malloc_r+0xa8>
 80028ce:	bf00      	nop
 80028d0:	2000033c 	.word	0x2000033c

080028d4 <__malloc_lock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	@ (80028dc <__malloc_lock+0x8>)
 80028d6:	f7ff bf0e 	b.w	80026f6 <__retarget_lock_acquire_recursive>
 80028da:	bf00      	nop
 80028dc:	20000334 	.word	0x20000334

080028e0 <__malloc_unlock>:
 80028e0:	4801      	ldr	r0, [pc, #4]	@ (80028e8 <__malloc_unlock+0x8>)
 80028e2:	f7ff bf09 	b.w	80026f8 <__retarget_lock_release_recursive>
 80028e6:	bf00      	nop
 80028e8:	20000334 	.word	0x20000334

080028ec <__sfputc_r>:
 80028ec:	6893      	ldr	r3, [r2, #8]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	b410      	push	{r4}
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	da08      	bge.n	800290a <__sfputc_r+0x1e>
 80028f8:	6994      	ldr	r4, [r2, #24]
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	db01      	blt.n	8002902 <__sfputc_r+0x16>
 80028fe:	290a      	cmp	r1, #10
 8002900:	d103      	bne.n	800290a <__sfputc_r+0x1e>
 8002902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002906:	f7ff bde8 	b.w	80024da <__swbuf_r>
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	1c58      	adds	r0, r3, #1
 800290e:	6010      	str	r0, [r2, #0]
 8002910:	7019      	strb	r1, [r3, #0]
 8002912:	4608      	mov	r0, r1
 8002914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002918:	4770      	bx	lr

0800291a <__sfputs_r>:
 800291a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291c:	4606      	mov	r6, r0
 800291e:	460f      	mov	r7, r1
 8002920:	4614      	mov	r4, r2
 8002922:	18d5      	adds	r5, r2, r3
 8002924:	42ac      	cmp	r4, r5
 8002926:	d101      	bne.n	800292c <__sfputs_r+0x12>
 8002928:	2000      	movs	r0, #0
 800292a:	e007      	b.n	800293c <__sfputs_r+0x22>
 800292c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002930:	463a      	mov	r2, r7
 8002932:	4630      	mov	r0, r6
 8002934:	f7ff ffda 	bl	80028ec <__sfputc_r>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d1f3      	bne.n	8002924 <__sfputs_r+0xa>
 800293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002940 <_vfiprintf_r>:
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	460d      	mov	r5, r1
 8002946:	b09d      	sub	sp, #116	@ 0x74
 8002948:	4614      	mov	r4, r2
 800294a:	4698      	mov	r8, r3
 800294c:	4606      	mov	r6, r0
 800294e:	b118      	cbz	r0, 8002958 <_vfiprintf_r+0x18>
 8002950:	6a03      	ldr	r3, [r0, #32]
 8002952:	b90b      	cbnz	r3, 8002958 <_vfiprintf_r+0x18>
 8002954:	f7ff fcd8 	bl	8002308 <__sinit>
 8002958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800295a:	07d9      	lsls	r1, r3, #31
 800295c:	d405      	bmi.n	800296a <_vfiprintf_r+0x2a>
 800295e:	89ab      	ldrh	r3, [r5, #12]
 8002960:	059a      	lsls	r2, r3, #22
 8002962:	d402      	bmi.n	800296a <_vfiprintf_r+0x2a>
 8002964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002966:	f7ff fec6 	bl	80026f6 <__retarget_lock_acquire_recursive>
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	d501      	bpl.n	8002974 <_vfiprintf_r+0x34>
 8002970:	692b      	ldr	r3, [r5, #16]
 8002972:	b99b      	cbnz	r3, 800299c <_vfiprintf_r+0x5c>
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff fdee 	bl	8002558 <__swsetup_r>
 800297c:	b170      	cbz	r0, 800299c <_vfiprintf_r+0x5c>
 800297e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002980:	07dc      	lsls	r4, r3, #31
 8002982:	d504      	bpl.n	800298e <_vfiprintf_r+0x4e>
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	b01d      	add	sp, #116	@ 0x74
 800298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298e:	89ab      	ldrh	r3, [r5, #12]
 8002990:	0598      	lsls	r0, r3, #22
 8002992:	d4f7      	bmi.n	8002984 <_vfiprintf_r+0x44>
 8002994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002996:	f7ff feaf 	bl	80026f8 <__retarget_lock_release_recursive>
 800299a:	e7f3      	b.n	8002984 <_vfiprintf_r+0x44>
 800299c:	2300      	movs	r3, #0
 800299e:	9309      	str	r3, [sp, #36]	@ 0x24
 80029a0:	2320      	movs	r3, #32
 80029a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029aa:	2330      	movs	r3, #48	@ 0x30
 80029ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002b5c <_vfiprintf_r+0x21c>
 80029b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029b4:	f04f 0901 	mov.w	r9, #1
 80029b8:	4623      	mov	r3, r4
 80029ba:	469a      	mov	sl, r3
 80029bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029c0:	b10a      	cbz	r2, 80029c6 <_vfiprintf_r+0x86>
 80029c2:	2a25      	cmp	r2, #37	@ 0x25
 80029c4:	d1f9      	bne.n	80029ba <_vfiprintf_r+0x7a>
 80029c6:	ebba 0b04 	subs.w	fp, sl, r4
 80029ca:	d00b      	beq.n	80029e4 <_vfiprintf_r+0xa4>
 80029cc:	465b      	mov	r3, fp
 80029ce:	4622      	mov	r2, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	4630      	mov	r0, r6
 80029d4:	f7ff ffa1 	bl	800291a <__sfputs_r>
 80029d8:	3001      	adds	r0, #1
 80029da:	f000 80a7 	beq.w	8002b2c <_vfiprintf_r+0x1ec>
 80029de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029e0:	445a      	add	r2, fp
 80029e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80029e4:	f89a 3000 	ldrb.w	r3, [sl]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 809f 	beq.w	8002b2c <_vfiprintf_r+0x1ec>
 80029ee:	2300      	movs	r3, #0
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029f8:	f10a 0a01 	add.w	sl, sl, #1
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	9307      	str	r3, [sp, #28]
 8002a00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a06:	4654      	mov	r4, sl
 8002a08:	2205      	movs	r2, #5
 8002a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0e:	4853      	ldr	r0, [pc, #332]	@ (8002b5c <_vfiprintf_r+0x21c>)
 8002a10:	f7fd fbe6 	bl	80001e0 <memchr>
 8002a14:	9a04      	ldr	r2, [sp, #16]
 8002a16:	b9d8      	cbnz	r0, 8002a50 <_vfiprintf_r+0x110>
 8002a18:	06d1      	lsls	r1, r2, #27
 8002a1a:	bf44      	itt	mi
 8002a1c:	2320      	movmi	r3, #32
 8002a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a22:	0713      	lsls	r3, r2, #28
 8002a24:	bf44      	itt	mi
 8002a26:	232b      	movmi	r3, #43	@ 0x2b
 8002a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a32:	d015      	beq.n	8002a60 <_vfiprintf_r+0x120>
 8002a34:	9a07      	ldr	r2, [sp, #28]
 8002a36:	4654      	mov	r4, sl
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f04f 0c0a 	mov.w	ip, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a44:	3b30      	subs	r3, #48	@ 0x30
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	d94b      	bls.n	8002ae2 <_vfiprintf_r+0x1a2>
 8002a4a:	b1b0      	cbz	r0, 8002a7a <_vfiprintf_r+0x13a>
 8002a4c:	9207      	str	r2, [sp, #28]
 8002a4e:	e014      	b.n	8002a7a <_vfiprintf_r+0x13a>
 8002a50:	eba0 0308 	sub.w	r3, r0, r8
 8002a54:	fa09 f303 	lsl.w	r3, r9, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	9304      	str	r3, [sp, #16]
 8002a5c:	46a2      	mov	sl, r4
 8002a5e:	e7d2      	b.n	8002a06 <_vfiprintf_r+0xc6>
 8002a60:	9b03      	ldr	r3, [sp, #12]
 8002a62:	1d19      	adds	r1, r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	9103      	str	r1, [sp, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bfbb      	ittet	lt
 8002a6c:	425b      	neglt	r3, r3
 8002a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a72:	9307      	strge	r3, [sp, #28]
 8002a74:	9307      	strlt	r3, [sp, #28]
 8002a76:	bfb8      	it	lt
 8002a78:	9204      	strlt	r2, [sp, #16]
 8002a7a:	7823      	ldrb	r3, [r4, #0]
 8002a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a7e:	d10a      	bne.n	8002a96 <_vfiprintf_r+0x156>
 8002a80:	7863      	ldrb	r3, [r4, #1]
 8002a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a84:	d132      	bne.n	8002aec <_vfiprintf_r+0x1ac>
 8002a86:	9b03      	ldr	r3, [sp, #12]
 8002a88:	1d1a      	adds	r2, r3, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	9203      	str	r2, [sp, #12]
 8002a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a92:	3402      	adds	r4, #2
 8002a94:	9305      	str	r3, [sp, #20]
 8002a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002b6c <_vfiprintf_r+0x22c>
 8002a9a:	7821      	ldrb	r1, [r4, #0]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4650      	mov	r0, sl
 8002aa0:	f7fd fb9e 	bl	80001e0 <memchr>
 8002aa4:	b138      	cbz	r0, 8002ab6 <_vfiprintf_r+0x176>
 8002aa6:	9b04      	ldr	r3, [sp, #16]
 8002aa8:	eba0 000a 	sub.w	r0, r0, sl
 8002aac:	2240      	movs	r2, #64	@ 0x40
 8002aae:	4082      	lsls	r2, r0
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	3401      	adds	r4, #1
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aba:	4829      	ldr	r0, [pc, #164]	@ (8002b60 <_vfiprintf_r+0x220>)
 8002abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	f7fd fb8d 	bl	80001e0 <memchr>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d03f      	beq.n	8002b4a <_vfiprintf_r+0x20a>
 8002aca:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <_vfiprintf_r+0x224>)
 8002acc:	bb1b      	cbnz	r3, 8002b16 <_vfiprintf_r+0x1d6>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002adc:	443b      	add	r3, r7
 8002ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ae0:	e76a      	b.n	80029b8 <_vfiprintf_r+0x78>
 8002ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e7a8      	b.n	8002a3e <_vfiprintf_r+0xfe>
 8002aec:	2300      	movs	r3, #0
 8002aee:	3401      	adds	r4, #1
 8002af0:	9305      	str	r3, [sp, #20]
 8002af2:	4619      	mov	r1, r3
 8002af4:	f04f 0c0a 	mov.w	ip, #10
 8002af8:	4620      	mov	r0, r4
 8002afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002afe:	3a30      	subs	r2, #48	@ 0x30
 8002b00:	2a09      	cmp	r2, #9
 8002b02:	d903      	bls.n	8002b0c <_vfiprintf_r+0x1cc>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0c6      	beq.n	8002a96 <_vfiprintf_r+0x156>
 8002b08:	9105      	str	r1, [sp, #20]
 8002b0a:	e7c4      	b.n	8002a96 <_vfiprintf_r+0x156>
 8002b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b10:	4604      	mov	r4, r0
 8002b12:	2301      	movs	r3, #1
 8002b14:	e7f0      	b.n	8002af8 <_vfiprintf_r+0x1b8>
 8002b16:	ab03      	add	r3, sp, #12
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	462a      	mov	r2, r5
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <_vfiprintf_r+0x228>)
 8002b1e:	a904      	add	r1, sp, #16
 8002b20:	4630      	mov	r0, r6
 8002b22:	f3af 8000 	nop.w
 8002b26:	4607      	mov	r7, r0
 8002b28:	1c78      	adds	r0, r7, #1
 8002b2a:	d1d6      	bne.n	8002ada <_vfiprintf_r+0x19a>
 8002b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b2e:	07d9      	lsls	r1, r3, #31
 8002b30:	d405      	bmi.n	8002b3e <_vfiprintf_r+0x1fe>
 8002b32:	89ab      	ldrh	r3, [r5, #12]
 8002b34:	059a      	lsls	r2, r3, #22
 8002b36:	d402      	bmi.n	8002b3e <_vfiprintf_r+0x1fe>
 8002b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b3a:	f7ff fddd 	bl	80026f8 <__retarget_lock_release_recursive>
 8002b3e:	89ab      	ldrh	r3, [r5, #12]
 8002b40:	065b      	lsls	r3, r3, #25
 8002b42:	f53f af1f 	bmi.w	8002984 <_vfiprintf_r+0x44>
 8002b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b48:	e71e      	b.n	8002988 <_vfiprintf_r+0x48>
 8002b4a:	ab03      	add	r3, sp, #12
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	462a      	mov	r2, r5
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <_vfiprintf_r+0x228>)
 8002b52:	a904      	add	r1, sp, #16
 8002b54:	4630      	mov	r0, r6
 8002b56:	f000 f879 	bl	8002c4c <_printf_i>
 8002b5a:	e7e4      	b.n	8002b26 <_vfiprintf_r+0x1e6>
 8002b5c:	0800316c 	.word	0x0800316c
 8002b60:	08003176 	.word	0x08003176
 8002b64:	00000000 	.word	0x00000000
 8002b68:	0800291b 	.word	0x0800291b
 8002b6c:	08003172 	.word	0x08003172

08002b70 <_printf_common>:
 8002b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b74:	4616      	mov	r6, r2
 8002b76:	4698      	mov	r8, r3
 8002b78:	688a      	ldr	r2, [r1, #8]
 8002b7a:	690b      	ldr	r3, [r1, #16]
 8002b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b80:	4293      	cmp	r3, r2
 8002b82:	bfb8      	it	lt
 8002b84:	4613      	movlt	r3, r2
 8002b86:	6033      	str	r3, [r6, #0]
 8002b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	b10a      	cbz	r2, 8002b96 <_printf_common+0x26>
 8002b92:	3301      	adds	r3, #1
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	0699      	lsls	r1, r3, #26
 8002b9a:	bf42      	ittt	mi
 8002b9c:	6833      	ldrmi	r3, [r6, #0]
 8002b9e:	3302      	addmi	r3, #2
 8002ba0:	6033      	strmi	r3, [r6, #0]
 8002ba2:	6825      	ldr	r5, [r4, #0]
 8002ba4:	f015 0506 	ands.w	r5, r5, #6
 8002ba8:	d106      	bne.n	8002bb8 <_printf_common+0x48>
 8002baa:	f104 0a19 	add.w	sl, r4, #25
 8002bae:	68e3      	ldr	r3, [r4, #12]
 8002bb0:	6832      	ldr	r2, [r6, #0]
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	42ab      	cmp	r3, r5
 8002bb6:	dc26      	bgt.n	8002c06 <_printf_common+0x96>
 8002bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	3b00      	subs	r3, #0
 8002bc0:	bf18      	it	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	0692      	lsls	r2, r2, #26
 8002bc6:	d42b      	bmi.n	8002c20 <_printf_common+0xb0>
 8002bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bcc:	4641      	mov	r1, r8
 8002bce:	4638      	mov	r0, r7
 8002bd0:	47c8      	blx	r9
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d01e      	beq.n	8002c14 <_printf_common+0xa4>
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	6922      	ldr	r2, [r4, #16]
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf02      	ittt	eq
 8002be2:	68e5      	ldreq	r5, [r4, #12]
 8002be4:	6833      	ldreq	r3, [r6, #0]
 8002be6:	1aed      	subeq	r5, r5, r3
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	bf0c      	ite	eq
 8002bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bf0:	2500      	movne	r5, #0
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	bfc4      	itt	gt
 8002bf6:	1a9b      	subgt	r3, r3, r2
 8002bf8:	18ed      	addgt	r5, r5, r3
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	341a      	adds	r4, #26
 8002bfe:	42b5      	cmp	r5, r6
 8002c00:	d11a      	bne.n	8002c38 <_printf_common+0xc8>
 8002c02:	2000      	movs	r0, #0
 8002c04:	e008      	b.n	8002c18 <_printf_common+0xa8>
 8002c06:	2301      	movs	r3, #1
 8002c08:	4652      	mov	r2, sl
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	47c8      	blx	r9
 8002c10:	3001      	adds	r0, #1
 8002c12:	d103      	bne.n	8002c1c <_printf_common+0xac>
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1c:	3501      	adds	r5, #1
 8002c1e:	e7c6      	b.n	8002bae <_printf_common+0x3e>
 8002c20:	18e1      	adds	r1, r4, r3
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	2030      	movs	r0, #48	@ 0x30
 8002c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c2a:	4422      	add	r2, r4
 8002c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c34:	3302      	adds	r3, #2
 8002c36:	e7c7      	b.n	8002bc8 <_printf_common+0x58>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	4638      	mov	r0, r7
 8002c40:	47c8      	blx	r9
 8002c42:	3001      	adds	r0, #1
 8002c44:	d0e6      	beq.n	8002c14 <_printf_common+0xa4>
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7d9      	b.n	8002bfe <_printf_common+0x8e>
	...

08002c4c <_printf_i>:
 8002c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c50:	7e0f      	ldrb	r7, [r1, #24]
 8002c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c54:	2f78      	cmp	r7, #120	@ 0x78
 8002c56:	4691      	mov	r9, r2
 8002c58:	4680      	mov	r8, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	469a      	mov	sl, r3
 8002c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c62:	d807      	bhi.n	8002c74 <_printf_i+0x28>
 8002c64:	2f62      	cmp	r7, #98	@ 0x62
 8002c66:	d80a      	bhi.n	8002c7e <_printf_i+0x32>
 8002c68:	2f00      	cmp	r7, #0
 8002c6a:	f000 80d1 	beq.w	8002e10 <_printf_i+0x1c4>
 8002c6e:	2f58      	cmp	r7, #88	@ 0x58
 8002c70:	f000 80b8 	beq.w	8002de4 <_printf_i+0x198>
 8002c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c7c:	e03a      	b.n	8002cf4 <_printf_i+0xa8>
 8002c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c82:	2b15      	cmp	r3, #21
 8002c84:	d8f6      	bhi.n	8002c74 <_printf_i+0x28>
 8002c86:	a101      	add	r1, pc, #4	@ (adr r1, 8002c8c <_printf_i+0x40>)
 8002c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c8c:	08002ce5 	.word	0x08002ce5
 8002c90:	08002cf9 	.word	0x08002cf9
 8002c94:	08002c75 	.word	0x08002c75
 8002c98:	08002c75 	.word	0x08002c75
 8002c9c:	08002c75 	.word	0x08002c75
 8002ca0:	08002c75 	.word	0x08002c75
 8002ca4:	08002cf9 	.word	0x08002cf9
 8002ca8:	08002c75 	.word	0x08002c75
 8002cac:	08002c75 	.word	0x08002c75
 8002cb0:	08002c75 	.word	0x08002c75
 8002cb4:	08002c75 	.word	0x08002c75
 8002cb8:	08002df7 	.word	0x08002df7
 8002cbc:	08002d23 	.word	0x08002d23
 8002cc0:	08002db1 	.word	0x08002db1
 8002cc4:	08002c75 	.word	0x08002c75
 8002cc8:	08002c75 	.word	0x08002c75
 8002ccc:	08002e19 	.word	0x08002e19
 8002cd0:	08002c75 	.word	0x08002c75
 8002cd4:	08002d23 	.word	0x08002d23
 8002cd8:	08002c75 	.word	0x08002c75
 8002cdc:	08002c75 	.word	0x08002c75
 8002ce0:	08002db9 	.word	0x08002db9
 8002ce4:	6833      	ldr	r3, [r6, #0]
 8002ce6:	1d1a      	adds	r2, r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6032      	str	r2, [r6, #0]
 8002cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e09c      	b.n	8002e32 <_printf_i+0x1e6>
 8002cf8:	6833      	ldr	r3, [r6, #0]
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	1d19      	adds	r1, r3, #4
 8002cfe:	6031      	str	r1, [r6, #0]
 8002d00:	0606      	lsls	r6, r0, #24
 8002d02:	d501      	bpl.n	8002d08 <_printf_i+0xbc>
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	e003      	b.n	8002d10 <_printf_i+0xc4>
 8002d08:	0645      	lsls	r5, r0, #25
 8002d0a:	d5fb      	bpl.n	8002d04 <_printf_i+0xb8>
 8002d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	da03      	bge.n	8002d1c <_printf_i+0xd0>
 8002d14:	232d      	movs	r3, #45	@ 0x2d
 8002d16:	426d      	negs	r5, r5
 8002d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d1c:	4858      	ldr	r0, [pc, #352]	@ (8002e80 <_printf_i+0x234>)
 8002d1e:	230a      	movs	r3, #10
 8002d20:	e011      	b.n	8002d46 <_printf_i+0xfa>
 8002d22:	6821      	ldr	r1, [r4, #0]
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	0608      	lsls	r0, r1, #24
 8002d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d2c:	d402      	bmi.n	8002d34 <_printf_i+0xe8>
 8002d2e:	0649      	lsls	r1, r1, #25
 8002d30:	bf48      	it	mi
 8002d32:	b2ad      	uxthmi	r5, r5
 8002d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d36:	4852      	ldr	r0, [pc, #328]	@ (8002e80 <_printf_i+0x234>)
 8002d38:	6033      	str	r3, [r6, #0]
 8002d3a:	bf14      	ite	ne
 8002d3c:	230a      	movne	r3, #10
 8002d3e:	2308      	moveq	r3, #8
 8002d40:	2100      	movs	r1, #0
 8002d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d46:	6866      	ldr	r6, [r4, #4]
 8002d48:	60a6      	str	r6, [r4, #8]
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	db05      	blt.n	8002d5a <_printf_i+0x10e>
 8002d4e:	6821      	ldr	r1, [r4, #0]
 8002d50:	432e      	orrs	r6, r5
 8002d52:	f021 0104 	bic.w	r1, r1, #4
 8002d56:	6021      	str	r1, [r4, #0]
 8002d58:	d04b      	beq.n	8002df2 <_printf_i+0x1a6>
 8002d5a:	4616      	mov	r6, r2
 8002d5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d60:	fb03 5711 	mls	r7, r3, r1, r5
 8002d64:	5dc7      	ldrb	r7, [r0, r7]
 8002d66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d6a:	462f      	mov	r7, r5
 8002d6c:	42bb      	cmp	r3, r7
 8002d6e:	460d      	mov	r5, r1
 8002d70:	d9f4      	bls.n	8002d5c <_printf_i+0x110>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d10b      	bne.n	8002d8e <_printf_i+0x142>
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	07df      	lsls	r7, r3, #31
 8002d7a:	d508      	bpl.n	8002d8e <_printf_i+0x142>
 8002d7c:	6923      	ldr	r3, [r4, #16]
 8002d7e:	6861      	ldr	r1, [r4, #4]
 8002d80:	4299      	cmp	r1, r3
 8002d82:	bfde      	ittt	le
 8002d84:	2330      	movle	r3, #48	@ 0x30
 8002d86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d8e:	1b92      	subs	r2, r2, r6
 8002d90:	6122      	str	r2, [r4, #16]
 8002d92:	f8cd a000 	str.w	sl, [sp]
 8002d96:	464b      	mov	r3, r9
 8002d98:	aa03      	add	r2, sp, #12
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4640      	mov	r0, r8
 8002d9e:	f7ff fee7 	bl	8002b70 <_printf_common>
 8002da2:	3001      	adds	r0, #1
 8002da4:	d14a      	bne.n	8002e3c <_printf_i+0x1f0>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	b004      	add	sp, #16
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	f043 0320 	orr.w	r3, r3, #32
 8002db6:	6023      	str	r3, [r4, #0]
 8002db8:	4832      	ldr	r0, [pc, #200]	@ (8002e84 <_printf_i+0x238>)
 8002dba:	2778      	movs	r7, #120	@ 0x78
 8002dbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	6831      	ldr	r1, [r6, #0]
 8002dc4:	061f      	lsls	r7, r3, #24
 8002dc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dca:	d402      	bmi.n	8002dd2 <_printf_i+0x186>
 8002dcc:	065f      	lsls	r7, r3, #25
 8002dce:	bf48      	it	mi
 8002dd0:	b2ad      	uxthmi	r5, r5
 8002dd2:	6031      	str	r1, [r6, #0]
 8002dd4:	07d9      	lsls	r1, r3, #31
 8002dd6:	bf44      	itt	mi
 8002dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ddc:	6023      	strmi	r3, [r4, #0]
 8002dde:	b11d      	cbz	r5, 8002de8 <_printf_i+0x19c>
 8002de0:	2310      	movs	r3, #16
 8002de2:	e7ad      	b.n	8002d40 <_printf_i+0xf4>
 8002de4:	4826      	ldr	r0, [pc, #152]	@ (8002e80 <_printf_i+0x234>)
 8002de6:	e7e9      	b.n	8002dbc <_printf_i+0x170>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	f023 0320 	bic.w	r3, r3, #32
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	e7f6      	b.n	8002de0 <_printf_i+0x194>
 8002df2:	4616      	mov	r6, r2
 8002df4:	e7bd      	b.n	8002d72 <_printf_i+0x126>
 8002df6:	6833      	ldr	r3, [r6, #0]
 8002df8:	6825      	ldr	r5, [r4, #0]
 8002dfa:	6961      	ldr	r1, [r4, #20]
 8002dfc:	1d18      	adds	r0, r3, #4
 8002dfe:	6030      	str	r0, [r6, #0]
 8002e00:	062e      	lsls	r6, r5, #24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	d501      	bpl.n	8002e0a <_printf_i+0x1be>
 8002e06:	6019      	str	r1, [r3, #0]
 8002e08:	e002      	b.n	8002e10 <_printf_i+0x1c4>
 8002e0a:	0668      	lsls	r0, r5, #25
 8002e0c:	d5fb      	bpl.n	8002e06 <_printf_i+0x1ba>
 8002e0e:	8019      	strh	r1, [r3, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	6123      	str	r3, [r4, #16]
 8002e14:	4616      	mov	r6, r2
 8002e16:	e7bc      	b.n	8002d92 <_printf_i+0x146>
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	6032      	str	r2, [r6, #0]
 8002e1e:	681e      	ldr	r6, [r3, #0]
 8002e20:	6862      	ldr	r2, [r4, #4]
 8002e22:	2100      	movs	r1, #0
 8002e24:	4630      	mov	r0, r6
 8002e26:	f7fd f9db 	bl	80001e0 <memchr>
 8002e2a:	b108      	cbz	r0, 8002e30 <_printf_i+0x1e4>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	6123      	str	r3, [r4, #16]
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e3a:	e7aa      	b.n	8002d92 <_printf_i+0x146>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	4632      	mov	r2, r6
 8002e40:	4649      	mov	r1, r9
 8002e42:	4640      	mov	r0, r8
 8002e44:	47d0      	blx	sl
 8002e46:	3001      	adds	r0, #1
 8002e48:	d0ad      	beq.n	8002da6 <_printf_i+0x15a>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	079b      	lsls	r3, r3, #30
 8002e4e:	d413      	bmi.n	8002e78 <_printf_i+0x22c>
 8002e50:	68e0      	ldr	r0, [r4, #12]
 8002e52:	9b03      	ldr	r3, [sp, #12]
 8002e54:	4298      	cmp	r0, r3
 8002e56:	bfb8      	it	lt
 8002e58:	4618      	movlt	r0, r3
 8002e5a:	e7a6      	b.n	8002daa <_printf_i+0x15e>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4632      	mov	r2, r6
 8002e60:	4649      	mov	r1, r9
 8002e62:	4640      	mov	r0, r8
 8002e64:	47d0      	blx	sl
 8002e66:	3001      	adds	r0, #1
 8002e68:	d09d      	beq.n	8002da6 <_printf_i+0x15a>
 8002e6a:	3501      	adds	r5, #1
 8002e6c:	68e3      	ldr	r3, [r4, #12]
 8002e6e:	9903      	ldr	r1, [sp, #12]
 8002e70:	1a5b      	subs	r3, r3, r1
 8002e72:	42ab      	cmp	r3, r5
 8002e74:	dcf2      	bgt.n	8002e5c <_printf_i+0x210>
 8002e76:	e7eb      	b.n	8002e50 <_printf_i+0x204>
 8002e78:	2500      	movs	r5, #0
 8002e7a:	f104 0619 	add.w	r6, r4, #25
 8002e7e:	e7f5      	b.n	8002e6c <_printf_i+0x220>
 8002e80:	0800317d 	.word	0x0800317d
 8002e84:	0800318e 	.word	0x0800318e

08002e88 <__sflush_r>:
 8002e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e90:	0716      	lsls	r6, r2, #28
 8002e92:	4605      	mov	r5, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	d454      	bmi.n	8002f42 <__sflush_r+0xba>
 8002e98:	684b      	ldr	r3, [r1, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	dc02      	bgt.n	8002ea4 <__sflush_r+0x1c>
 8002e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dd48      	ble.n	8002f36 <__sflush_r+0xae>
 8002ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ea6:	2e00      	cmp	r6, #0
 8002ea8:	d045      	beq.n	8002f36 <__sflush_r+0xae>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002eb0:	682f      	ldr	r7, [r5, #0]
 8002eb2:	6a21      	ldr	r1, [r4, #32]
 8002eb4:	602b      	str	r3, [r5, #0]
 8002eb6:	d030      	beq.n	8002f1a <__sflush_r+0x92>
 8002eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	0759      	lsls	r1, r3, #29
 8002ebe:	d505      	bpl.n	8002ecc <__sflush_r+0x44>
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ec6:	b10b      	cbz	r3, 8002ecc <__sflush_r+0x44>
 8002ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ed0:	6a21      	ldr	r1, [r4, #32]
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	47b0      	blx	r6
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	d106      	bne.n	8002eea <__sflush_r+0x62>
 8002edc:	6829      	ldr	r1, [r5, #0]
 8002ede:	291d      	cmp	r1, #29
 8002ee0:	d82b      	bhi.n	8002f3a <__sflush_r+0xb2>
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <__sflush_r+0x104>)
 8002ee4:	40ca      	lsrs	r2, r1
 8002ee6:	07d6      	lsls	r6, r2, #31
 8002ee8:	d527      	bpl.n	8002f3a <__sflush_r+0xb2>
 8002eea:	2200      	movs	r2, #0
 8002eec:	6062      	str	r2, [r4, #4]
 8002eee:	04d9      	lsls	r1, r3, #19
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	6022      	str	r2, [r4, #0]
 8002ef4:	d504      	bpl.n	8002f00 <__sflush_r+0x78>
 8002ef6:	1c42      	adds	r2, r0, #1
 8002ef8:	d101      	bne.n	8002efe <__sflush_r+0x76>
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	b903      	cbnz	r3, 8002f00 <__sflush_r+0x78>
 8002efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f02:	602f      	str	r7, [r5, #0]
 8002f04:	b1b9      	cbz	r1, 8002f36 <__sflush_r+0xae>
 8002f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f0a:	4299      	cmp	r1, r3
 8002f0c:	d002      	beq.n	8002f14 <__sflush_r+0x8c>
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f7ff fbf4 	bl	80026fc <_free_r>
 8002f14:	2300      	movs	r3, #0
 8002f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f18:	e00d      	b.n	8002f36 <__sflush_r+0xae>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b0      	blx	r6
 8002f20:	4602      	mov	r2, r0
 8002f22:	1c50      	adds	r0, r2, #1
 8002f24:	d1c9      	bne.n	8002eba <__sflush_r+0x32>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0c6      	beq.n	8002eba <__sflush_r+0x32>
 8002f2c:	2b1d      	cmp	r3, #29
 8002f2e:	d001      	beq.n	8002f34 <__sflush_r+0xac>
 8002f30:	2b16      	cmp	r3, #22
 8002f32:	d11e      	bne.n	8002f72 <__sflush_r+0xea>
 8002f34:	602f      	str	r7, [r5, #0]
 8002f36:	2000      	movs	r0, #0
 8002f38:	e022      	b.n	8002f80 <__sflush_r+0xf8>
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	e01b      	b.n	8002f7a <__sflush_r+0xf2>
 8002f42:	690f      	ldr	r7, [r1, #16]
 8002f44:	2f00      	cmp	r7, #0
 8002f46:	d0f6      	beq.n	8002f36 <__sflush_r+0xae>
 8002f48:	0793      	lsls	r3, r2, #30
 8002f4a:	680e      	ldr	r6, [r1, #0]
 8002f4c:	bf08      	it	eq
 8002f4e:	694b      	ldreq	r3, [r1, #20]
 8002f50:	600f      	str	r7, [r1, #0]
 8002f52:	bf18      	it	ne
 8002f54:	2300      	movne	r3, #0
 8002f56:	eba6 0807 	sub.w	r8, r6, r7
 8002f5a:	608b      	str	r3, [r1, #8]
 8002f5c:	f1b8 0f00 	cmp.w	r8, #0
 8002f60:	dde9      	ble.n	8002f36 <__sflush_r+0xae>
 8002f62:	6a21      	ldr	r1, [r4, #32]
 8002f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002f66:	4643      	mov	r3, r8
 8002f68:	463a      	mov	r2, r7
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	47b0      	blx	r6
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	dc08      	bgt.n	8002f84 <__sflush_r+0xfc>
 8002f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f84:	4407      	add	r7, r0
 8002f86:	eba8 0800 	sub.w	r8, r8, r0
 8002f8a:	e7e7      	b.n	8002f5c <__sflush_r+0xd4>
 8002f8c:	20400001 	.word	0x20400001

08002f90 <_fflush_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	690b      	ldr	r3, [r1, #16]
 8002f94:	4605      	mov	r5, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	b913      	cbnz	r3, 8002fa0 <_fflush_r+0x10>
 8002f9a:	2500      	movs	r5, #0
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	b118      	cbz	r0, 8002faa <_fflush_r+0x1a>
 8002fa2:	6a03      	ldr	r3, [r0, #32]
 8002fa4:	b90b      	cbnz	r3, 8002faa <_fflush_r+0x1a>
 8002fa6:	f7ff f9af 	bl	8002308 <__sinit>
 8002faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f3      	beq.n	8002f9a <_fflush_r+0xa>
 8002fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fb4:	07d0      	lsls	r0, r2, #31
 8002fb6:	d404      	bmi.n	8002fc2 <_fflush_r+0x32>
 8002fb8:	0599      	lsls	r1, r3, #22
 8002fba:	d402      	bmi.n	8002fc2 <_fflush_r+0x32>
 8002fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fbe:	f7ff fb9a 	bl	80026f6 <__retarget_lock_acquire_recursive>
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	f7ff ff5f 	bl	8002e88 <__sflush_r>
 8002fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fcc:	07da      	lsls	r2, r3, #31
 8002fce:	4605      	mov	r5, r0
 8002fd0:	d4e4      	bmi.n	8002f9c <_fflush_r+0xc>
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	059b      	lsls	r3, r3, #22
 8002fd6:	d4e1      	bmi.n	8002f9c <_fflush_r+0xc>
 8002fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fda:	f7ff fb8d 	bl	80026f8 <__retarget_lock_release_recursive>
 8002fde:	e7dd      	b.n	8002f9c <_fflush_r+0xc>

08002fe0 <__swhatbuf_r>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	b096      	sub	sp, #88	@ 0x58
 8002fec:	4615      	mov	r5, r2
 8002fee:	461e      	mov	r6, r3
 8002ff0:	da0d      	bge.n	800300e <__swhatbuf_r+0x2e>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2340      	movne	r3, #64	@ 0x40
 8003000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003004:	2000      	movs	r0, #0
 8003006:	6031      	str	r1, [r6, #0]
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	b016      	add	sp, #88	@ 0x58
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	466a      	mov	r2, sp
 8003010:	f000 f848 	bl	80030a4 <_fstat_r>
 8003014:	2800      	cmp	r0, #0
 8003016:	dbec      	blt.n	8002ff2 <__swhatbuf_r+0x12>
 8003018:	9901      	ldr	r1, [sp, #4]
 800301a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800301e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003022:	4259      	negs	r1, r3
 8003024:	4159      	adcs	r1, r3
 8003026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800302a:	e7eb      	b.n	8003004 <__swhatbuf_r+0x24>

0800302c <__smakebuf_r>:
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003030:	079d      	lsls	r5, r3, #30
 8003032:	4606      	mov	r6, r0
 8003034:	460c      	mov	r4, r1
 8003036:	d507      	bpl.n	8003048 <__smakebuf_r+0x1c>
 8003038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	2301      	movs	r3, #1
 8003042:	6163      	str	r3, [r4, #20]
 8003044:	b003      	add	sp, #12
 8003046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003048:	ab01      	add	r3, sp, #4
 800304a:	466a      	mov	r2, sp
 800304c:	f7ff ffc8 	bl	8002fe0 <__swhatbuf_r>
 8003050:	9f00      	ldr	r7, [sp, #0]
 8003052:	4605      	mov	r5, r0
 8003054:	4639      	mov	r1, r7
 8003056:	4630      	mov	r0, r6
 8003058:	f7ff fbbc 	bl	80027d4 <_malloc_r>
 800305c:	b948      	cbnz	r0, 8003072 <__smakebuf_r+0x46>
 800305e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003062:	059a      	lsls	r2, r3, #22
 8003064:	d4ee      	bmi.n	8003044 <__smakebuf_r+0x18>
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	81a3      	strh	r3, [r4, #12]
 8003070:	e7e2      	b.n	8003038 <__smakebuf_r+0xc>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	6020      	str	r0, [r4, #0]
 8003076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003082:	b15b      	cbz	r3, 800309c <__smakebuf_r+0x70>
 8003084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003088:	4630      	mov	r0, r6
 800308a:	f000 f81d 	bl	80030c8 <_isatty_r>
 800308e:	b128      	cbz	r0, 800309c <__smakebuf_r+0x70>
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	431d      	orrs	r5, r3
 80030a0:	81a5      	strh	r5, [r4, #12]
 80030a2:	e7cf      	b.n	8003044 <__smakebuf_r+0x18>

080030a4 <_fstat_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4d07      	ldr	r5, [pc, #28]	@ (80030c4 <_fstat_r+0x20>)
 80030a8:	2300      	movs	r3, #0
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	f7fd fe57 	bl	8000d64 <_fstat>
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	d102      	bne.n	80030c0 <_fstat_r+0x1c>
 80030ba:	682b      	ldr	r3, [r5, #0]
 80030bc:	b103      	cbz	r3, 80030c0 <_fstat_r+0x1c>
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	20000330 	.word	0x20000330

080030c8 <_isatty_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4d06      	ldr	r5, [pc, #24]	@ (80030e4 <_isatty_r+0x1c>)
 80030cc:	2300      	movs	r3, #0
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7fd fe4b 	bl	8000d6e <_isatty>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_isatty_r+0x1a>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_isatty_r+0x1a>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000330 	.word	0x20000330

080030e8 <_sbrk_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4d06      	ldr	r5, [pc, #24]	@ (8003104 <_sbrk_r+0x1c>)
 80030ec:	2300      	movs	r3, #0
 80030ee:	4604      	mov	r4, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	f7fd fe40 	bl	8000d78 <_sbrk>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d102      	bne.n	8003102 <_sbrk_r+0x1a>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	b103      	cbz	r3, 8003102 <_sbrk_r+0x1a>
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	20000330 	.word	0x20000330

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

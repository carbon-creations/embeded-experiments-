
BlackPill_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004440  08004440  00005440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c8  080044c8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080044d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08004538  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004538  00006340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3dc  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b64  00000000  00000000  00012474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00013fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ef1  00000000  00000000  00015611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d830  00000000  00000000  0002c502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f205  00000000  00000000  00039d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  000c8f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ccbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004428 	.word	0x08004428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004428 	.word	0x08004428

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d002      	beq.n	80005c4 <_write+0x18>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d111      	bne.n	80005e8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <_write+0x48>)
 80005d0:	f002 fbe2 	bl	8002d98 <HAL_UART_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <_write+0x36>
      return len;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	e004      	b.n	80005ec <_write+0x40>
    else
      return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e001      	b.n	80005ec <_write+0x40>
  }
  return -1;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200001a4 	.word	0x200001a4

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fdc3 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f851 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 facd 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800060a:	f000 faa1 	bl	8000b50 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800060e:	f000 fa27 	bl	8000a60 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000612:	f000 f8b3 	bl	800077c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000616:	f000 f953 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800061a:	f000 f9c7 	bl	80009ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\n\n\n\nStarting Timer Now \n");
 800061e:	481a      	ldr	r0, [pc, #104]	@ (8000688 <main+0x90>)
 8000620:	f003 f8a0 	bl	8003764 <puts>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	4819      	ldr	r0, [pc, #100]	@ (800068c <main+0x94>)
 8000628:	f001 fd9a 	bl	8002160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062c:	2100      	movs	r1, #0
 800062e:	4818      	ldr	r0, [pc, #96]	@ (8000690 <main+0x98>)
 8000630:	f001 fd96 	bl	8002160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000634:	2100      	movs	r1, #0
 8000636:	4817      	ldr	r0, [pc, #92]	@ (8000694 <main+0x9c>)
 8000638:	f001 fd92 	bl	8002160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0xa0>)
 8000640:	f001 fd8e 	bl	8002160 <HAL_TIM_PWM_Start>
  uint32_t now = 0, next_tick = 500, loop_count = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 now = uwTick;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <main+0xa4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	607b      	str	r3, [r7, #4]

	 if (now >= next_tick) {
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	429a      	cmp	r2, r3
 800065e:	d30f      	bcc.n	8000680 <main+0x88>

		 printf("tick %lu (loop = %lu)\n", now / 1000, loop_count);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <main+0xa8>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	099b      	lsrs	r3, r3, #6
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <main+0xac>)
 8000670:	f003 f810 	bl	8003694 <iprintf>

		 loop_count = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
		 next_tick = now +500;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800067e:	60fb      	str	r3, [r7, #12]

	 }

	 ++loop_count;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	3301      	adds	r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
	 now = uwTick;
 8000686:	e7e4      	b.n	8000652 <main+0x5a>
 8000688:	08004440 	.word	0x08004440
 800068c:	2000015c 	.word	0x2000015c
 8000690:	20000084 	.word	0x20000084
 8000694:	200000cc 	.word	0x200000cc
 8000698:	20000114 	.word	0x20000114
 800069c:	200001f0 	.word	0x200001f0
 80006a0:	10624dd3 	.word	0x10624dd3
 80006a4:	0800445c 	.word	0x0800445c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f934 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <SystemClock_Config+0xd0>)
 80006f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800071c:	2319      	movs	r3, #25
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000720:	23a8      	movs	r3, #168	@ 0xa8
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f81f 	bl	8001774 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800073c:	f000 faa2 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2102      	movs	r1, #2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fa81 	bl	8001c64 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000768:	f000 fa8c 	bl	8000c84 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	@ 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	@ 0x58
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2220      	movs	r2, #32
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 f8b5 	bl	8003924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ba:	4b3f      	ldr	r3, [pc, #252]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007bc:	4a3f      	ldr	r2, [pc, #252]	@ (80008bc <MX_TIM1_Init+0x140>)
 80007be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007c0:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b3c      	ldr	r3, [pc, #240]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80007cc:	4b3a      	ldr	r3, [pc, #232]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007da:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	4834      	ldr	r0, [pc, #208]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80007e8:	f001 fc1c 	bl	8002024 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007f2:	f000 fa47 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000800:	4619      	mov	r1, r3
 8000802:	482d      	ldr	r0, [pc, #180]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 8000804:	f001 fe1e 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800080e:	f000 fa39 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000812:	4829      	ldr	r0, [pc, #164]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 8000814:	f001 fc55 	bl	80020c2 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800081e:	f000 fa31 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800082e:	4619      	mov	r1, r3
 8000830:	4821      	ldr	r0, [pc, #132]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 8000832:	f002 f9a1 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800083c:	f000 fa22 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	@ 0x60
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 700;
 8000844:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 8000868:	f001 fd2a 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000872:	f000 fa07 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 800089a:	f002 f9db 	bl	8002c54 <HAL_TIMEx_ConfigBreakDeadTime>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008a4:	f000 f9ee 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <MX_TIM1_Init+0x13c>)
 80008aa:	f000 fa87 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 80008ae:	bf00      	nop
 80008b0:	3758      	adds	r7, #88	@ 0x58
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000084 	.word	0x20000084
 80008bc:	40010000 	.word	0x40010000

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	@ 0x38
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f0:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 80008fa:	2253      	movs	r2, #83	@ 0x53
 80008fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000906:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000918:	4823      	ldr	r0, [pc, #140]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 800091a:	f001 fb83 	bl	8002024 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000924:	f000 f9ae 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000932:	4619      	mov	r1, r3
 8000934:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000936:	f001 fd85 	bl	8002444 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000940:	f000 f9a0 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000944:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000946:	f001 fbbc 	bl	80020c2 <HAL_TIM_PWM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000950:	f000 f998 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4619      	mov	r1, r3
 8000962:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 8000964:	f002 f908 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800096e:	f000 f989 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000972:	2360      	movs	r3, #96	@ 0x60
 8000974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8000976:	231e      	movs	r3, #30
 8000978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 800098a:	f001 fc99 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000994:	f000 f976 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <MX_TIM2_Init+0xe8>)
 800099a:	f000 fa0f 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3738      	adds	r7, #56	@ 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000cc 	.word	0x200000cc

080009ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009d0:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <MX_TIM3_Init+0xb0>)
 80009d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009d6:	2253      	movs	r2, #83	@ 0x53
 80009d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <MX_TIM3_Init+0xac>)
 80009f6:	f001 fb64 	bl	80020c2 <HAL_TIM_PWM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f940 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4619      	mov	r1, r3
 8000a12:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_TIM3_Init+0xac>)
 8000a14:	f002 f8b0 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a1e:	f000 f931 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a22:	2360      	movs	r3, #96	@ 0x60
 8000a24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8000a26:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <MX_TIM3_Init+0xac>)
 8000a3c:	f001 fc40 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a46:	f000 f91d 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a4a:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <MX_TIM3_Init+0xac>)
 8000a4c:	f000 f9b6 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	@ 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000114 	.word	0x20000114
 8000a5c:	40000400 	.word	0x40000400

08000a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000a92:	4a2e      	ldr	r2, [pc, #184]	@ (8000b4c <MX_TIM4_Init+0xec>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000a98:	2253      	movs	r2, #83	@ 0x53
 8000a9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000aa4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ab6:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000ab8:	f001 fab4 	bl	8002024 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ac2:	f000 f8df 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481d      	ldr	r0, [pc, #116]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000ad4:	f001 fcb6 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ade:	f000 f8d1 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae2:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000ae4:	f001 faed 	bl	80020c2 <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000aee:	f000 f8c9 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4619      	mov	r1, r3
 8000b00:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000b02:	f002 f839 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000b0c:	f000 f8ba 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	@ 0x60
 8000b12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000b14:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000b2a:	f001 fbc9 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b34:	f000 f8a6 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM4_Init+0xe8>)
 8000b3a:	f000 f93f 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000015c 	.word	0x2000015c
 8000b4c:	40000800 	.word	0x40000800

08000b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_USART1_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b5c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_USART1_UART_Init+0x4c>)
 8000b88:	f002 f8b6 	bl	8002cf8 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 f877 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001a4 	.word	0x200001a4
 8000ba0:	40011000 	.word	0x40011000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a18      	ldr	r2, [pc, #96]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_GPIO_Init+0xd4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <MX_GPIO_Init+0xd8>)
 8000c32:	f000 fd85 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c3c:	2311      	movs	r3, #17
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <MX_GPIO_Init+0xd8>)
 8000c50:	f000 fbf2 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8000c58:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_GPIO_Init+0xdc>)
 8000c6a:	f000 fbe5 	bl	8001438 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10e      	bne.n	8000d10 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d0e:	e026      	b.n	8000d5e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d18:	d10e      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
}
 8000d36:	e012      	b.n	8000d5e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <HAL_TIM_Base_MspInit+0x94>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10d      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40000800 	.word	0x40000800

08000d78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x40>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a09      	ldr	r2, [pc, #36]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x40>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <HAL_TIM_PWM_MspInit+0x40>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40000400 	.word	0x40000400
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a48      	ldr	r2, [pc, #288]	@ (8000efc <HAL_TIM_MspPostInit+0x140>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d11f      	bne.n	8000e1e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b47      	ldr	r3, [pc, #284]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a46      	ldr	r2, [pc, #280]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b44      	ldr	r3, [pc, #272]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	483b      	ldr	r0, [pc, #236]	@ (8000f04 <HAL_TIM_MspPostInit+0x148>)
 8000e18:	f000 fb0e 	bl	8001438 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e1c:	e06a      	b.n	8000ef4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e26:	d11e      	bne.n	8000e66 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	4a33      	ldr	r2, [pc, #204]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e38:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e44:	2320      	movs	r3, #32
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4829      	ldr	r0, [pc, #164]	@ (8000f04 <HAL_TIM_MspPostInit+0x148>)
 8000e60:	f000 faea 	bl	8001438 <HAL_GPIO_Init>
}
 8000e64:	e046      	b.n	8000ef4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	@ (8000f08 <HAL_TIM_MspPostInit+0x14c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d11e      	bne.n	8000eae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e8c:	2340      	movs	r3, #64	@ 0x40
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4817      	ldr	r0, [pc, #92]	@ (8000f04 <HAL_TIM_MspPostInit+0x148>)
 8000ea8:	f000 fac6 	bl	8001438 <HAL_GPIO_Init>
}
 8000eac:	e022      	b.n	8000ef4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <HAL_TIM_MspPostInit+0x150>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d11d      	bne.n	8000ef4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_TIM_MspPostInit+0x144>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <HAL_TIM_MspPostInit+0x154>)
 8000ef0:	f000 faa2 	bl	8001438 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	@ 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	40000800 	.word	0x40000800
 8000f10:	40020400 	.word	0x40020400

08000f14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	@ (8000f98 <HAL_UART_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12c      	bne.n	8000f90 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f8c:	f000 fa54 	bl	8001438 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <NMI_Handler+0x4>

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffa:	f000 f917 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e00a      	b.n	800102a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001014:	f3af 8000 	nop.w
 8001018:	4601      	mov	r1, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	b2ca      	uxtb	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbf0      	blt.n	8001014 <_read+0x12>
  }

  return len;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_close>:
  }
  return len;
}

int _close(int file)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001064:	605a      	str	r2, [r3, #4]
  return 0;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <_isatty>:

int _isatty(int file)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800107c:	2301      	movs	r3, #1
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 fc74 	bl	80039c0 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20010000 	.word	0x20010000
 8001104:	00000400 	.word	0x00000400
 8001108:	200001ec 	.word	0x200001ec
 800110c:	20000340 	.word	0x20000340

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fc33 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fa47 	bl	80005f8 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001178:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 800117c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001180:	20000340 	.word	0x20000340

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f90d 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fd68 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f917 	bl	800141e <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f8ed 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20000008 	.word	0x20000008
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	200001f0 	.word	0x200001f0

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200001f0 	.word	0x200001f0

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff47 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff5c 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb0 	bl	800138c <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e159      	b.n	8001708 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8148 	bne.w	8001702 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d005      	beq.n	800148a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	2b02      	cmp	r3, #2
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d017      	beq.n	8001528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a2 	beq.w	8001702 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b57      	ldr	r3, [pc, #348]	@ (8001720 <HAL_GPIO_Init+0x2e8>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <HAL_GPIO_Init+0x2e8>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <HAL_GPIO_Init+0x2e8>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_GPIO_Init+0x2ec>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <HAL_GPIO_Init+0x2f0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x202>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a48      	ldr	r2, [pc, #288]	@ (800172c <HAL_GPIO_Init+0x2f4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x1fe>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a47      	ldr	r2, [pc, #284]	@ (8001730 <HAL_GPIO_Init+0x2f8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a46      	ldr	r2, [pc, #280]	@ (8001734 <HAL_GPIO_Init+0x2fc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x1f6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a45      	ldr	r2, [pc, #276]	@ (8001738 <HAL_GPIO_Init+0x300>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x1f2>
 8001626:	2304      	movs	r3, #4
 8001628:	e008      	b.n	800163c <HAL_GPIO_Init+0x204>
 800162a:	2307      	movs	r3, #7
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x204>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x204>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x204>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x204>
 800163a:	2300      	movs	r3, #0
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164c:	4935      	ldr	r1, [pc, #212]	@ (8001724 <HAL_GPIO_Init+0x2ec>)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b38      	ldr	r3, [pc, #224]	@ (800173c <HAL_GPIO_Init+0x304>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167e:	4a2f      	ldr	r2, [pc, #188]	@ (800173c <HAL_GPIO_Init+0x304>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001684:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <HAL_GPIO_Init+0x304>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a8:	4a24      	ldr	r2, [pc, #144]	@ (800173c <HAL_GPIO_Init+0x304>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <HAL_GPIO_Init+0x304>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d2:	4a1a      	ldr	r2, [pc, #104]	@ (800173c <HAL_GPIO_Init+0x304>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_GPIO_Init+0x304>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016fc:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <HAL_GPIO_Init+0x304>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3301      	adds	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	f67f aea2 	bls.w	8001454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40013800 	.word	0x40013800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e267      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d075      	beq.n	800187e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001792:	4b88      	ldr	r3, [pc, #544]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d00c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b85      	ldr	r3, [pc, #532]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d112      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017aa:	4b82      	ldr	r3, [pc, #520]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017b6:	d10b      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	4b7e      	ldr	r3, [pc, #504]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d05b      	beq.n	800187c <HAL_RCC_OscConfig+0x108>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d157      	bne.n	800187c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e242      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_OscConfig+0x74>
 80017da:	4b76      	ldr	r3, [pc, #472]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a75      	ldr	r2, [pc, #468]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xb0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x98>
 80017f2:	4b70      	ldr	r3, [pc, #448]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6f      	ldr	r2, [pc, #444]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b6d      	ldr	r3, [pc, #436]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6c      	ldr	r2, [pc, #432]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xb0>
 800180c:	4b69      	ldr	r3, [pc, #420]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a68      	ldr	r2, [pc, #416]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b66      	ldr	r3, [pc, #408]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a65      	ldr	r2, [pc, #404]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fd12 	bl	8001254 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fd0e 	bl	8001254 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e207      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xc0>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fcfe 	bl	8001254 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fcfa 	bl	8001254 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	@ 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1f3      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b51      	ldr	r3, [pc, #324]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0xe8>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d063      	beq.n	8001952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800188a:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	4b41      	ldr	r3, [pc, #260]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x152>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e1c7      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4937      	ldr	r1, [pc, #220]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	e03a      	b.n	8001952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_RCC_OscConfig+0x244>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fcb3 	bl	8001254 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fcaf 	bl	8001254 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1a8      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4925      	ldr	r1, [pc, #148]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x244>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fc92 	bl	8001254 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fc8e 	bl	8001254 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e187      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d036      	beq.n	80019cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d016      	beq.n	8001994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_RCC_OscConfig+0x248>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff fc72 	bl	8001254 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fc6e 	bl	8001254 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e167      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_RCC_OscConfig+0x240>)
 8001988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x200>
 8001992:	e01b      	b.n	80019cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_OscConfig+0x248>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fc5b 	bl	8001254 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	e00e      	b.n	80019c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff fc57 	bl	8001254 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d907      	bls.n	80019c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e150      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
 80019b4:	40023800 	.word	0x40023800
 80019b8:	42470000 	.word	0x42470000
 80019bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b88      	ldr	r3, [pc, #544]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 80019c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ea      	bne.n	80019a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8097 	beq.w	8001b08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b81      	ldr	r3, [pc, #516]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b7d      	ldr	r3, [pc, #500]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a7c      	ldr	r2, [pc, #496]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	4b7a      	ldr	r3, [pc, #488]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b77      	ldr	r3, [pc, #476]	@ (8001be8 <HAL_RCC_OscConfig+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b74      	ldr	r3, [pc, #464]	@ (8001be8 <HAL_RCC_OscConfig+0x474>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a73      	ldr	r2, [pc, #460]	@ (8001be8 <HAL_RCC_OscConfig+0x474>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fc17 	bl	8001254 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff fc13 	bl	8001254 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e10c      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001be8 <HAL_RCC_OscConfig+0x474>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2ea>
 8001a50:	4b64      	ldr	r3, [pc, #400]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a54:	4a63      	ldr	r2, [pc, #396]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x324>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x30c>
 8001a66:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	4b5c      	ldr	r3, [pc, #368]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a76:	4a5b      	ldr	r2, [pc, #364]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x324>
 8001a80:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a57      	ldr	r2, [pc, #348]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8c:	4b55      	ldr	r3, [pc, #340]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a54      	ldr	r2, [pc, #336]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 0304 	bic.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fbd8 	bl	8001254 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fbd4 	bl	8001254 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0cb      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abe:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0ee      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x334>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fbc2 	bl	8001254 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fbbe 	bl	8001254 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0b5      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aea:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ee      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	4a38      	ldr	r2, [pc, #224]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a1 	beq.w	8001c54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d05c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d141      	bne.n	8001baa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <HAL_RCC_OscConfig+0x478>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb92 	bl	8001254 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff fb8e 	bl	8001254 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e087      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	491b      	ldr	r1, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_OscConfig+0x478>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb67 	bl	8001254 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff fb63 	bl	8001254 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e05c      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x416>
 8001ba8:	e054      	b.n	8001c54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_RCC_OscConfig+0x478>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fb50 	bl	8001254 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff fb4c 	bl	8001254 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e045      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x444>
 8001bd6:	e03d      	b.n	8001c54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e038      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_OscConfig+0x4ec>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d028      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d121      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d11a      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d111      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0cc      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b68      	ldr	r3, [pc, #416]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d90c      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b65      	ldr	r3, [pc, #404]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b63      	ldr	r3, [pc, #396]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0b8      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb8:	4b59      	ldr	r3, [pc, #356]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a58      	ldr	r2, [pc, #352]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b50      	ldr	r3, [pc, #320]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	494d      	ldr	r1, [pc, #308]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d044      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d119      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e07f      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e06f      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e067      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b37      	ldr	r3, [pc, #220]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4934      	ldr	r1, [pc, #208]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7ff fa7e 	bl	8001254 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff fa7a 	bl	8001254 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e04f      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d20c      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e032      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4916      	ldr	r1, [pc, #88]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	490e      	ldr	r1, [pc, #56]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dea:	f000 f821 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	490a      	ldr	r1, [pc, #40]	@ (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	5ccb      	ldrb	r3, [r1, r3]
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f9de 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08004474 	.word	0x08004474
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b090      	sub	sp, #64	@ 0x40
 8001e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e48:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d00d      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x40>
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	f200 80a1 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x34>
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e62:	e09b      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e68:	e09b      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e6a:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e6e:	e098      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d028      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	fb00 f303 	mul.w	r3, r0, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a43      	ldr	r2, [pc, #268]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eaa:	fba0 1202 	umull	r1, r2, r0, r2
 8001eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	61fa      	str	r2, [r7, #28]
 8001ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eca:	f7fe f9d9 	bl	8000280 <__aeabi_uldivmod>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ed6:	e053      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	2200      	movs	r2, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	617a      	str	r2, [r7, #20]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eea:	f04f 0b00 	mov.w	fp, #0
 8001eee:	4652      	mov	r2, sl
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ebb2 080a 	subs.w	r8, r2, sl
 8001f0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f22:	ebb2 0408 	subs.w	r4, r2, r8
 8001f26:	eb63 0509 	sbc.w	r5, r3, r9
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	00eb      	lsls	r3, r5, #3
 8001f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f38:	00e2      	lsls	r2, r4, #3
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	eb14 030a 	adds.w	r3, r4, sl
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	eb45 030b 	adc.w	r3, r5, fp
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f60:	4621      	mov	r1, r4
 8001f62:	028a      	lsls	r2, r1, #10
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	60fa      	str	r2, [r7, #12]
 8001f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f74:	f7fe f984 	bl	8000280 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3740      	adds	r7, #64	@ 0x40
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	017d7840 	.word	0x017d7840

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff0 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	08004484 	.word	0x08004484

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002000:	f7ff ffdc 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0b5b      	lsrs	r3, r3, #13
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4903      	ldr	r1, [pc, #12]	@ (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	08004484 	.word	0x08004484

08002024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fe48 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fab6 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e041      	b.n	8002158 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fe45 	bl	8000d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f000 fa67 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_TIM_PWM_Start+0x24>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e022      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d109      	bne.n	800219e <HAL_TIM_PWM_Start+0x3e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e015      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d109      	bne.n	80021b8 <HAL_TIM_PWM_Start+0x58>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e008      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e068      	b.n	80022a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x82>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e0:	e013      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x92>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f0:	e00b      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d104      	bne.n	8002202 <HAL_TIM_PWM_Start+0xa2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002200:	e003      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fc8a 	bl	8002b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <HAL_TIM_PWM_Start+0x14c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d107      	bne.n	8002232 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1d      	ldr	r2, [pc, #116]	@ (80022ac <HAL_TIM_PWM_Start+0x14c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_TIM_PWM_Start+0x10e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d013      	beq.n	800226e <HAL_TIM_PWM_Start+0x10e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_TIM_PWM_Start+0x150>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_TIM_PWM_Start+0x10e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_TIM_PWM_Start+0x154>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_TIM_PWM_Start+0x10e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a16      	ldr	r2, [pc, #88]	@ (80022b8 <HAL_TIM_PWM_Start+0x158>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_TIM_PWM_Start+0x10e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <HAL_TIM_PWM_Start+0x15c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d010      	beq.n	80022a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	e007      	b.n	80022a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	40014000 	.word	0x40014000

080022c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0ae      	b.n	800243c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	f200 809f 	bhi.w	800242c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022ee:	a201      	add	r2, pc, #4	@ (adr r2, 80022f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002329 	.word	0x08002329
 80022f8:	0800242d 	.word	0x0800242d
 80022fc:	0800242d 	.word	0x0800242d
 8002300:	0800242d 	.word	0x0800242d
 8002304:	08002369 	.word	0x08002369
 8002308:	0800242d 	.word	0x0800242d
 800230c:	0800242d 	.word	0x0800242d
 8002310:	0800242d 	.word	0x0800242d
 8002314:	080023ab 	.word	0x080023ab
 8002318:	0800242d 	.word	0x0800242d
 800231c:	0800242d 	.word	0x0800242d
 8002320:	0800242d 	.word	0x0800242d
 8002324:	080023eb 	.word	0x080023eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f9d6 	bl	80026e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0208 	orr.w	r2, r2, #8
 8002342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6999      	ldr	r1, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	619a      	str	r2, [r3, #24]
      break;
 8002366:	e064      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fa1c 	bl	80027ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]
      break;
 80023a8:	e043      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fa67 	bl	8002884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0204 	bic.w	r2, r2, #4
 80023d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
      break;
 80023e8:	e023      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fab1 	bl	8002958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	61da      	str	r2, [r3, #28]
      break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
      break;
 8002430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_TIM_ConfigClockSource+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e0b4      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x186>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800247e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002498:	d03e      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0xd4>
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249e:	f200 8087 	bhi.w	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a6:	f000 8086 	beq.w	80025b6 <HAL_TIM_ConfigClockSource+0x172>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ae:	d87f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b70      	cmp	r3, #112	@ 0x70
 80024b2:	d01a      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xa6>
 80024b4:	2b70      	cmp	r3, #112	@ 0x70
 80024b6:	d87b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b60      	cmp	r3, #96	@ 0x60
 80024ba:	d050      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x11a>
 80024bc:	2b60      	cmp	r3, #96	@ 0x60
 80024be:	d877      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b50      	cmp	r3, #80	@ 0x50
 80024c2:	d03c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xfa>
 80024c4:	2b50      	cmp	r3, #80	@ 0x50
 80024c6:	d873      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b40      	cmp	r3, #64	@ 0x40
 80024ca:	d058      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x13a>
 80024cc:	2b40      	cmp	r3, #64	@ 0x40
 80024ce:	d86f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b30      	cmp	r3, #48	@ 0x30
 80024d2:	d064      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	2b30      	cmp	r3, #48	@ 0x30
 80024d6:	d86b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d060      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d867      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05c      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d05a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	e062      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	f000 faf7 	bl	8002aec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800250c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	609a      	str	r2, [r3, #8]
      break;
 8002516:	e04f      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	f000 fae0 	bl	8002aec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e03c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	461a      	mov	r2, r3
 800254c:	f000 fa54 	bl	80029f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2150      	movs	r1, #80	@ 0x50
 8002556:	4618      	mov	r0, r3
 8002558:	f000 faad 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800255c:	e02c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	461a      	mov	r2, r3
 800256c:	f000 fa73 	bl	8002a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2160      	movs	r1, #96	@ 0x60
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fa9d 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800257c:	e01c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	461a      	mov	r2, r3
 800258c:	f000 fa34 	bl	80029f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2140      	movs	r1, #64	@ 0x40
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fa8d 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800259c:	e00c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f000 fa84 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80025ae:	e003      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e000      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a37      	ldr	r2, [pc, #220]	@ (80026c4 <TIM_Base_SetConfig+0xf0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00f      	beq.n	800260c <TIM_Base_SetConfig+0x38>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f2:	d00b      	beq.n	800260c <TIM_Base_SetConfig+0x38>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a34      	ldr	r2, [pc, #208]	@ (80026c8 <TIM_Base_SetConfig+0xf4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0x38>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a33      	ldr	r2, [pc, #204]	@ (80026cc <TIM_Base_SetConfig+0xf8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0x38>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a32      	ldr	r2, [pc, #200]	@ (80026d0 <TIM_Base_SetConfig+0xfc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d108      	bne.n	800261e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a28      	ldr	r2, [pc, #160]	@ (80026c4 <TIM_Base_SetConfig+0xf0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01b      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262c:	d017      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a25      	ldr	r2, [pc, #148]	@ (80026c8 <TIM_Base_SetConfig+0xf4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a24      	ldr	r2, [pc, #144]	@ (80026cc <TIM_Base_SetConfig+0xf8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00f      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a23      	ldr	r2, [pc, #140]	@ (80026d0 <TIM_Base_SetConfig+0xfc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00b      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a22      	ldr	r2, [pc, #136]	@ (80026d4 <TIM_Base_SetConfig+0x100>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <TIM_Base_SetConfig+0x104>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a20      	ldr	r2, [pc, #128]	@ (80026dc <TIM_Base_SetConfig+0x108>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d108      	bne.n	8002670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <TIM_Base_SetConfig+0xf0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d103      	bne.n	800269e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800

080026e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f023 0201 	bic.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <TIM_OC1_SetConfig+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10c      	bne.n	8002756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0308 	bic.w	r3, r3, #8
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <TIM_OC1_SetConfig+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d111      	bne.n	8002782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40010000 	.word	0x40010000

080027ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 0210 	bic.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0320 	bic.w	r3, r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <TIM_OC2_SetConfig+0xd4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <TIM_OC2_SetConfig+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d113      	bne.n	8002858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	621a      	str	r2, [r3, #32]
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000

08002884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <TIM_OC3_SetConfig+0xd0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <TIM_OC3_SetConfig+0xd0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800290c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010000 	.word	0x40010000

08002958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <TIM_OC4_SetConfig+0x9c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d109      	bne.n	80029cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40010000 	.word	0x40010000

080029f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 030a 	bic.w	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 0210 	bic.w	r2, r3, #16
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2201      	movs	r2, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e050      	b.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bdc:	d013      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10c      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	40014000 	.word	0x40014000

08002c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e03d      	b.n	8002cec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e042      	b.n	8002d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe f8f8 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	@ 0x24
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f973 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d175      	bne.n	8002ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Transmit+0x2c>
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e06e      	b.n	8002ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	@ 0x21
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd6:	f7fe fa3d 	bl	8001254 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df0:	d108      	bne.n	8002e04 <HAL_UART_Transmit+0x6c>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	e003      	b.n	8002e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e0c:	e02e      	b.n	8002e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f848 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e03a      	b.n	8002ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10b      	bne.n	8002e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	3302      	adds	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	e007      	b.n	8002e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1cb      	bne.n	8002e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2140      	movs	r1, #64	@ 0x40
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f814 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e006      	b.n	8002ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	e03b      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d037      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec8:	f7fe f9c4 	bl	8001254 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	6a3a      	ldr	r2, [r7, #32]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e03a      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d023      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d020      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d01d      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d116      	bne.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f81d 	bl	8002f60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e00f      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d0b4      	beq.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b095      	sub	sp, #84	@ 0x54
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f88:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e5      	bne.n	8002f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d119      	bne.n	800300c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f023 0310 	bic.w	r3, r3, #16
 8002fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff8:	61ba      	str	r2, [r7, #24]
 8002ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6979      	ldr	r1, [r7, #20]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	613b      	str	r3, [r7, #16]
   return(result);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800301a:	bf00      	nop
 800301c:	3754      	adds	r7, #84	@ 0x54
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b0c0      	sub	sp, #256	@ 0x100
 800302e:	af00      	add	r7, sp, #0
 8003030:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	ea40 0301 	orr.w	r3, r0, r1
 8003050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003080:	f021 010c 	bic.w	r1, r1, #12
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800308e:	430b      	orrs	r3, r1
 8003090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a2:	6999      	ldr	r1, [r3, #24]
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	ea40 0301 	orr.w	r3, r0, r1
 80030ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b8f      	ldr	r3, [pc, #572]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0xa0>
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b8d      	ldr	r3, [pc, #564]	@ (80032f8 <UART_SetConfig+0x2d0>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d104      	bne.n	80030d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7fe ff98 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80030cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030d0:	e003      	b.n	80030da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030d2:	f7fe ff7f 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 80030d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e4:	f040 810c 	bne.w	8003300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003102:	415b      	adcs	r3, r3
 8003104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800310a:	4621      	mov	r1, r4
 800310c:	eb12 0801 	adds.w	r8, r2, r1
 8003110:	4629      	mov	r1, r5
 8003112:	eb43 0901 	adc.w	r9, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312a:	4690      	mov	r8, r2
 800312c:	4699      	mov	r9, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb18 0303 	adds.w	r3, r8, r3
 8003134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003138:	462b      	mov	r3, r5
 800313a:	eb49 0303 	adc.w	r3, r9, r3
 800313e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800314e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003156:	460b      	mov	r3, r1
 8003158:	18db      	adds	r3, r3, r3
 800315a:	653b      	str	r3, [r7, #80]	@ 0x50
 800315c:	4613      	mov	r3, r2
 800315e:	eb42 0303 	adc.w	r3, r2, r3
 8003162:	657b      	str	r3, [r7, #84]	@ 0x54
 8003164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800316c:	f7fd f888 	bl	8000280 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b61      	ldr	r3, [pc, #388]	@ (80032fc <UART_SetConfig+0x2d4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011c      	lsls	r4, r3, #4
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003188:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800318c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003198:	415b      	adcs	r3, r3
 800319a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800319c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031a0:	4641      	mov	r1, r8
 80031a2:	eb12 0a01 	adds.w	sl, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb43 0b01 	adc.w	fp, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c0:	4692      	mov	sl, r2
 80031c2:	469b      	mov	fp, r3
 80031c4:	4643      	mov	r3, r8
 80031c6:	eb1a 0303 	adds.w	r3, sl, r3
 80031ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ce:	464b      	mov	r3, r9
 80031d0:	eb4b 0303 	adc.w	r3, fp, r3
 80031d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031ec:	460b      	mov	r3, r1
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031f2:	4613      	mov	r3, r2
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003202:	f7fd f83d 	bl	8000280 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4611      	mov	r1, r2
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <UART_SetConfig+0x2d4>)
 800320e:	fba3 2301 	umull	r2, r3, r3, r1
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2264      	movs	r2, #100	@ 0x64
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	1acb      	subs	r3, r1, r3
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003222:	4b36      	ldr	r3, [pc, #216]	@ (80032fc <UART_SetConfig+0x2d4>)
 8003224:	fba3 2302 	umull	r2, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003230:	441c      	add	r4, r3
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800323c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800324c:	415b      	adcs	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003254:	4641      	mov	r1, r8
 8003256:	1851      	adds	r1, r2, r1
 8003258:	6339      	str	r1, [r7, #48]	@ 0x30
 800325a:	4649      	mov	r1, r9
 800325c:	414b      	adcs	r3, r1
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800326c:	4659      	mov	r1, fp
 800326e:	00cb      	lsls	r3, r1, #3
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003276:	4651      	mov	r1, sl
 8003278:	00ca      	lsls	r2, r1, #3
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	4603      	mov	r3, r0
 8003280:	4642      	mov	r2, r8
 8003282:	189b      	adds	r3, r3, r2
 8003284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003288:	464b      	mov	r3, r9
 800328a:	460a      	mov	r2, r1
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032a8:	460b      	mov	r3, r1
 80032aa:	18db      	adds	r3, r3, r3
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ae:	4613      	mov	r3, r2
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032be:	f7fc ffdf 	bl	8000280 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <UART_SetConfig+0x2d4>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	@ 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3332      	adds	r3, #50	@ 0x32
 80032da:	4a08      	ldr	r2, [pc, #32]	@ (80032fc <UART_SetConfig+0x2d4>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4422      	add	r2, r4
 80032ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f0:	e106      	b.n	8003500 <UART_SetConfig+0x4d8>
 80032f2:	bf00      	nop
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003304:	2200      	movs	r2, #0
 8003306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800330a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800330e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003312:	4642      	mov	r2, r8
 8003314:	464b      	mov	r3, r9
 8003316:	1891      	adds	r1, r2, r2
 8003318:	6239      	str	r1, [r7, #32]
 800331a:	415b      	adcs	r3, r3
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
 800331e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003322:	4641      	mov	r1, r8
 8003324:	1854      	adds	r4, r2, r1
 8003326:	4649      	mov	r1, r9
 8003328:	eb43 0501 	adc.w	r5, r3, r1
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003348:	464b      	mov	r3, r9
 800334a:	eb45 0303 	adc.w	r3, r5, r3
 800334e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800335e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800336e:	4629      	mov	r1, r5
 8003370:	008b      	lsls	r3, r1, #2
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003378:	4621      	mov	r1, r4
 800337a:	008a      	lsls	r2, r1, #2
 800337c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003380:	f7fc ff7e 	bl	8000280 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4b60      	ldr	r3, [pc, #384]	@ (800350c <UART_SetConfig+0x4e4>)
 800338a:	fba3 2302 	umull	r2, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	011c      	lsls	r4, r3, #4
 8003392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800339c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	1891      	adds	r1, r2, r2
 80033aa:	61b9      	str	r1, [r7, #24]
 80033ac:	415b      	adcs	r3, r3
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	4641      	mov	r1, r8
 80033b6:	1851      	adds	r1, r2, r1
 80033b8:	6139      	str	r1, [r7, #16]
 80033ba:	4649      	mov	r1, r9
 80033bc:	414b      	adcs	r3, r1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033cc:	4659      	mov	r1, fp
 80033ce:	00cb      	lsls	r3, r1, #3
 80033d0:	4651      	mov	r1, sl
 80033d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d6:	4651      	mov	r1, sl
 80033d8:	00ca      	lsls	r2, r1, #3
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	4642      	mov	r2, r8
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033e8:	464b      	mov	r3, r9
 80033ea:	460a      	mov	r2, r1
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800341e:	f7fc ff2f 	bl	8000280 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4611      	mov	r1, r2
 8003428:	4b38      	ldr	r3, [pc, #224]	@ (800350c <UART_SetConfig+0x4e4>)
 800342a:	fba3 2301 	umull	r2, r3, r3, r1
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2264      	movs	r2, #100	@ 0x64
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	1acb      	subs	r3, r1, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	@ 0x32
 800343c:	4a33      	ldr	r2, [pc, #204]	@ (800350c <UART_SetConfig+0x4e4>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003448:	441c      	add	r4, r3
 800344a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344e:	2200      	movs	r2, #0
 8003450:	673b      	str	r3, [r7, #112]	@ 0x70
 8003452:	677a      	str	r2, [r7, #116]	@ 0x74
 8003454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	1891      	adds	r1, r2, r2
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	415b      	adcs	r3, r3
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003468:	4641      	mov	r1, r8
 800346a:	1851      	adds	r1, r2, r1
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	4649      	mov	r1, r9
 8003470:	414b      	adcs	r3, r1
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003480:	4659      	mov	r1, fp
 8003482:	00cb      	lsls	r3, r1, #3
 8003484:	4651      	mov	r1, sl
 8003486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348a:	4651      	mov	r1, sl
 800348c:	00ca      	lsls	r2, r1, #3
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	4603      	mov	r3, r0
 8003494:	4642      	mov	r2, r8
 8003496:	189b      	adds	r3, r3, r2
 8003498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800349a:	464b      	mov	r3, r9
 800349c:	460a      	mov	r2, r1
 800349e:	eb42 0303 	adc.w	r3, r2, r3
 80034a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034bc:	4649      	mov	r1, r9
 80034be:	008b      	lsls	r3, r1, #2
 80034c0:	4641      	mov	r1, r8
 80034c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c6:	4641      	mov	r1, r8
 80034c8:	008a      	lsls	r2, r1, #2
 80034ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034ce:	f7fc fed7 	bl	8000280 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4b0d      	ldr	r3, [pc, #52]	@ (800350c <UART_SetConfig+0x4e4>)
 80034d8:	fba3 1302 	umull	r1, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2164      	movs	r1, #100	@ 0x64
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	3332      	adds	r3, #50	@ 0x32
 80034ea:	4a08      	ldr	r2, [pc, #32]	@ (800350c <UART_SetConfig+0x4e4>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4422      	add	r2, r4
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003506:	46bd      	mov	sp, r7
 8003508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <std>:
 8003510:	2300      	movs	r3, #0
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	e9c0 3300 	strd	r3, r3, [r0]
 800351a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800351e:	6083      	str	r3, [r0, #8]
 8003520:	8181      	strh	r1, [r0, #12]
 8003522:	6643      	str	r3, [r0, #100]	@ 0x64
 8003524:	81c2      	strh	r2, [r0, #14]
 8003526:	6183      	str	r3, [r0, #24]
 8003528:	4619      	mov	r1, r3
 800352a:	2208      	movs	r2, #8
 800352c:	305c      	adds	r0, #92	@ 0x5c
 800352e:	f000 f9f9 	bl	8003924 <memset>
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <std+0x58>)
 8003534:	6263      	str	r3, [r4, #36]	@ 0x24
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <std+0x5c>)
 8003538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <std+0x60>)
 800353c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <std+0x64>)
 8003540:	6323      	str	r3, [r4, #48]	@ 0x30
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <std+0x68>)
 8003544:	6224      	str	r4, [r4, #32]
 8003546:	429c      	cmp	r4, r3
 8003548:	d006      	beq.n	8003558 <std+0x48>
 800354a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800354e:	4294      	cmp	r4, r2
 8003550:	d002      	beq.n	8003558 <std+0x48>
 8003552:	33d0      	adds	r3, #208	@ 0xd0
 8003554:	429c      	cmp	r4, r3
 8003556:	d105      	bne.n	8003564 <std+0x54>
 8003558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003560:	f000 ba58 	b.w	8003a14 <__retarget_lock_init_recursive>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	bf00      	nop
 8003568:	08003775 	.word	0x08003775
 800356c:	08003797 	.word	0x08003797
 8003570:	080037cf 	.word	0x080037cf
 8003574:	080037f3 	.word	0x080037f3
 8003578:	200001f4 	.word	0x200001f4

0800357c <stdio_exit_handler>:
 800357c:	4a02      	ldr	r2, [pc, #8]	@ (8003588 <stdio_exit_handler+0xc>)
 800357e:	4903      	ldr	r1, [pc, #12]	@ (800358c <stdio_exit_handler+0x10>)
 8003580:	4803      	ldr	r0, [pc, #12]	@ (8003590 <stdio_exit_handler+0x14>)
 8003582:	f000 b869 	b.w	8003658 <_fwalk_sglue>
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c
 800358c:	080042b1 	.word	0x080042b1
 8003590:	2000001c 	.word	0x2000001c

08003594 <cleanup_stdio>:
 8003594:	6841      	ldr	r1, [r0, #4]
 8003596:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <cleanup_stdio+0x34>)
 8003598:	4299      	cmp	r1, r3
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
 800359e:	d001      	beq.n	80035a4 <cleanup_stdio+0x10>
 80035a0:	f000 fe86 	bl	80042b0 <_fflush_r>
 80035a4:	68a1      	ldr	r1, [r4, #8]
 80035a6:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <cleanup_stdio+0x38>)
 80035a8:	4299      	cmp	r1, r3
 80035aa:	d002      	beq.n	80035b2 <cleanup_stdio+0x1e>
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 fe7f 	bl	80042b0 <_fflush_r>
 80035b2:	68e1      	ldr	r1, [r4, #12]
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <cleanup_stdio+0x3c>)
 80035b6:	4299      	cmp	r1, r3
 80035b8:	d004      	beq.n	80035c4 <cleanup_stdio+0x30>
 80035ba:	4620      	mov	r0, r4
 80035bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c0:	f000 be76 	b.w	80042b0 <_fflush_r>
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	200001f4 	.word	0x200001f4
 80035cc:	2000025c 	.word	0x2000025c
 80035d0:	200002c4 	.word	0x200002c4

080035d4 <global_stdio_init.part.0>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <global_stdio_init.part.0+0x30>)
 80035d8:	4c0b      	ldr	r4, [pc, #44]	@ (8003608 <global_stdio_init.part.0+0x34>)
 80035da:	4a0c      	ldr	r2, [pc, #48]	@ (800360c <global_stdio_init.part.0+0x38>)
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	4620      	mov	r0, r4
 80035e0:	2200      	movs	r2, #0
 80035e2:	2104      	movs	r1, #4
 80035e4:	f7ff ff94 	bl	8003510 <std>
 80035e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035ec:	2201      	movs	r2, #1
 80035ee:	2109      	movs	r1, #9
 80035f0:	f7ff ff8e 	bl	8003510 <std>
 80035f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035f8:	2202      	movs	r2, #2
 80035fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fe:	2112      	movs	r1, #18
 8003600:	f7ff bf86 	b.w	8003510 <std>
 8003604:	2000032c 	.word	0x2000032c
 8003608:	200001f4 	.word	0x200001f4
 800360c:	0800357d 	.word	0x0800357d

08003610 <__sfp_lock_acquire>:
 8003610:	4801      	ldr	r0, [pc, #4]	@ (8003618 <__sfp_lock_acquire+0x8>)
 8003612:	f000 ba00 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 8003616:	bf00      	nop
 8003618:	20000335 	.word	0x20000335

0800361c <__sfp_lock_release>:
 800361c:	4801      	ldr	r0, [pc, #4]	@ (8003624 <__sfp_lock_release+0x8>)
 800361e:	f000 b9fb 	b.w	8003a18 <__retarget_lock_release_recursive>
 8003622:	bf00      	nop
 8003624:	20000335 	.word	0x20000335

08003628 <__sinit>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
 800362c:	f7ff fff0 	bl	8003610 <__sfp_lock_acquire>
 8003630:	6a23      	ldr	r3, [r4, #32]
 8003632:	b11b      	cbz	r3, 800363c <__sinit+0x14>
 8003634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003638:	f7ff bff0 	b.w	800361c <__sfp_lock_release>
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__sinit+0x28>)
 800363e:	6223      	str	r3, [r4, #32]
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <__sinit+0x2c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f5      	bne.n	8003634 <__sinit+0xc>
 8003648:	f7ff ffc4 	bl	80035d4 <global_stdio_init.part.0>
 800364c:	e7f2      	b.n	8003634 <__sinit+0xc>
 800364e:	bf00      	nop
 8003650:	08003595 	.word	0x08003595
 8003654:	2000032c 	.word	0x2000032c

08003658 <_fwalk_sglue>:
 8003658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800365c:	4607      	mov	r7, r0
 800365e:	4688      	mov	r8, r1
 8003660:	4614      	mov	r4, r2
 8003662:	2600      	movs	r6, #0
 8003664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003668:	f1b9 0901 	subs.w	r9, r9, #1
 800366c:	d505      	bpl.n	800367a <_fwalk_sglue+0x22>
 800366e:	6824      	ldr	r4, [r4, #0]
 8003670:	2c00      	cmp	r4, #0
 8003672:	d1f7      	bne.n	8003664 <_fwalk_sglue+0xc>
 8003674:	4630      	mov	r0, r6
 8003676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800367a:	89ab      	ldrh	r3, [r5, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d907      	bls.n	8003690 <_fwalk_sglue+0x38>
 8003680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003684:	3301      	adds	r3, #1
 8003686:	d003      	beq.n	8003690 <_fwalk_sglue+0x38>
 8003688:	4629      	mov	r1, r5
 800368a:	4638      	mov	r0, r7
 800368c:	47c0      	blx	r8
 800368e:	4306      	orrs	r6, r0
 8003690:	3568      	adds	r5, #104	@ 0x68
 8003692:	e7e9      	b.n	8003668 <_fwalk_sglue+0x10>

08003694 <iprintf>:
 8003694:	b40f      	push	{r0, r1, r2, r3}
 8003696:	b507      	push	{r0, r1, r2, lr}
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <iprintf+0x20>)
 800369a:	ab04      	add	r3, sp, #16
 800369c:	6808      	ldr	r0, [r1, #0]
 800369e:	f853 2b04 	ldr.w	r2, [r3], #4
 80036a2:	6881      	ldr	r1, [r0, #8]
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	f000 fadb 	bl	8003c60 <_vfiprintf_r>
 80036aa:	b003      	add	sp, #12
 80036ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b0:	b004      	add	sp, #16
 80036b2:	4770      	bx	lr
 80036b4:	20000018 	.word	0x20000018

080036b8 <_puts_r>:
 80036b8:	6a03      	ldr	r3, [r0, #32]
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	6884      	ldr	r4, [r0, #8]
 80036be:	4605      	mov	r5, r0
 80036c0:	460e      	mov	r6, r1
 80036c2:	b90b      	cbnz	r3, 80036c8 <_puts_r+0x10>
 80036c4:	f7ff ffb0 	bl	8003628 <__sinit>
 80036c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ca:	07db      	lsls	r3, r3, #31
 80036cc:	d405      	bmi.n	80036da <_puts_r+0x22>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	0598      	lsls	r0, r3, #22
 80036d2:	d402      	bmi.n	80036da <_puts_r+0x22>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f000 f99e 	bl	8003a16 <__retarget_lock_acquire_recursive>
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	0719      	lsls	r1, r3, #28
 80036de:	d502      	bpl.n	80036e6 <_puts_r+0x2e>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d135      	bne.n	8003752 <_puts_r+0x9a>
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 f8c5 	bl	8003878 <__swsetup_r>
 80036ee:	b380      	cbz	r0, 8003752 <_puts_r+0x9a>
 80036f0:	f04f 35ff 	mov.w	r5, #4294967295
 80036f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d405      	bmi.n	8003706 <_puts_r+0x4e>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_puts_r+0x4e>
 8003700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003702:	f000 f989 	bl	8003a18 <__retarget_lock_release_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	da04      	bge.n	8003718 <_puts_r+0x60>
 800370e:	69a2      	ldr	r2, [r4, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	dc17      	bgt.n	8003744 <_puts_r+0x8c>
 8003714:	290a      	cmp	r1, #10
 8003716:	d015      	beq.n	8003744 <_puts_r+0x8c>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	68a3      	ldr	r3, [r4, #8]
 8003722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003726:	3b01      	subs	r3, #1
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	2900      	cmp	r1, #0
 800372c:	d1ed      	bne.n	800370a <_puts_r+0x52>
 800372e:	2b00      	cmp	r3, #0
 8003730:	da11      	bge.n	8003756 <_puts_r+0x9e>
 8003732:	4622      	mov	r2, r4
 8003734:	210a      	movs	r1, #10
 8003736:	4628      	mov	r0, r5
 8003738:	f000 f85f 	bl	80037fa <__swbuf_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d0d7      	beq.n	80036f0 <_puts_r+0x38>
 8003740:	250a      	movs	r5, #10
 8003742:	e7d7      	b.n	80036f4 <_puts_r+0x3c>
 8003744:	4622      	mov	r2, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 f857 	bl	80037fa <__swbuf_r>
 800374c:	3001      	adds	r0, #1
 800374e:	d1e7      	bne.n	8003720 <_puts_r+0x68>
 8003750:	e7ce      	b.n	80036f0 <_puts_r+0x38>
 8003752:	3e01      	subs	r6, #1
 8003754:	e7e4      	b.n	8003720 <_puts_r+0x68>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	220a      	movs	r2, #10
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e7ee      	b.n	8003740 <_puts_r+0x88>
	...

08003764 <puts>:
 8003764:	4b02      	ldr	r3, [pc, #8]	@ (8003770 <puts+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f7ff bfa5 	b.w	80036b8 <_puts_r>
 800376e:	bf00      	nop
 8003770:	20000018 	.word	0x20000018

08003774 <__sread>:
 8003774:	b510      	push	{r4, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	f000 f8fc 	bl	8003978 <_read_r>
 8003780:	2800      	cmp	r0, #0
 8003782:	bfab      	itete	ge
 8003784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003786:	89a3      	ldrhlt	r3, [r4, #12]
 8003788:	181b      	addge	r3, r3, r0
 800378a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800378e:	bfac      	ite	ge
 8003790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003792:	81a3      	strhlt	r3, [r4, #12]
 8003794:	bd10      	pop	{r4, pc}

08003796 <__swrite>:
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	461f      	mov	r7, r3
 800379c:	898b      	ldrh	r3, [r1, #12]
 800379e:	05db      	lsls	r3, r3, #23
 80037a0:	4605      	mov	r5, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	4616      	mov	r6, r2
 80037a6:	d505      	bpl.n	80037b4 <__swrite+0x1e>
 80037a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ac:	2302      	movs	r3, #2
 80037ae:	2200      	movs	r2, #0
 80037b0:	f000 f8d0 	bl	8003954 <_lseek_r>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037be:	81a3      	strh	r3, [r4, #12]
 80037c0:	4632      	mov	r2, r6
 80037c2:	463b      	mov	r3, r7
 80037c4:	4628      	mov	r0, r5
 80037c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ca:	f000 b8e7 	b.w	800399c <_write_r>

080037ce <__sseek>:
 80037ce:	b510      	push	{r4, lr}
 80037d0:	460c      	mov	r4, r1
 80037d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d6:	f000 f8bd 	bl	8003954 <_lseek_r>
 80037da:	1c43      	adds	r3, r0, #1
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	bf15      	itete	ne
 80037e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ea:	81a3      	strheq	r3, [r4, #12]
 80037ec:	bf18      	it	ne
 80037ee:	81a3      	strhne	r3, [r4, #12]
 80037f0:	bd10      	pop	{r4, pc}

080037f2 <__sclose>:
 80037f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f6:	f000 b89d 	b.w	8003934 <_close_r>

080037fa <__swbuf_r>:
 80037fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fc:	460e      	mov	r6, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	4605      	mov	r5, r0
 8003802:	b118      	cbz	r0, 800380c <__swbuf_r+0x12>
 8003804:	6a03      	ldr	r3, [r0, #32]
 8003806:	b90b      	cbnz	r3, 800380c <__swbuf_r+0x12>
 8003808:	f7ff ff0e 	bl	8003628 <__sinit>
 800380c:	69a3      	ldr	r3, [r4, #24]
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	071a      	lsls	r2, r3, #28
 8003814:	d501      	bpl.n	800381a <__swbuf_r+0x20>
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	b943      	cbnz	r3, 800382c <__swbuf_r+0x32>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f82b 	bl	8003878 <__swsetup_r>
 8003822:	b118      	cbz	r0, 800382c <__swbuf_r+0x32>
 8003824:	f04f 37ff 	mov.w	r7, #4294967295
 8003828:	4638      	mov	r0, r7
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	6922      	ldr	r2, [r4, #16]
 8003830:	1a98      	subs	r0, r3, r2
 8003832:	6963      	ldr	r3, [r4, #20]
 8003834:	b2f6      	uxtb	r6, r6
 8003836:	4283      	cmp	r3, r0
 8003838:	4637      	mov	r7, r6
 800383a:	dc05      	bgt.n	8003848 <__swbuf_r+0x4e>
 800383c:	4621      	mov	r1, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fd36 	bl	80042b0 <_fflush_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d1ed      	bne.n	8003824 <__swbuf_r+0x2a>
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	3b01      	subs	r3, #1
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	701e      	strb	r6, [r3, #0]
 8003856:	6962      	ldr	r2, [r4, #20]
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d004      	beq.n	8003868 <__swbuf_r+0x6e>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	07db      	lsls	r3, r3, #31
 8003862:	d5e1      	bpl.n	8003828 <__swbuf_r+0x2e>
 8003864:	2e0a      	cmp	r6, #10
 8003866:	d1df      	bne.n	8003828 <__swbuf_r+0x2e>
 8003868:	4621      	mov	r1, r4
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fd20 	bl	80042b0 <_fflush_r>
 8003870:	2800      	cmp	r0, #0
 8003872:	d0d9      	beq.n	8003828 <__swbuf_r+0x2e>
 8003874:	e7d6      	b.n	8003824 <__swbuf_r+0x2a>
	...

08003878 <__swsetup_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4b29      	ldr	r3, [pc, #164]	@ (8003920 <__swsetup_r+0xa8>)
 800387c:	4605      	mov	r5, r0
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	460c      	mov	r4, r1
 8003882:	b118      	cbz	r0, 800388c <__swsetup_r+0x14>
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	b90b      	cbnz	r3, 800388c <__swsetup_r+0x14>
 8003888:	f7ff fece 	bl	8003628 <__sinit>
 800388c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003890:	0719      	lsls	r1, r3, #28
 8003892:	d422      	bmi.n	80038da <__swsetup_r+0x62>
 8003894:	06da      	lsls	r2, r3, #27
 8003896:	d407      	bmi.n	80038a8 <__swsetup_r+0x30>
 8003898:	2209      	movs	r2, #9
 800389a:	602a      	str	r2, [r5, #0]
 800389c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295
 80038a6:	e033      	b.n	8003910 <__swsetup_r+0x98>
 80038a8:	0758      	lsls	r0, r3, #29
 80038aa:	d512      	bpl.n	80038d2 <__swsetup_r+0x5a>
 80038ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038ae:	b141      	cbz	r1, 80038c2 <__swsetup_r+0x4a>
 80038b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <__swsetup_r+0x46>
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f8af 	bl	8003a1c <_free_r>
 80038be:	2300      	movs	r3, #0
 80038c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	b94b      	cbnz	r3, 80038f2 <__swsetup_r+0x7a>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e8:	d003      	beq.n	80038f2 <__swsetup_r+0x7a>
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 fd2d 	bl	800434c <__smakebuf_r>
 80038f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f6:	f013 0201 	ands.w	r2, r3, #1
 80038fa:	d00a      	beq.n	8003912 <__swsetup_r+0x9a>
 80038fc:	2200      	movs	r2, #0
 80038fe:	60a2      	str	r2, [r4, #8]
 8003900:	6962      	ldr	r2, [r4, #20]
 8003902:	4252      	negs	r2, r2
 8003904:	61a2      	str	r2, [r4, #24]
 8003906:	6922      	ldr	r2, [r4, #16]
 8003908:	b942      	cbnz	r2, 800391c <__swsetup_r+0xa4>
 800390a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800390e:	d1c5      	bne.n	800389c <__swsetup_r+0x24>
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	0799      	lsls	r1, r3, #30
 8003914:	bf58      	it	pl
 8003916:	6962      	ldrpl	r2, [r4, #20]
 8003918:	60a2      	str	r2, [r4, #8]
 800391a:	e7f4      	b.n	8003906 <__swsetup_r+0x8e>
 800391c:	2000      	movs	r0, #0
 800391e:	e7f7      	b.n	8003910 <__swsetup_r+0x98>
 8003920:	20000018 	.word	0x20000018

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <_close_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	@ (8003950 <_close_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd fb7c 	bl	800103c <_close>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_close_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_close_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000330 	.word	0x20000330

08003954 <_lseek_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_lseek_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fd fb91 	bl	800108a <_lseek>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_lseek_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_lseek_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	20000330 	.word	0x20000330

08003978 <_read_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	@ (8003998 <_read_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd fb3b 	bl	8001002 <_read>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_read_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_read_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000330 	.word	0x20000330

0800399c <_write_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	@ (80039bc <_write_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fc fdfe 	bl	80005ac <_write>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_write_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_write_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000330 	.word	0x20000330

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	@ (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000018 	.word	0x20000018

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003a04 <__libc_init_array+0x38>)
 80039d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003a08 <__libc_init_array+0x3c>)
 80039d2:	1b64      	subs	r4, r4, r5
 80039d4:	10a4      	asrs	r4, r4, #2
 80039d6:	2600      	movs	r6, #0
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	4d0b      	ldr	r5, [pc, #44]	@ (8003a0c <__libc_init_array+0x40>)
 80039de:	4c0c      	ldr	r4, [pc, #48]	@ (8003a10 <__libc_init_array+0x44>)
 80039e0:	f000 fd22 	bl	8004428 <_init>
 80039e4:	1b64      	subs	r4, r4, r5
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	2600      	movs	r6, #0
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	080044c8 	.word	0x080044c8
 8003a08:	080044c8 	.word	0x080044c8
 8003a0c:	080044c8 	.word	0x080044c8
 8003a10:	080044cc 	.word	0x080044cc

08003a14 <__retarget_lock_init_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <__retarget_lock_acquire_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <__retarget_lock_release_recursive>:
 8003a18:	4770      	bx	lr
	...

08003a1c <_free_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4605      	mov	r5, r0
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d041      	beq.n	8003aa8 <_free_r+0x8c>
 8003a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a28:	1f0c      	subs	r4, r1, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	18e4      	addlt	r4, r4, r3
 8003a30:	f000 f8e0 	bl	8003bf4 <__malloc_lock>
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <_free_r+0x90>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	b933      	cbnz	r3, 8003a48 <_free_r+0x2c>
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6014      	str	r4, [r2, #0]
 8003a3e:	4628      	mov	r0, r5
 8003a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a44:	f000 b8dc 	b.w	8003c00 <__malloc_unlock>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d908      	bls.n	8003a5e <_free_r+0x42>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	1821      	adds	r1, r4, r0
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf01      	itttt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	e7ed      	b.n	8003a3a <_free_r+0x1e>
 8003a5e:	461a      	mov	r2, r3
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b10b      	cbz	r3, 8003a68 <_free_r+0x4c>
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	d9fa      	bls.n	8003a5e <_free_r+0x42>
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	1850      	adds	r0, r2, r1
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d10b      	bne.n	8003a88 <_free_r+0x6c>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	4401      	add	r1, r0
 8003a74:	1850      	adds	r0, r2, r1
 8003a76:	4283      	cmp	r3, r0
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	d1e0      	bne.n	8003a3e <_free_r+0x22>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	4408      	add	r0, r1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	e7da      	b.n	8003a3e <_free_r+0x22>
 8003a88:	d902      	bls.n	8003a90 <_free_r+0x74>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	e7d6      	b.n	8003a3e <_free_r+0x22>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf04      	itt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	bf04      	itt	eq
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	6054      	str	r4, [r2, #4]
 8003aa6:	e7ca      	b.n	8003a3e <_free_r+0x22>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000033c 	.word	0x2000033c

08003ab0 <sbrk_aligned>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8003af0 <sbrk_aligned+0x40>)
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b911      	cbnz	r1, 8003ac2 <sbrk_aligned+0x12>
 8003abc:	f000 fca4 	bl	8004408 <_sbrk_r>
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 fc9f 	bl	8004408 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d103      	bne.n	8003ad6 <sbrk_aligned+0x26>
 8003ace:	f04f 34ff 	mov.w	r4, #4294967295
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0f8      	beq.n	8003ad2 <sbrk_aligned+0x22>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fc90 	bl	8004408 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f2      	bne.n	8003ad2 <sbrk_aligned+0x22>
 8003aec:	e7ef      	b.n	8003ace <sbrk_aligned+0x1e>
 8003aee:	bf00      	nop
 8003af0:	20000338 	.word	0x20000338

08003af4 <_malloc_r>:
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4606      	mov	r6, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d904      	bls.n	8003b1a <_malloc_r+0x26>
 8003b10:	230c      	movs	r3, #12
 8003b12:	6033      	str	r3, [r6, #0]
 8003b14:	2000      	movs	r0, #0
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf0 <_malloc_r+0xfc>
 8003b1e:	f000 f869 	bl	8003bf4 <__malloc_lock>
 8003b22:	f8d8 3000 	ldr.w	r3, [r8]
 8003b26:	461c      	mov	r4, r3
 8003b28:	bb44      	cbnz	r4, 8003b7c <_malloc_r+0x88>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff ffbf 	bl	8003ab0 <sbrk_aligned>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	4604      	mov	r4, r0
 8003b36:	d158      	bne.n	8003bea <_malloc_r+0xf6>
 8003b38:	f8d8 4000 	ldr.w	r4, [r8]
 8003b3c:	4627      	mov	r7, r4
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d143      	bne.n	8003bca <_malloc_r+0xd6>
 8003b42:	2c00      	cmp	r4, #0
 8003b44:	d04b      	beq.n	8003bde <_malloc_r+0xea>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	4639      	mov	r1, r7
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	eb04 0903 	add.w	r9, r4, r3
 8003b50:	f000 fc5a 	bl	8004408 <_sbrk_r>
 8003b54:	4581      	cmp	r9, r0
 8003b56:	d142      	bne.n	8003bde <_malloc_r+0xea>
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	1a6d      	subs	r5, r5, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff ffa6 	bl	8003ab0 <sbrk_aligned>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d03a      	beq.n	8003bde <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	442b      	add	r3, r5
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	bb62      	cbnz	r2, 8003bd0 <_malloc_r+0xdc>
 8003b76:	f8c8 7000 	str.w	r7, [r8]
 8003b7a:	e00f      	b.n	8003b9c <_malloc_r+0xa8>
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	1b52      	subs	r2, r2, r5
 8003b80:	d420      	bmi.n	8003bc4 <_malloc_r+0xd0>
 8003b82:	2a0b      	cmp	r2, #11
 8003b84:	d917      	bls.n	8003bb6 <_malloc_r+0xc2>
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	bf18      	it	ne
 8003b8e:	6059      	strne	r1, [r3, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	bf08      	it	eq
 8003b94:	f8c8 1000 	streq.w	r1, [r8]
 8003b98:	5162      	str	r2, [r4, r5]
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f82f 	bl	8003c00 <__malloc_unlock>
 8003ba2:	f104 000b 	add.w	r0, r4, #11
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	f020 0007 	bic.w	r0, r0, #7
 8003bac:	1ac2      	subs	r2, r0, r3
 8003bae:	bf1c      	itt	ne
 8003bb0:	1a1b      	subne	r3, r3, r0
 8003bb2:	50a3      	strne	r3, [r4, r2]
 8003bb4:	e7af      	b.n	8003b16 <_malloc_r+0x22>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	bf0c      	ite	eq
 8003bbc:	f8c8 2000 	streq.w	r2, [r8]
 8003bc0:	605a      	strne	r2, [r3, #4]
 8003bc2:	e7eb      	b.n	8003b9c <_malloc_r+0xa8>
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	6864      	ldr	r4, [r4, #4]
 8003bc8:	e7ae      	b.n	8003b28 <_malloc_r+0x34>
 8003bca:	463c      	mov	r4, r7
 8003bcc:	687f      	ldr	r7, [r7, #4]
 8003bce:	e7b6      	b.n	8003b3e <_malloc_r+0x4a>
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d1fb      	bne.n	8003bd0 <_malloc_r+0xdc>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6053      	str	r3, [r2, #4]
 8003bdc:	e7de      	b.n	8003b9c <_malloc_r+0xa8>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f80c 	bl	8003c00 <__malloc_unlock>
 8003be8:	e794      	b.n	8003b14 <_malloc_r+0x20>
 8003bea:	6005      	str	r5, [r0, #0]
 8003bec:	e7d6      	b.n	8003b9c <_malloc_r+0xa8>
 8003bee:	bf00      	nop
 8003bf0:	2000033c 	.word	0x2000033c

08003bf4 <__malloc_lock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__malloc_lock+0x8>)
 8003bf6:	f7ff bf0e 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20000334 	.word	0x20000334

08003c00 <__malloc_unlock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__malloc_unlock+0x8>)
 8003c02:	f7ff bf09 	b.w	8003a18 <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	20000334 	.word	0x20000334

08003c0c <__sfputc_r>:
 8003c0c:	6893      	ldr	r3, [r2, #8]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	b410      	push	{r4}
 8003c14:	6093      	str	r3, [r2, #8]
 8003c16:	da08      	bge.n	8003c2a <__sfputc_r+0x1e>
 8003c18:	6994      	ldr	r4, [r2, #24]
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	db01      	blt.n	8003c22 <__sfputc_r+0x16>
 8003c1e:	290a      	cmp	r1, #10
 8003c20:	d103      	bne.n	8003c2a <__sfputc_r+0x1e>
 8003c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c26:	f7ff bde8 	b.w	80037fa <__swbuf_r>
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	1c58      	adds	r0, r3, #1
 8003c2e:	6010      	str	r0, [r2, #0]
 8003c30:	7019      	strb	r1, [r3, #0]
 8003c32:	4608      	mov	r0, r1
 8003c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <__sfputs_r>:
 8003c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3c:	4606      	mov	r6, r0
 8003c3e:	460f      	mov	r7, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	18d5      	adds	r5, r2, r3
 8003c44:	42ac      	cmp	r4, r5
 8003c46:	d101      	bne.n	8003c4c <__sfputs_r+0x12>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e007      	b.n	8003c5c <__sfputs_r+0x22>
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	463a      	mov	r2, r7
 8003c52:	4630      	mov	r0, r6
 8003c54:	f7ff ffda 	bl	8003c0c <__sfputc_r>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d1f3      	bne.n	8003c44 <__sfputs_r+0xa>
 8003c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c60 <_vfiprintf_r>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	460d      	mov	r5, r1
 8003c66:	b09d      	sub	sp, #116	@ 0x74
 8003c68:	4614      	mov	r4, r2
 8003c6a:	4698      	mov	r8, r3
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	b118      	cbz	r0, 8003c78 <_vfiprintf_r+0x18>
 8003c70:	6a03      	ldr	r3, [r0, #32]
 8003c72:	b90b      	cbnz	r3, 8003c78 <_vfiprintf_r+0x18>
 8003c74:	f7ff fcd8 	bl	8003628 <__sinit>
 8003c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c7a:	07d9      	lsls	r1, r3, #31
 8003c7c:	d405      	bmi.n	8003c8a <_vfiprintf_r+0x2a>
 8003c7e:	89ab      	ldrh	r3, [r5, #12]
 8003c80:	059a      	lsls	r2, r3, #22
 8003c82:	d402      	bmi.n	8003c8a <_vfiprintf_r+0x2a>
 8003c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c86:	f7ff fec6 	bl	8003a16 <__retarget_lock_acquire_recursive>
 8003c8a:	89ab      	ldrh	r3, [r5, #12]
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	d501      	bpl.n	8003c94 <_vfiprintf_r+0x34>
 8003c90:	692b      	ldr	r3, [r5, #16]
 8003c92:	b99b      	cbnz	r3, 8003cbc <_vfiprintf_r+0x5c>
 8003c94:	4629      	mov	r1, r5
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff fdee 	bl	8003878 <__swsetup_r>
 8003c9c:	b170      	cbz	r0, 8003cbc <_vfiprintf_r+0x5c>
 8003c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ca0:	07dc      	lsls	r4, r3, #31
 8003ca2:	d504      	bpl.n	8003cae <_vfiprintf_r+0x4e>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b01d      	add	sp, #116	@ 0x74
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	0598      	lsls	r0, r3, #22
 8003cb2:	d4f7      	bmi.n	8003ca4 <_vfiprintf_r+0x44>
 8003cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cb6:	f7ff feaf 	bl	8003a18 <__retarget_lock_release_recursive>
 8003cba:	e7f3      	b.n	8003ca4 <_vfiprintf_r+0x44>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cca:	2330      	movs	r3, #48	@ 0x30
 8003ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e7c <_vfiprintf_r+0x21c>
 8003cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cd4:	f04f 0901 	mov.w	r9, #1
 8003cd8:	4623      	mov	r3, r4
 8003cda:	469a      	mov	sl, r3
 8003cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce0:	b10a      	cbz	r2, 8003ce6 <_vfiprintf_r+0x86>
 8003ce2:	2a25      	cmp	r2, #37	@ 0x25
 8003ce4:	d1f9      	bne.n	8003cda <_vfiprintf_r+0x7a>
 8003ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8003cea:	d00b      	beq.n	8003d04 <_vfiprintf_r+0xa4>
 8003cec:	465b      	mov	r3, fp
 8003cee:	4622      	mov	r2, r4
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff ffa1 	bl	8003c3a <__sfputs_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	f000 80a7 	beq.w	8003e4c <_vfiprintf_r+0x1ec>
 8003cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d00:	445a      	add	r2, fp
 8003d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d04:	f89a 3000 	ldrb.w	r3, [sl]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 809f 	beq.w	8003e4c <_vfiprintf_r+0x1ec>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d18:	f10a 0a01 	add.w	sl, sl, #1
 8003d1c:	9304      	str	r3, [sp, #16]
 8003d1e:	9307      	str	r3, [sp, #28]
 8003d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d26:	4654      	mov	r4, sl
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2e:	4853      	ldr	r0, [pc, #332]	@ (8003e7c <_vfiprintf_r+0x21c>)
 8003d30:	f7fc fa56 	bl	80001e0 <memchr>
 8003d34:	9a04      	ldr	r2, [sp, #16]
 8003d36:	b9d8      	cbnz	r0, 8003d70 <_vfiprintf_r+0x110>
 8003d38:	06d1      	lsls	r1, r2, #27
 8003d3a:	bf44      	itt	mi
 8003d3c:	2320      	movmi	r3, #32
 8003d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d42:	0713      	lsls	r3, r2, #28
 8003d44:	bf44      	itt	mi
 8003d46:	232b      	movmi	r3, #43	@ 0x2b
 8003d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d52:	d015      	beq.n	8003d80 <_vfiprintf_r+0x120>
 8003d54:	9a07      	ldr	r2, [sp, #28]
 8003d56:	4654      	mov	r4, sl
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f04f 0c0a 	mov.w	ip, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d64:	3b30      	subs	r3, #48	@ 0x30
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	d94b      	bls.n	8003e02 <_vfiprintf_r+0x1a2>
 8003d6a:	b1b0      	cbz	r0, 8003d9a <_vfiprintf_r+0x13a>
 8003d6c:	9207      	str	r2, [sp, #28]
 8003d6e:	e014      	b.n	8003d9a <_vfiprintf_r+0x13a>
 8003d70:	eba0 0308 	sub.w	r3, r0, r8
 8003d74:	fa09 f303 	lsl.w	r3, r9, r3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	9304      	str	r3, [sp, #16]
 8003d7c:	46a2      	mov	sl, r4
 8003d7e:	e7d2      	b.n	8003d26 <_vfiprintf_r+0xc6>
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	1d19      	adds	r1, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	9103      	str	r1, [sp, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bfbb      	ittet	lt
 8003d8c:	425b      	neglt	r3, r3
 8003d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8003d92:	9307      	strge	r3, [sp, #28]
 8003d94:	9307      	strlt	r3, [sp, #28]
 8003d96:	bfb8      	it	lt
 8003d98:	9204      	strlt	r2, [sp, #16]
 8003d9a:	7823      	ldrb	r3, [r4, #0]
 8003d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d9e:	d10a      	bne.n	8003db6 <_vfiprintf_r+0x156>
 8003da0:	7863      	ldrb	r3, [r4, #1]
 8003da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003da4:	d132      	bne.n	8003e0c <_vfiprintf_r+0x1ac>
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	1d1a      	adds	r2, r3, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	9203      	str	r2, [sp, #12]
 8003dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003db2:	3402      	adds	r4, #2
 8003db4:	9305      	str	r3, [sp, #20]
 8003db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e8c <_vfiprintf_r+0x22c>
 8003dba:	7821      	ldrb	r1, [r4, #0]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	4650      	mov	r0, sl
 8003dc0:	f7fc fa0e 	bl	80001e0 <memchr>
 8003dc4:	b138      	cbz	r0, 8003dd6 <_vfiprintf_r+0x176>
 8003dc6:	9b04      	ldr	r3, [sp, #16]
 8003dc8:	eba0 000a 	sub.w	r0, r0, sl
 8003dcc:	2240      	movs	r2, #64	@ 0x40
 8003dce:	4082      	lsls	r2, r0
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	3401      	adds	r4, #1
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dda:	4829      	ldr	r0, [pc, #164]	@ (8003e80 <_vfiprintf_r+0x220>)
 8003ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003de0:	2206      	movs	r2, #6
 8003de2:	f7fc f9fd 	bl	80001e0 <memchr>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d03f      	beq.n	8003e6a <_vfiprintf_r+0x20a>
 8003dea:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <_vfiprintf_r+0x224>)
 8003dec:	bb1b      	cbnz	r3, 8003e36 <_vfiprintf_r+0x1d6>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	3307      	adds	r3, #7
 8003df2:	f023 0307 	bic.w	r3, r3, #7
 8003df6:	3308      	adds	r3, #8
 8003df8:	9303      	str	r3, [sp, #12]
 8003dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dfc:	443b      	add	r3, r7
 8003dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e00:	e76a      	b.n	8003cd8 <_vfiprintf_r+0x78>
 8003e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e06:	460c      	mov	r4, r1
 8003e08:	2001      	movs	r0, #1
 8003e0a:	e7a8      	b.n	8003d5e <_vfiprintf_r+0xfe>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	3401      	adds	r4, #1
 8003e10:	9305      	str	r3, [sp, #20]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 0c0a 	mov.w	ip, #10
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e1e:	3a30      	subs	r2, #48	@ 0x30
 8003e20:	2a09      	cmp	r2, #9
 8003e22:	d903      	bls.n	8003e2c <_vfiprintf_r+0x1cc>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0c6      	beq.n	8003db6 <_vfiprintf_r+0x156>
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	e7c4      	b.n	8003db6 <_vfiprintf_r+0x156>
 8003e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e30:	4604      	mov	r4, r0
 8003e32:	2301      	movs	r3, #1
 8003e34:	e7f0      	b.n	8003e18 <_vfiprintf_r+0x1b8>
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462a      	mov	r2, r5
 8003e3c:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <_vfiprintf_r+0x228>)
 8003e3e:	a904      	add	r1, sp, #16
 8003e40:	4630      	mov	r0, r6
 8003e42:	f3af 8000 	nop.w
 8003e46:	4607      	mov	r7, r0
 8003e48:	1c78      	adds	r0, r7, #1
 8003e4a:	d1d6      	bne.n	8003dfa <_vfiprintf_r+0x19a>
 8003e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e4e:	07d9      	lsls	r1, r3, #31
 8003e50:	d405      	bmi.n	8003e5e <_vfiprintf_r+0x1fe>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	059a      	lsls	r2, r3, #22
 8003e56:	d402      	bmi.n	8003e5e <_vfiprintf_r+0x1fe>
 8003e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e5a:	f7ff fddd 	bl	8003a18 <__retarget_lock_release_recursive>
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	065b      	lsls	r3, r3, #25
 8003e62:	f53f af1f 	bmi.w	8003ca4 <_vfiprintf_r+0x44>
 8003e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e68:	e71e      	b.n	8003ca8 <_vfiprintf_r+0x48>
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <_vfiprintf_r+0x228>)
 8003e72:	a904      	add	r1, sp, #16
 8003e74:	4630      	mov	r0, r6
 8003e76:	f000 f879 	bl	8003f6c <_printf_i>
 8003e7a:	e7e4      	b.n	8003e46 <_vfiprintf_r+0x1e6>
 8003e7c:	0800448c 	.word	0x0800448c
 8003e80:	08004496 	.word	0x08004496
 8003e84:	00000000 	.word	0x00000000
 8003e88:	08003c3b 	.word	0x08003c3b
 8003e8c:	08004492 	.word	0x08004492

08003e90 <_printf_common>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	4616      	mov	r6, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	688a      	ldr	r2, [r1, #8]
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bfb8      	it	lt
 8003ea4:	4613      	movlt	r3, r2
 8003ea6:	6033      	str	r3, [r6, #0]
 8003ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eac:	4607      	mov	r7, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	b10a      	cbz	r2, 8003eb6 <_printf_common+0x26>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	6833      	ldrmi	r3, [r6, #0]
 8003ebe:	3302      	addmi	r3, #2
 8003ec0:	6033      	strmi	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d106      	bne.n	8003ed8 <_printf_common+0x48>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dc26      	bgt.n	8003f26 <_printf_common+0x96>
 8003ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	3b00      	subs	r3, #0
 8003ee0:	bf18      	it	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	0692      	lsls	r2, r2, #26
 8003ee6:	d42b      	bmi.n	8003f40 <_printf_common+0xb0>
 8003ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eec:	4641      	mov	r1, r8
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d01e      	beq.n	8003f34 <_printf_common+0xa4>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	bf02      	ittt	eq
 8003f02:	68e5      	ldreq	r5, [r4, #12]
 8003f04:	6833      	ldreq	r3, [r6, #0]
 8003f06:	1aed      	subeq	r5, r5, r3
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	bf0c      	ite	eq
 8003f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f10:	2500      	movne	r5, #0
 8003f12:	4293      	cmp	r3, r2
 8003f14:	bfc4      	itt	gt
 8003f16:	1a9b      	subgt	r3, r3, r2
 8003f18:	18ed      	addgt	r5, r5, r3
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	341a      	adds	r4, #26
 8003f1e:	42b5      	cmp	r5, r6
 8003f20:	d11a      	bne.n	8003f58 <_printf_common+0xc8>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e008      	b.n	8003f38 <_printf_common+0xa8>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4652      	mov	r2, sl
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	47c8      	blx	r9
 8003f30:	3001      	adds	r0, #1
 8003f32:	d103      	bne.n	8003f3c <_printf_common+0xac>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7c6      	b.n	8003ece <_printf_common+0x3e>
 8003f40:	18e1      	adds	r1, r4, r3
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	2030      	movs	r0, #48	@ 0x30
 8003f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f4a:	4422      	add	r2, r4
 8003f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f54:	3302      	adds	r3, #2
 8003f56:	e7c7      	b.n	8003ee8 <_printf_common+0x58>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	4638      	mov	r0, r7
 8003f60:	47c8      	blx	r9
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0e6      	beq.n	8003f34 <_printf_common+0xa4>
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7d9      	b.n	8003f1e <_printf_common+0x8e>
	...

08003f6c <_printf_i>:
 8003f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	7e0f      	ldrb	r7, [r1, #24]
 8003f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f74:	2f78      	cmp	r7, #120	@ 0x78
 8003f76:	4691      	mov	r9, r2
 8003f78:	4680      	mov	r8, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	469a      	mov	sl, r3
 8003f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f82:	d807      	bhi.n	8003f94 <_printf_i+0x28>
 8003f84:	2f62      	cmp	r7, #98	@ 0x62
 8003f86:	d80a      	bhi.n	8003f9e <_printf_i+0x32>
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	f000 80d1 	beq.w	8004130 <_printf_i+0x1c4>
 8003f8e:	2f58      	cmp	r7, #88	@ 0x58
 8003f90:	f000 80b8 	beq.w	8004104 <_printf_i+0x198>
 8003f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f9c:	e03a      	b.n	8004014 <_printf_i+0xa8>
 8003f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fa2:	2b15      	cmp	r3, #21
 8003fa4:	d8f6      	bhi.n	8003f94 <_printf_i+0x28>
 8003fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8003fac <_printf_i+0x40>)
 8003fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fac:	08004005 	.word	0x08004005
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08003f95 	.word	0x08003f95
 8003fb8:	08003f95 	.word	0x08003f95
 8003fbc:	08003f95 	.word	0x08003f95
 8003fc0:	08003f95 	.word	0x08003f95
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08003f95 	.word	0x08003f95
 8003fcc:	08003f95 	.word	0x08003f95
 8003fd0:	08003f95 	.word	0x08003f95
 8003fd4:	08003f95 	.word	0x08003f95
 8003fd8:	08004117 	.word	0x08004117
 8003fdc:	08004043 	.word	0x08004043
 8003fe0:	080040d1 	.word	0x080040d1
 8003fe4:	08003f95 	.word	0x08003f95
 8003fe8:	08003f95 	.word	0x08003f95
 8003fec:	08004139 	.word	0x08004139
 8003ff0:	08003f95 	.word	0x08003f95
 8003ff4:	08004043 	.word	0x08004043
 8003ff8:	08003f95 	.word	0x08003f95
 8003ffc:	08003f95 	.word	0x08003f95
 8004000:	080040d9 	.word	0x080040d9
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6032      	str	r2, [r6, #0]
 800400c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004014:	2301      	movs	r3, #1
 8004016:	e09c      	b.n	8004152 <_printf_i+0x1e6>
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6031      	str	r1, [r6, #0]
 8004020:	0606      	lsls	r6, r0, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xbc>
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	e003      	b.n	8004030 <_printf_i+0xc4>
 8004028:	0645      	lsls	r5, r0, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xb8>
 800402c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004030:	2d00      	cmp	r5, #0
 8004032:	da03      	bge.n	800403c <_printf_i+0xd0>
 8004034:	232d      	movs	r3, #45	@ 0x2d
 8004036:	426d      	negs	r5, r5
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800403c:	4858      	ldr	r0, [pc, #352]	@ (80041a0 <_printf_i+0x234>)
 800403e:	230a      	movs	r3, #10
 8004040:	e011      	b.n	8004066 <_printf_i+0xfa>
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	0608      	lsls	r0, r1, #24
 8004048:	f853 5b04 	ldr.w	r5, [r3], #4
 800404c:	d402      	bmi.n	8004054 <_printf_i+0xe8>
 800404e:	0649      	lsls	r1, r1, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	2f6f      	cmp	r7, #111	@ 0x6f
 8004056:	4852      	ldr	r0, [pc, #328]	@ (80041a0 <_printf_i+0x234>)
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	bf14      	ite	ne
 800405c:	230a      	movne	r3, #10
 800405e:	2308      	moveq	r3, #8
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004066:	6866      	ldr	r6, [r4, #4]
 8004068:	60a6      	str	r6, [r4, #8]
 800406a:	2e00      	cmp	r6, #0
 800406c:	db05      	blt.n	800407a <_printf_i+0x10e>
 800406e:	6821      	ldr	r1, [r4, #0]
 8004070:	432e      	orrs	r6, r5
 8004072:	f021 0104 	bic.w	r1, r1, #4
 8004076:	6021      	str	r1, [r4, #0]
 8004078:	d04b      	beq.n	8004112 <_printf_i+0x1a6>
 800407a:	4616      	mov	r6, r2
 800407c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004080:	fb03 5711 	mls	r7, r3, r1, r5
 8004084:	5dc7      	ldrb	r7, [r0, r7]
 8004086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800408a:	462f      	mov	r7, r5
 800408c:	42bb      	cmp	r3, r7
 800408e:	460d      	mov	r5, r1
 8004090:	d9f4      	bls.n	800407c <_printf_i+0x110>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d10b      	bne.n	80040ae <_printf_i+0x142>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	07df      	lsls	r7, r3, #31
 800409a:	d508      	bpl.n	80040ae <_printf_i+0x142>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6861      	ldr	r1, [r4, #4]
 80040a0:	4299      	cmp	r1, r3
 80040a2:	bfde      	ittt	le
 80040a4:	2330      	movle	r3, #48	@ 0x30
 80040a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040ae:	1b92      	subs	r2, r2, r6
 80040b0:	6122      	str	r2, [r4, #16]
 80040b2:	f8cd a000 	str.w	sl, [sp]
 80040b6:	464b      	mov	r3, r9
 80040b8:	aa03      	add	r2, sp, #12
 80040ba:	4621      	mov	r1, r4
 80040bc:	4640      	mov	r0, r8
 80040be:	f7ff fee7 	bl	8003e90 <_printf_common>
 80040c2:	3001      	adds	r0, #1
 80040c4:	d14a      	bne.n	800415c <_printf_i+0x1f0>
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	b004      	add	sp, #16
 80040cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f043 0320 	orr.w	r3, r3, #32
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	4832      	ldr	r0, [pc, #200]	@ (80041a4 <_printf_i+0x238>)
 80040da:	2778      	movs	r7, #120	@ 0x78
 80040dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	061f      	lsls	r7, r3, #24
 80040e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80040ea:	d402      	bmi.n	80040f2 <_printf_i+0x186>
 80040ec:	065f      	lsls	r7, r3, #25
 80040ee:	bf48      	it	mi
 80040f0:	b2ad      	uxthmi	r5, r5
 80040f2:	6031      	str	r1, [r6, #0]
 80040f4:	07d9      	lsls	r1, r3, #31
 80040f6:	bf44      	itt	mi
 80040f8:	f043 0320 	orrmi.w	r3, r3, #32
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b11d      	cbz	r5, 8004108 <_printf_i+0x19c>
 8004100:	2310      	movs	r3, #16
 8004102:	e7ad      	b.n	8004060 <_printf_i+0xf4>
 8004104:	4826      	ldr	r0, [pc, #152]	@ (80041a0 <_printf_i+0x234>)
 8004106:	e7e9      	b.n	80040dc <_printf_i+0x170>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f023 0320 	bic.w	r3, r3, #32
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	e7f6      	b.n	8004100 <_printf_i+0x194>
 8004112:	4616      	mov	r6, r2
 8004114:	e7bd      	b.n	8004092 <_printf_i+0x126>
 8004116:	6833      	ldr	r3, [r6, #0]
 8004118:	6825      	ldr	r5, [r4, #0]
 800411a:	6961      	ldr	r1, [r4, #20]
 800411c:	1d18      	adds	r0, r3, #4
 800411e:	6030      	str	r0, [r6, #0]
 8004120:	062e      	lsls	r6, r5, #24
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	d501      	bpl.n	800412a <_printf_i+0x1be>
 8004126:	6019      	str	r1, [r3, #0]
 8004128:	e002      	b.n	8004130 <_printf_i+0x1c4>
 800412a:	0668      	lsls	r0, r5, #25
 800412c:	d5fb      	bpl.n	8004126 <_printf_i+0x1ba>
 800412e:	8019      	strh	r1, [r3, #0]
 8004130:	2300      	movs	r3, #0
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	4616      	mov	r6, r2
 8004136:	e7bc      	b.n	80040b2 <_printf_i+0x146>
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	6032      	str	r2, [r6, #0]
 800413e:	681e      	ldr	r6, [r3, #0]
 8004140:	6862      	ldr	r2, [r4, #4]
 8004142:	2100      	movs	r1, #0
 8004144:	4630      	mov	r0, r6
 8004146:	f7fc f84b 	bl	80001e0 <memchr>
 800414a:	b108      	cbz	r0, 8004150 <_printf_i+0x1e4>
 800414c:	1b80      	subs	r0, r0, r6
 800414e:	6060      	str	r0, [r4, #4]
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	2300      	movs	r3, #0
 8004156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800415a:	e7aa      	b.n	80040b2 <_printf_i+0x146>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	4632      	mov	r2, r6
 8004160:	4649      	mov	r1, r9
 8004162:	4640      	mov	r0, r8
 8004164:	47d0      	blx	sl
 8004166:	3001      	adds	r0, #1
 8004168:	d0ad      	beq.n	80040c6 <_printf_i+0x15a>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	079b      	lsls	r3, r3, #30
 800416e:	d413      	bmi.n	8004198 <_printf_i+0x22c>
 8004170:	68e0      	ldr	r0, [r4, #12]
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	4298      	cmp	r0, r3
 8004176:	bfb8      	it	lt
 8004178:	4618      	movlt	r0, r3
 800417a:	e7a6      	b.n	80040ca <_printf_i+0x15e>
 800417c:	2301      	movs	r3, #1
 800417e:	4632      	mov	r2, r6
 8004180:	4649      	mov	r1, r9
 8004182:	4640      	mov	r0, r8
 8004184:	47d0      	blx	sl
 8004186:	3001      	adds	r0, #1
 8004188:	d09d      	beq.n	80040c6 <_printf_i+0x15a>
 800418a:	3501      	adds	r5, #1
 800418c:	68e3      	ldr	r3, [r4, #12]
 800418e:	9903      	ldr	r1, [sp, #12]
 8004190:	1a5b      	subs	r3, r3, r1
 8004192:	42ab      	cmp	r3, r5
 8004194:	dcf2      	bgt.n	800417c <_printf_i+0x210>
 8004196:	e7eb      	b.n	8004170 <_printf_i+0x204>
 8004198:	2500      	movs	r5, #0
 800419a:	f104 0619 	add.w	r6, r4, #25
 800419e:	e7f5      	b.n	800418c <_printf_i+0x220>
 80041a0:	0800449d 	.word	0x0800449d
 80041a4:	080044ae 	.word	0x080044ae

080041a8 <__sflush_r>:
 80041a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	0716      	lsls	r6, r2, #28
 80041b2:	4605      	mov	r5, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	d454      	bmi.n	8004262 <__sflush_r+0xba>
 80041b8:	684b      	ldr	r3, [r1, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	dc02      	bgt.n	80041c4 <__sflush_r+0x1c>
 80041be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dd48      	ble.n	8004256 <__sflush_r+0xae>
 80041c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041c6:	2e00      	cmp	r6, #0
 80041c8:	d045      	beq.n	8004256 <__sflush_r+0xae>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80041d0:	682f      	ldr	r7, [r5, #0]
 80041d2:	6a21      	ldr	r1, [r4, #32]
 80041d4:	602b      	str	r3, [r5, #0]
 80041d6:	d030      	beq.n	800423a <__sflush_r+0x92>
 80041d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	0759      	lsls	r1, r3, #29
 80041de:	d505      	bpl.n	80041ec <__sflush_r+0x44>
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80041e6:	b10b      	cbz	r3, 80041ec <__sflush_r+0x44>
 80041e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041f0:	6a21      	ldr	r1, [r4, #32]
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b0      	blx	r6
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	d106      	bne.n	800420a <__sflush_r+0x62>
 80041fc:	6829      	ldr	r1, [r5, #0]
 80041fe:	291d      	cmp	r1, #29
 8004200:	d82b      	bhi.n	800425a <__sflush_r+0xb2>
 8004202:	4a2a      	ldr	r2, [pc, #168]	@ (80042ac <__sflush_r+0x104>)
 8004204:	40ca      	lsrs	r2, r1
 8004206:	07d6      	lsls	r6, r2, #31
 8004208:	d527      	bpl.n	800425a <__sflush_r+0xb2>
 800420a:	2200      	movs	r2, #0
 800420c:	6062      	str	r2, [r4, #4]
 800420e:	04d9      	lsls	r1, r3, #19
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	d504      	bpl.n	8004220 <__sflush_r+0x78>
 8004216:	1c42      	adds	r2, r0, #1
 8004218:	d101      	bne.n	800421e <__sflush_r+0x76>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	b903      	cbnz	r3, 8004220 <__sflush_r+0x78>
 800421e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004222:	602f      	str	r7, [r5, #0]
 8004224:	b1b9      	cbz	r1, 8004256 <__sflush_r+0xae>
 8004226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800422a:	4299      	cmp	r1, r3
 800422c:	d002      	beq.n	8004234 <__sflush_r+0x8c>
 800422e:	4628      	mov	r0, r5
 8004230:	f7ff fbf4 	bl	8003a1c <_free_r>
 8004234:	2300      	movs	r3, #0
 8004236:	6363      	str	r3, [r4, #52]	@ 0x34
 8004238:	e00d      	b.n	8004256 <__sflush_r+0xae>
 800423a:	2301      	movs	r3, #1
 800423c:	4628      	mov	r0, r5
 800423e:	47b0      	blx	r6
 8004240:	4602      	mov	r2, r0
 8004242:	1c50      	adds	r0, r2, #1
 8004244:	d1c9      	bne.n	80041da <__sflush_r+0x32>
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0c6      	beq.n	80041da <__sflush_r+0x32>
 800424c:	2b1d      	cmp	r3, #29
 800424e:	d001      	beq.n	8004254 <__sflush_r+0xac>
 8004250:	2b16      	cmp	r3, #22
 8004252:	d11e      	bne.n	8004292 <__sflush_r+0xea>
 8004254:	602f      	str	r7, [r5, #0]
 8004256:	2000      	movs	r0, #0
 8004258:	e022      	b.n	80042a0 <__sflush_r+0xf8>
 800425a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800425e:	b21b      	sxth	r3, r3
 8004260:	e01b      	b.n	800429a <__sflush_r+0xf2>
 8004262:	690f      	ldr	r7, [r1, #16]
 8004264:	2f00      	cmp	r7, #0
 8004266:	d0f6      	beq.n	8004256 <__sflush_r+0xae>
 8004268:	0793      	lsls	r3, r2, #30
 800426a:	680e      	ldr	r6, [r1, #0]
 800426c:	bf08      	it	eq
 800426e:	694b      	ldreq	r3, [r1, #20]
 8004270:	600f      	str	r7, [r1, #0]
 8004272:	bf18      	it	ne
 8004274:	2300      	movne	r3, #0
 8004276:	eba6 0807 	sub.w	r8, r6, r7
 800427a:	608b      	str	r3, [r1, #8]
 800427c:	f1b8 0f00 	cmp.w	r8, #0
 8004280:	dde9      	ble.n	8004256 <__sflush_r+0xae>
 8004282:	6a21      	ldr	r1, [r4, #32]
 8004284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004286:	4643      	mov	r3, r8
 8004288:	463a      	mov	r2, r7
 800428a:	4628      	mov	r0, r5
 800428c:	47b0      	blx	r6
 800428e:	2800      	cmp	r0, #0
 8004290:	dc08      	bgt.n	80042a4 <__sflush_r+0xfc>
 8004292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	4407      	add	r7, r0
 80042a6:	eba8 0800 	sub.w	r8, r8, r0
 80042aa:	e7e7      	b.n	800427c <__sflush_r+0xd4>
 80042ac:	20400001 	.word	0x20400001

080042b0 <_fflush_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	690b      	ldr	r3, [r1, #16]
 80042b4:	4605      	mov	r5, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	b913      	cbnz	r3, 80042c0 <_fflush_r+0x10>
 80042ba:	2500      	movs	r5, #0
 80042bc:	4628      	mov	r0, r5
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	b118      	cbz	r0, 80042ca <_fflush_r+0x1a>
 80042c2:	6a03      	ldr	r3, [r0, #32]
 80042c4:	b90b      	cbnz	r3, 80042ca <_fflush_r+0x1a>
 80042c6:	f7ff f9af 	bl	8003628 <__sinit>
 80042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f3      	beq.n	80042ba <_fflush_r+0xa>
 80042d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	d404      	bmi.n	80042e2 <_fflush_r+0x32>
 80042d8:	0599      	lsls	r1, r3, #22
 80042da:	d402      	bmi.n	80042e2 <_fflush_r+0x32>
 80042dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042de:	f7ff fb9a 	bl	8003a16 <__retarget_lock_acquire_recursive>
 80042e2:	4628      	mov	r0, r5
 80042e4:	4621      	mov	r1, r4
 80042e6:	f7ff ff5f 	bl	80041a8 <__sflush_r>
 80042ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ec:	07da      	lsls	r2, r3, #31
 80042ee:	4605      	mov	r5, r0
 80042f0:	d4e4      	bmi.n	80042bc <_fflush_r+0xc>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	059b      	lsls	r3, r3, #22
 80042f6:	d4e1      	bmi.n	80042bc <_fflush_r+0xc>
 80042f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042fa:	f7ff fb8d 	bl	8003a18 <__retarget_lock_release_recursive>
 80042fe:	e7dd      	b.n	80042bc <_fflush_r+0xc>

08004300 <__swhatbuf_r>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	460c      	mov	r4, r1
 8004304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004308:	2900      	cmp	r1, #0
 800430a:	b096      	sub	sp, #88	@ 0x58
 800430c:	4615      	mov	r5, r2
 800430e:	461e      	mov	r6, r3
 8004310:	da0d      	bge.n	800432e <__swhatbuf_r+0x2e>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	bf14      	ite	ne
 800431e:	2340      	movne	r3, #64	@ 0x40
 8004320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004324:	2000      	movs	r0, #0
 8004326:	6031      	str	r1, [r6, #0]
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	b016      	add	sp, #88	@ 0x58
 800432c:	bd70      	pop	{r4, r5, r6, pc}
 800432e:	466a      	mov	r2, sp
 8004330:	f000 f848 	bl	80043c4 <_fstat_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	dbec      	blt.n	8004312 <__swhatbuf_r+0x12>
 8004338:	9901      	ldr	r1, [sp, #4]
 800433a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800433e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004342:	4259      	negs	r1, r3
 8004344:	4159      	adcs	r1, r3
 8004346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800434a:	e7eb      	b.n	8004324 <__swhatbuf_r+0x24>

0800434c <__smakebuf_r>:
 800434c:	898b      	ldrh	r3, [r1, #12]
 800434e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004350:	079d      	lsls	r5, r3, #30
 8004352:	4606      	mov	r6, r0
 8004354:	460c      	mov	r4, r1
 8004356:	d507      	bpl.n	8004368 <__smakebuf_r+0x1c>
 8004358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	2301      	movs	r3, #1
 8004362:	6163      	str	r3, [r4, #20]
 8004364:	b003      	add	sp, #12
 8004366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004368:	ab01      	add	r3, sp, #4
 800436a:	466a      	mov	r2, sp
 800436c:	f7ff ffc8 	bl	8004300 <__swhatbuf_r>
 8004370:	9f00      	ldr	r7, [sp, #0]
 8004372:	4605      	mov	r5, r0
 8004374:	4639      	mov	r1, r7
 8004376:	4630      	mov	r0, r6
 8004378:	f7ff fbbc 	bl	8003af4 <_malloc_r>
 800437c:	b948      	cbnz	r0, 8004392 <__smakebuf_r+0x46>
 800437e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004382:	059a      	lsls	r2, r3, #22
 8004384:	d4ee      	bmi.n	8004364 <__smakebuf_r+0x18>
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	f043 0302 	orr.w	r3, r3, #2
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	e7e2      	b.n	8004358 <__smakebuf_r+0xc>
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	6020      	str	r0, [r4, #0]
 8004396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	9b01      	ldr	r3, [sp, #4]
 800439e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043a2:	b15b      	cbz	r3, 80043bc <__smakebuf_r+0x70>
 80043a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a8:	4630      	mov	r0, r6
 80043aa:	f000 f81d 	bl	80043e8 <_isatty_r>
 80043ae:	b128      	cbz	r0, 80043bc <__smakebuf_r+0x70>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	81a3      	strh	r3, [r4, #12]
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	431d      	orrs	r5, r3
 80043c0:	81a5      	strh	r5, [r4, #12]
 80043c2:	e7cf      	b.n	8004364 <__smakebuf_r+0x18>

080043c4 <_fstat_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d07      	ldr	r5, [pc, #28]	@ (80043e4 <_fstat_r+0x20>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	f7fc fe3f 	bl	8001054 <_fstat>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d102      	bne.n	80043e0 <_fstat_r+0x1c>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	b103      	cbz	r3, 80043e0 <_fstat_r+0x1c>
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	20000330 	.word	0x20000330

080043e8 <_isatty_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d06      	ldr	r5, [pc, #24]	@ (8004404 <_isatty_r+0x1c>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc fe3e 	bl	8001074 <_isatty>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_isatty_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_isatty_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20000330 	.word	0x20000330

08004408 <_sbrk_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d06      	ldr	r5, [pc, #24]	@ (8004424 <_sbrk_r+0x1c>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc fe46 	bl	80010a4 <_sbrk>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_sbrk_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_sbrk_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000330 	.word	0x20000330

08004428 <_init>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr

08004434 <_fini>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr
